from datetime import datetime

import pytz
import schedule
import time
import threading

from app_types import OrderTypeRu
from bot import bot
from config import CHANNEL_CHAT_ID
from database import get_connection


def generate_daily_report():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç –æ –ø—Ä–æ–¥–∞–∂–∞—Ö"""
    try:
        today = datetime.now().date()

        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑—ã –∑–∞ —Å–µ–≥–æ–¥–Ω—è
        with get_connection() as conn:
            with conn.cursor() as cursor:
                # –ó–∞–ø—Ä–æ—Å –¥–ª—è –ø—Ä—è–º—ã—Ö –ø—Ä–æ–¥–∞–∂
                direct_query = """
                                   WITH order_counts AS (
                                       SELECT 
                                           o.id,
                                           o.total_price,
                                           o.manager_id,
                                           u.name as manager_name,
                                           u.username as manager_username,
                                           COUNT(CASE WHEN oi.is_main_product THEN 1 END) as main_products,
                                           COUNT(CASE WHEN NOT oi.is_main_product THEN 1 END) as additional_products
                                       FROM orders o
                                       LEFT JOIN users u ON o.manager_id = u.id
                                       LEFT JOIN order_items oi ON o.id = oi.order_id
                                       WHERE o.order_type = 'direct' 
                                       AND o.status = 'closed'
                                       AND DATE(o.closed_date) = %s
                                       GROUP BY o.id, o.total_price, o.manager_id, u.name, u.username
                                       ORDER BY o.id
                                   )
                                   SELECT *, 
                                          SUM(main_products) OVER() as total_main,
                                          SUM(additional_products) OVER() as total_additional
                                   FROM order_counts
                               """
                cursor.execute(direct_query, (today,))
                direct_sales = cursor.fetchall()

                # –ó–∞–ø—Ä–æ—Å –¥–ª—è –ê–≤–∏—Ç–æ
                avito_query = """
                                   WITH order_counts AS (
                                       SELECT 
                                           o.id,
                                           o.total_price,
                                           o.manager_id,
                                           u.name as manager_name,
                                           u.username as manager_username,
                                           c.name as courier_name,
                                           c.username as courier_username,
                                           array_agg(DISTINCT ap.tracking_number) as tracking_numbers,
                                           o.status,
                                           COUNT(CASE WHEN oi.is_main_product THEN 1 END) as main_products,
                                           COUNT(CASE WHEN NOT oi.is_main_product THEN 1 END) as additional_products
                                       FROM orders o
                                       LEFT JOIN users u ON o.manager_id = u.id
                                       LEFT JOIN users c ON o.courier_id = c.id
                                       LEFT JOIN avito_photos ap ON o.id = ap.order_id
                                       LEFT JOIN order_items oi ON o.id = oi.order_id
                                       WHERE o.order_type = 'avito'
                                       AND DATE(o.created_at) = %s
                                       GROUP BY o.id, o.total_price, o.manager_id, u.name, u.username, 
                                               c.name, c.username, o.status
                                       ORDER BY o.id
                                   )
                                   SELECT *, 
                                          SUM(main_products) OVER() as total_main,
                                          SUM(additional_products) OVER() as total_additional
                                   FROM order_counts
                               """
                cursor.execute(avito_query, (today,))
                avito_sales = cursor.fetchall()

                # –ó–∞–ø—Ä–æ—Å –¥–ª—è –¥–æ—Å—Ç–∞–≤–æ–∫
                delivery_query = """
                                   WITH order_counts AS (
                                       SELECT 
                                           o.id,
                                           o.total_price,
                                           o.manager_id,
                                           u.name as manager_name,
                                           u.username as manager_username,
                                           c.name as courier_name,
                                           c.username as courier_username,
                                           o.delivery_address,
                                           o.status,
                                           COUNT(CASE WHEN oi.is_main_product THEN 1 END) as main_products,
                                           COUNT(CASE WHEN NOT oi.is_main_product THEN 1 END) as additional_products
                                       FROM orders o
                                       LEFT JOIN users u ON o.manager_id = u.id
                                       LEFT JOIN users c ON o.courier_id = c.id
                                       LEFT JOIN order_items oi ON o.id = oi.order_id
                                       WHERE o.order_type = 'delivery'
                                       AND o.status IN ('closed')
                                       AND DATE(o.closed_date) = %s
                                       GROUP BY o.id, o.total_price, o.manager_id, u.name, u.username,
                                               c.name, c.username, o.delivery_address, o.status
                                       ORDER BY o.id
                                   )
                                   SELECT *, 
                                          SUM(main_products) OVER() as total_main,
                                          SUM(additional_products) OVER() as total_additional
                                   FROM order_counts
                               """
                cursor.execute(delivery_query, (today,))
                delivery_sales = cursor.fetchall()

        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        report = [
            f"üìä –û—Ç—á–µ—Ç –∑–∞ {today.strftime('%d.%m.%Y')}\n",
            "\nüíº –ü—Ä–æ–¥–∞–∂–∏ –≤ —à–æ—É—Ä—É–º–µ:"
        ]

        total_direct = 0
        if direct_sales:
            for sale in direct_sales:
                total_direct += sale[1]
                report.append(
                    f"‚Ä¢ –ó–∞–∫–∞–∑ #{str(sale[0]).zfill(4)}„Ö§\n"
                    f"  üë§ –ú–µ–Ω–µ–¥–∂–µ—Ä: {sale[4]}"
                )
            total_main = direct_sales[0][-2] or 0  # –ü—Ä–µ–¥–ø–æ—Å–ª–µ–¥–Ω–∏–π —Å—Ç–æ–ª–±–µ—Ü
            total_additional = direct_sales[0][-1] or 0  # –ü–æ—Å–ª–µ–¥–Ω–∏–π —Å—Ç–æ–ª–±–µ—Ü
            report.append(f"\n–ü—Ä–æ–¥–∞–ª–∏ –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤: {total_main}\n")
            report.append(f"–ü—Ä–æ–¥–∞–ª–∏ –¥–æ–ø–Ω–∏–∫–æ–≤: {total_additional}\n")
        else:
            report.append("–ù–µ—Ç –ø—Ä–æ–¥–∞–∂")


        report.append("\nüì¨ –ü—Ä–æ–¥–∞–∂–∏ –ê–≤–∏—Ç–æ:")
        total_avito = 0
        if avito_sales:
            for sale in avito_sales:
                total_avito += sale[1]
                track_numbers = ', '.join(sale[5]) if sale[5] else '–Ω–µ—Ç —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä–æ–≤'
                report.append(
                    f"‚Ä¢ –ó–∞–∫–∞–∑ #{str(sale[0]).zfill(4)}„Ö§\n"
                    f"  üë§ –ú–µ–Ω–µ–¥–∂–µ—Ä: {sale[4]}\n"
                     f" üöö –ö—É—Ä—å–µ—Ä: {sale[6]}\n"
                    f"  üìä –°—Ç–∞—Ç—É—Å: {OrderTypeRu[sale[8].upper()].value}\n"
                )
            total_main = avito_sales[0][-2] or 0
            total_additional = avito_sales[0][-1] or 0
            report.append(f"\n–ü—Ä–æ–¥–∞–ª–∏ –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤: {total_main}\n")
            report.append(f"–ü—Ä–æ–¥–∞–ª–∏ –¥–æ–ø–Ω–∏–∫–æ–≤: {total_additional}\n")
        else:
            report.append("–ù–µ—Ç –ø—Ä–æ–¥–∞–∂")

        report.append("\nüöö –î–æ—Å—Ç–∞–≤–∫–∞:")
        total_delivery = 0
        if delivery_sales:
            for sale in delivery_sales:
                total_delivery += sale[1]
                status = "üìä –î–æ—Å—Ç–∞–≤–ª–µ–Ω" if sale[8] == 'closed' else "‚ö°Ô∏è –ß–∞—Å—Ç–∏—á–Ω–æ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω"
                report.append(
                    f"‚Ä¢ –ó–∞–∫–∞–∑ #{str(sale[0]).zfill(4)}„Ö§\n{status}\n"
                    f"  üë§ –ú–µ–Ω–µ–¥–∂–µ—Ä: {sale[4]}\n"
                    f"  üöö –ö—É—Ä—å–µ—Ä: {sale[6]}\n"
                )
            total_main = delivery_sales[0][-2] or 0
            total_additional = delivery_sales[0][-1] or 0
            report.append(f"\n–ü—Ä–æ–¥–∞–ª–∏ –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤: {total_main}\n")
            report.append(f"–ü—Ä–æ–¥–∞–ª–∏ –¥–æ–ø–Ω–∏–∫–æ–≤: {total_additional}\n")
        else:
            report.append("–ù–µ—Ç –¥–æ—Å—Ç–∞–≤–æ–∫")

        report.append(f"–í—Å–µ –º–æ–ª–æ–¥—Ü—ã! –í—Å–µ —Å–æ–ª–Ω—ã—à–∫–∏‚òÄÔ∏è")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç –≤ –∫–∞–Ω–∞–ª
        bot.send_message(
            CHANNEL_CHAT_ID,
            '\n'.join(report),
            parse_mode='HTML'
        )

    except Exception as e:
        print(f"Error generating daily report: {e}")


def run_scheduler():
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
    # ekb_tz = pytz.timezone('Asia/Yekaterinburg')
    # schedule.every().day.at("00:00").do(generate_daily_report)
    # schedule.every(1).minutes.do(generate_daily_report)
    schedule.every().day.at("00:00").do(generate_daily_report)
    while True:
        schedule.run_pending()
        time.sleep(60)


def start_scheduler():
    """–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
    scheduler_thread = threading.Thread(target=run_scheduler)
    scheduler_thread.daemon = True
    scheduler_thread.start()