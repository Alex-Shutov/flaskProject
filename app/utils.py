from datetime import datetime

from telebot import types
from PIL import Image

from app_types import SaleType
from bot import get_bot_instance
from app_types import OrderType, OrderTypeRu
from database import get_product_info
import os
import io
import re
from io import BytesIO
from telebot.types import InputMediaPhoto
from urllib.parse import quote
from typing import List, Dict, Optional

from app_types import SaleTypeRu,UserRole


def get_available_buttons(roles):
    buttons = []
    if UserRole.MANAGER.value in roles or UserRole.ADMIN.value in roles or UserRole.OWNER.value in roles:
        buttons.append(types.KeyboardButton("#–ü—Ä–æ–¥–∞–∂–∞"))
    if UserRole.COURIER.value in roles or UserRole.ADMIN.value in roles or UserRole.OWNER.value  in roles :
        buttons.append(types.KeyboardButton("#–î–æ—Å—Ç–∞–≤–∫–∞"))
    buttons.append(types.KeyboardButton("#–ó–∞–∫–∞–∑—ã"))
    return buttons

def escape_markdown_v2(text):
    """–≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è MarkdownV2."""
    return re.sub(r'([_*[\]()~`>#+\-=|{}.!])', r'\\\1', text)


def format_order_message(order_id, product_list, gift, note, sale_type,
                         manager_name, manager_username, delivery_date=None,  show_item_status=False,
                         delivery_time=None, delivery_address=None, delivery_note=None,zone_name=None,
                         contact_phone=None, contact_name=None, total_price=None, avito_boxes=None,hide_track_prices=False,
                         packer_name=None, packer_username=None,):
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–∫–∞–∑–µ —Å —É—á–µ—Ç–æ–º —Ç–∏–ø–∞ –ø—Ä–æ–¥–∞–∂–∏

    Args:
        order_id: ID –∑–∞–∫–∞–∑–∞
        product_list: –°–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ (–¥–ª—è Avito - —Å–ª–æ–≤–∞—Ä—å —Å —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä–∞–º–∏)
        gift: –ü–æ–¥–∞—Ä–æ–∫
        note: –ó–∞–º–µ—Ç–∫–∞
        sale_type: –¢–∏–ø –ø—Ä–æ–¥–∞–∂–∏
        manager_name: –ò–º—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞
        manager_username: Username –º–µ–Ω–µ–¥–∂–µ—Ä–∞
        delivery_date: –î–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ (–¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏)
        delivery_time: –í—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏ (–¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏)
        delivery_address: –ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏ (–¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏)
        zone_name: –ó–æ–Ω–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ (–¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏)
        delivery_note: –ó–∞–º–µ—Ç–∫–∞ –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏
        contact_phone: –ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω (–¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏)
        contact_name: –ò–º—è –∫–æ–Ω—Ç–∞–∫—Ç–∞ (–¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏)
        total_price: –û–±—â–∞—è —Å—É–º–º–∞
        avito_boxes: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—à–∫–æ–≤ –¥–ª—è Avito
    """
    formatted_order_id = str(order_id).zfill(4)
    print(formatted_order_id)
    # –§–æ—Ä–º–∏—Ä—É–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å–æ–æ–±—â–µ–Ω–∏—è
    print(sale_type.upper())

    order_parts = [
        f"üìã –ó–∞–∫–∞–∑ #{formatted_order_id}„Ö§\n",
        f"üè∑Ô∏è –¢–∏–ø –ø—Ä–æ–¥–∞–∂–∏: {SaleTypeRu[sale_type.upper()].value}",
        ""
    ]
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–¥—É–∫—Ç–∞—Ö –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –ø—Ä–æ–¥–∞–∂–∏
    if sale_type == SaleType.AVITO.value:
        for track_number, track_info in product_list.items():
            if hide_track_prices:
                order_parts.append(f"üîπ –¢—Ä–µ–∫-–Ω–æ–º–µ—Ä: {track_number}")
            else:
                track_price = track_info.get('price', 0)
                order_parts.append(f"üîπ –¢—Ä–µ–∫-–Ω–æ–º–µ—Ä: {track_number} - {track_price} —Ä—É–±.")

            for product in track_info['products']:
                emoji = "üì¶" if product.get('is_main_product') else "‚ûï"
                product_line = f"  {emoji} {product['name']} - {product['param']}"

                if show_item_status:
                    status = product.get('status', 'pending')
                    status_emoji = {
                        'pending': '‚è≥–û–∂–∏–¥–∞–µ—Ç',
                        'delivered': '‚úÖ –î–æ—Å—Ç–∞–≤–ª–µ–Ω',
                        'cancelled': '‚ùå –û—Ç–º–µ–Ω–µ–Ω',
                        'refunded': 'üîÑ –í–æ–∑–≤—Ä–∞—â–µ–Ω'
                    }.get(status, '‚è≥ –û–∂–∏–¥–∞–µ—Ç')
                    product_line += f" {status_emoji}"

                order_parts.append(product_line)
            order_parts.append("")  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –º–µ–∂–¥—É —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä–∞–º–∏

        order_parts.append(f"\n")
        if total_price is not None:
            order_parts.append(f"üí∞ –û–±—â–∞—è —Å—É–º–º–∞: {total_price} —Ä—É–±.\n")
        order_parts.append(f"üõçÔ∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—à–∫–æ–≤: {avito_boxes}")

    else:
        # –î–ª—è –ø—Ä—è–º—ã—Ö –ø—Ä–æ–¥–∞–∂ –∏ –¥–æ—Å—Ç–∞–≤–∫–∏
        for product in product_list:
            emoji = "üì¶" if product['is_main_product'] else "‚ûï"
            # product_line = f"{emoji} {product['product_name']} {product['param_title']}"
            product_line = f"{emoji} {product.get('product_name',product.get('name'))} {product.get('param_title',product.get('param'))}"

            if show_item_status:
                status = product.get('status', 'pending')
                status_emoji = {
                    'pending': '‚è≥–û–∂–∏–¥–∞–µ—Ç',
                    'delivered': '‚úÖ –î–æ—Å—Ç–∞–≤–ª–µ–Ω',
                    'cancelled': '‚ùå –û—Ç–º–µ–Ω–µ–Ω',
                    'refunded': 'üîÑ –í–æ–∑–≤—Ä–∞—â–µ–Ω'
                }.get(status, '‚è≥ –û–∂–∏–¥–∞–µ—Ç')
                product_line += f" {status_emoji}"

            order_parts.append(product_line)
        order_parts.append(f"\n")
        if total_price:
            order_parts.append(f"üí∞ –°—É–º–º–∞: {total_price} —Ä—É–±.\n")

    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–∞—Ä–æ–∫, –µ—Å–ª–∏ –µ—Å—Ç—å
    if gift:
        order_parts.append(f"üéÅ –ü–æ–¥–∞—Ä–æ–∫: {gift}")

    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å—Ç–∞–≤–∫–µ


    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–º–µ—Ç–∫—É, –µ—Å–ª–∏ –µ—Å—Ç—å
    if note:
        order_parts.append(f"üìù –ó–∞–º–µ—Ç–∫–∞: {note}\n")

    if sale_type == SaleType.DELIVERY.value:
        delivery_parts = [
            f"üìÖ –î–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏: {delivery_date}\n",
            f"‚è∞ –í—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏: {delivery_time}\n",
            f"üìç –ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: {delivery_address}\n",
            f"üó∫Ô∏è –ó–æ–Ω–∞ –¥–æ—Å—Ç–∞–≤–∫–∏: {zone_name}\n",
            f"üë§ –ü–æ–ª—É—á–∞—Ç–µ–ª—å: {contact_name}\n",
            f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {contact_phone}\n"
        ]
        order_parts.extend(delivery_parts)

    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ–Ω–µ–¥–∂–µ—Ä–µ
    order_parts.append(f"üßë‚Äçüíª –ú–µ–Ω–µ–¥–∂–µ—Ä: {manager_name} ({manager_username})\n")
    order_parts.append(f"üßë‚Äçüíª –£–ø–∞–∫–æ–≤—â–∏–∫: {manager_name} ({manager_username})\n") if packer_name and packer_username else ''

    # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —á–∞—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏—è, —Ñ–∏–ª—å—Ç—Ä—É—è –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
    return '\n'.join(filter(None, order_parts))


def save_photo_and_resize(photo, order_id):
    directory = "avito_photos/"
    if not os.path.exists(directory):
        os.makedirs(directory)

    photo_path = f"{directory}{order_id}_avito.png"

    image = Image.open(io.BytesIO(photo))
    image.save(photo_path, optimize=True, quality=85)  # –°–∂–∏–º–∞–µ–º —Ñ–æ—Ç–æ

    return photo_path


def utf16_offset_length(text, substring):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç offset –∏ length –¥–ª—è –ø–æ–¥—Å—Ç—Ä–æ–∫–∏ –≤ —Å—Ç—Ä–æ–∫–µ text, –∏—Å–ø–æ–ª—å–∑—É—è UTF-16 –∫–æ–¥–æ–≤—ã–µ –µ–¥–∏–Ω–∏—Ü—ã.
    """
    utf16_text = text.encode('utf-16-le')  # –ö–æ–¥–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –≤ UTF-16 (LE)
    utf16_substring = substring.encode('utf-16-le')  # –ö–æ–¥–∏—Ä—É–µ–º –ø–æ–¥—Å—Ç—Ä–æ–∫—É –≤ UTF-16 (LE)

    # –ù–∞—Ö–æ–¥–∏–º –±–∞–π—Ç–æ–≤—ã–π offset –ø–æ–¥—Å—Ç—Ä–æ–∫–∏
    byte_offset = utf16_text.find(utf16_substring)

    if byte_offset == -1:
        raise ValueError(f"–ü–æ–¥—Å—Ç—Ä–æ–∫–∞ '{substring}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å—Ç—Ä–æ–∫–µ '{text}'")

    # UTF-16 –∫–æ–¥–æ–≤—ã–µ –µ–¥–∏–Ω–∏—Ü—ã –¥–µ–ª—è—Ç—Å—è –Ω–∞ 2 –±–∞–π—Ç–∞, –ø–æ—ç—Ç–æ–º—É –¥–µ–ª–∏–º –Ω–∞ 2 –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è offset –≤ –∫–æ–¥–æ–≤—ã—Ö –µ–¥–∏–Ω–∏—Ü–∞—Ö
    utf16_offset = byte_offset // 2
    utf16_length = len(utf16_substring) // 2

    return utf16_offset, utf16_length


def format_order_message_for_courier(order):
    order_id = order.get('id')
    product_id = order.get('product_id')
    product_param_id = order.get('product_param_id')
    gift = order.get('gift', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
    note = order.get('note', '–ù–µ—Ç –ø—Ä–∏–º–µ—á–∞–Ω–∏–π')
    order_type = order.get('order_type')
    status = order.get('status')
    delivery_date = order.get('delivery_date')
    delivery_time = order.get('delivery_time')
    delivery_address = order.get('delivery_address')
    delivery_note = order.get('delivery_note')
    contact_phone = order.get('contact_phone')
    contact_name = order.get('contact_name')
    total_price = order.get('total_price')

    product_name, product_param = get_product_info(product_id, product_param_id)
    formatted_order_id = str(order_id).zfill(4)

    message = (
        f"üÜî –ó–∞–∫–∞–∑: #{formatted_order_id}„Ö§\n\n"
        f"üì¶ {product_name} {product_param}\n\n"
        f"üéÅ –ü–æ–¥–∞—Ä–æ–∫: {gift}\n"
    )

    if note:
        message += f"üìù –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: {note}\n\n"

    message += (
        f"üîÑ –¢–∏–ø –ø—Ä–æ–¥–∞–∂–∏: {SaleTypeRu[order_type.upper()].value}\n\n"
        f"üìä –°—Ç–∞—Ç—É—Å: {OrderTypeRu[status.upper()].value}\n"
    )

    if order_type == 'delivery':
        message += (
            f"üöö –î–æ—Å—Ç–∞–≤–∫–∞: {delivery_date or '–ù–µ —É–∫–∞–∑–∞–Ω–∞'} {delivery_time or ''}\n"
            f"üìç –ê–¥—Ä–µ—Å: {delivery_address or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
            f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {contact_phone or '–ù–µ —É–∫–∞–∑–∞–Ω'} ({contact_name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'})\n"
            f"üí∞ –°—É–º–º–∞: {total_price or '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}\n"
        )
        if delivery_note:
            message += f"üìù –ó–∞–º–µ—Ç–∫–∞ –∫ –¥–æ—Å—Ç–∞–≤–∫–µ: {delivery_note}\n"

    elif 'avito_photo' in order and order['avito_photo']:
        message += "üì∑ –§–æ—Ç–æ: –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ\n"

    return message


def extract_order_number(caption):
    # –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Å–∏–º–≤–æ–ª—É '#' –∏ —Ü–∏—Ñ—Ä–∞–º —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –Ω–µ–≥–æ
    match = re.search(r"#(\d+)", caption)
    if match:
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –≤ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ
        return int(match.group(1))
    return None

# –í–∞–ª–∏–¥–∞—Ü–∏—è –≤–≤–æ–¥–∞ –¥–∞—Ç—ã
def validate_date_range(date_range):
    pattern = r'^\d{2}.\d{2}.\d{4}\-\d{2}.\d{2}.\d{4}$'
    if re.match(pattern, date_range):
        try:
            start_date, end_date = date_range.split('-')

            start_date = datetime.strptime(start_date, "%d.%m.%Y")
            end_date = datetime.strptime(end_date, "%d.%m.%Y")
            return start_date, end_date
        except ValueError:
            return None
    return None

def set_admin_commands(bot,message):
    admin_commands = [
        types.BotCommand("/type_product", "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–∏–ø–∞–º–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤"),
        types.BotCommand("/product", "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏"),
        types.BotCommand("/product_param", "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤"),
        types.BotCommand("/manage_stock", "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–æ–∫–æ–º –∏ —Ü–µ–Ω–∞–º–∏"),
        types.BotCommand("/reports", "–û—Ç—á–µ—Ç—ã"),
        types.BotCommand("/settings", "–ù–∞—Å—Ç—Ä–æ–π–∫–∏"),
        types.BotCommand("/restart", "–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞")
    ]
    bot.set_my_commands(admin_commands,scope=types.BotCommandScopeChat(message.chat.id))

def is_valid_command(message_text,state):
    if message_text.startswith('#') or message_text.startswith('/restart'):
        state.delete()
        return False
    return True

def create_media_group(avito_photos, order_message):
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—É –∏–∑ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç caption —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞.

    :param avito_photos: –º–∞—Å—Å–∏–≤ —Ñ–æ—Ç–æ.
    :param order_message: –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ —Ñ–æ—Ç–æ.
    :return: –°–ø–∏—Å–æ–∫ InputMediaPhoto –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ—Ä–µ–∑ send_media_group.
    """
    media_group = []
    for idx, photo_path in enumerate(avito_photos):
        with open(photo_path, 'rb') as photo_file:
            # –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ –≤ –ø–∞–º—è—Ç—å
            file_data = BytesIO(photo_file.read())

            if idx == 0:
                # –î–æ–±–∞–≤–ª—è–µ–º caption —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
                media_group.append(InputMediaPhoto(file_data, caption=order_message))
            else:
                # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ caption –Ω–µ —É–∫–∞–∑—ã–≤–∞–µ–º
                media_group.append(InputMediaPhoto(file_data))

    return media_group


def normalize_time_input(time_input: str) -> str:
    """
    –ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –≤–≤–æ–¥ –≤—Ä–µ–º–µ–Ω–∏, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—è —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã.
    –ü—Ä–∏–º–µ—Ä—ã:
    - 14:30
    - —Å 14:30
    - –¥–æ 19:00
    - —Å 14:30 –¥–æ 19:00
    - 14:30 - 19:00
    """
    # –û—á–∏—â–∞–µ–º —Å—Ç—Ä–æ–∫—É –æ—Ç –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤
    time_input = time_input.strip().lower()

    # –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú
    time_pattern = r'\d{1,2}:\d{2}'

    # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ —Å—Ç—Ä–æ–∫–µ
    times = re.findall(time_pattern, time_input)

    if len(times) == 1:
        # –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–æ –æ–¥–Ω–æ –≤—Ä–µ–º—è
        if '–¥–æ' in time_input:
            return f"–¥–æ {times[0]}"
        elif '—Å' in time_input:
            return f"—Å {times[0]}"
        else:
            return times[0]
    elif len(times) == 2:
        # –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–æ –¥–≤–∞ –≤—Ä–µ–º–µ–Ω–∏
        if '—Å' in time_input and '–¥–æ' in time_input:
            return f"—Å {times[0]} –¥–æ {times[1]}"
        else:
            return f"{times[0]} - {times[1]}"

    return time_input


def generate_map_link(trip_items: List[Dict], warehouse_location: Dict) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ –º–∞—Ä—à—Ä—É—Ç"""
    # –ù–∞—á–∏–Ω–∞–µ–º —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç —Å–∫–ª–∞–¥–∞
    points = [f"{warehouse_location['longitude']},{warehouse_location['latitude']}"]

    # –î–æ–±–∞–≤–ª—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ç–æ—á–∫–∏ –¥–æ—Å—Ç–∞–≤–∫–∏
    seen_addresses = set()
    for item in trip_items:
        if item['coordinates'] and item['delivery_address'] not in seen_addresses:
            points.append(f"{item['coordinates'][1]},{item['coordinates'][0]}")
            seen_addresses.add(item['delivery_address'])

    # –§–æ—Ä–º–∏—Ä—É–µ–º –º–∞—Ä—à—Ä—É—Ç
    route_points = "~".join(points)

    return (
        "https://yandex.ru/maps/?"
        f"rtext={route_points}"
        "&rtt=auto"
        "&z=11"
        "&l=map"
    )