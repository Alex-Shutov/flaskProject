from telebot import types
from enum import Enum
from PIL import Image
import os
import io
import re

class UserRole(Enum):
    MANAGER = 'Manager'
    COURIER = 'Courier'
    ADMIN = 'Admin'
    OWNER = 'Owner'

class SaleType(Enum):
    DIRECT='direct'
    DELIVERY='delivery'
    AVITO='avito'

class SaleTypeRu(Enum):
    direct='–ü—Ä—è–º–∞—è'
    delivery='–î–æ—Å—Ç–∞–≤–∫–∞'
    avito='–ê–≤–∏—Ç–æ'

def get_available_buttons(roles):
    buttons = []
    if UserRole.MANAGER.value in roles or UserRole.ADMIN.value in roles or UserRole.OWNER.value in roles:
        buttons.append(types.KeyboardButton("#–ü—Ä–æ–¥–∞–∂–∞"))
    if UserRole.COURIER.value in roles or UserRole.ADMIN.value in roles or UserRole.OWNER.value in roles:
        buttons.append(types.KeyboardButton("#–î–æ—Å—Ç–∞–≤–∫–∞"))
    return buttons

def escape_markdown_v2(text):
    """–≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è MarkdownV2."""
    return re.sub(r'([_*[\]()~`>#+\-=|{}.!])', r'\\\1', text)

def format_order_message(order_id, product_name, product_param, gift, note, sale_type, manager_name, manager_username):
    formatted_order_id = str(order_id).zfill(4)  # –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è MarkdownV2
    order_message = f"–ó–∞–∫–∞–∑ #{formatted_order_id}„Ö§\n\n"
    order_message += f"–¢–∏–ø –ø—Ä–æ–¥–∞–∂–∏: {SaleTypeRu[sale_type.lower()].value}\n\n"
    order_message += f"{product_name} {product_param}\n\n"
    if gift:
        order_message += f"üéÅ –ü–æ–¥–∞—Ä–æ–∫: {gift}\n\n"
    if note:
        order_message += f"üìù –ó–∞–º–µ—Ç–∫–∞: {note}\n\n"
    order_message += f"–ú–µ–Ω–µ–¥–∂–µ—Ä: {manager_name} {manager_username}"
    return order_message


def save_photo_and_resize(photo, order_id):
    directory = "avito_photos/"
    if not os.path.exists(directory):
        os.makedirs(directory)

    photo_path = f"{directory}{order_id}_avito.png"

    image = Image.open(io.BytesIO(photo))
    image.save(photo_path, optimize=True, quality=85)  # –°–∂–∏–º–∞–µ–º —Ñ–æ—Ç–æ

    return photo_path


def utf16_offset_length(text, substring):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç offset –∏ length –¥–ª—è –ø–æ–¥—Å—Ç—Ä–æ–∫–∏ –≤ —Å—Ç—Ä–æ–∫–µ text, –∏—Å–ø–æ–ª—å–∑—É—è UTF-16 –∫–æ–¥–æ–≤—ã–µ –µ–¥–∏–Ω–∏—Ü—ã.
    """
    utf16_text = text.encode('utf-16-le')  # –ö–æ–¥–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –≤ UTF-16 (LE)
    utf16_substring = substring.encode('utf-16-le')  # –ö–æ–¥–∏—Ä—É–µ–º –ø–æ–¥—Å—Ç—Ä–æ–∫—É –≤ UTF-16 (LE)

    # –ù–∞—Ö–æ–¥–∏–º –±–∞–π—Ç–æ–≤—ã–π offset –ø–æ–¥—Å—Ç—Ä–æ–∫–∏
    byte_offset = utf16_text.find(utf16_substring)

    if byte_offset == -1:
        raise ValueError(f"–ü–æ–¥—Å—Ç—Ä–æ–∫–∞ '{substring}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å—Ç—Ä–æ–∫–µ '{text}'")

    # UTF-16 –∫–æ–¥–æ–≤—ã–µ –µ–¥–∏–Ω–∏—Ü—ã –¥–µ–ª—è—Ç—Å—è –Ω–∞ 2 –±–∞–π—Ç–∞, –ø–æ—ç—Ç–æ–º—É –¥–µ–ª–∏–º –Ω–∞ 2 –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è offset –≤ –∫–æ–¥–æ–≤—ã—Ö –µ–¥–∏–Ω–∏—Ü–∞—Ö
    utf16_offset = byte_offset // 2
    utf16_length = len(utf16_substring) // 2

    return utf16_offset, utf16_length