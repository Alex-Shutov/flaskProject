from datetime import datetime

from telebot import types
from PIL import Image

from app_types import OrderType, OrderTypeRu
from database import get_product_info
import os
import io
import re

from app_types import SaleTypeRu,UserRole


def get_available_buttons(roles):
    buttons = []
    if UserRole.MANAGER.value in roles or UserRole.ADMIN.value in roles or UserRole.OWNER.value in roles:
        buttons.append(types.KeyboardButton("#–ü—Ä–æ–¥–∞–∂–∞"))
    if UserRole.COURIER.value in roles or UserRole.ADMIN.value in roles or UserRole.OWNER.value in roles or UserRole.MANAGER.value in roles :
        buttons.append(types.KeyboardButton("#–ó–∞–∫–∞–∑—ã"))
    return buttons

def escape_markdown_v2(text):
    """–≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è MarkdownV2."""
    return re.sub(r'([_*[\]()~`>#+\-=|{}.!])', r'\\\1', text)

def format_order_message(order_id, product_name, product_param, gift, note, sale_type,
                         manager_name, manager_username, delivery_date=None,
                         delivery_time=None, delivery_address=None, delivery_note=None,
                         contact_phone=None, contact_name=None, total_price=None):
    formatted_order_id = str(order_id).zfill(4)  # –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è MarkdownV2
    order_message = f"–ó–∞–∫–∞–∑ #{formatted_order_id}„Ö§\n\n"
    order_message += f"–¢–∏–ø –ø—Ä–æ–¥–∞–∂–∏: {sale_type}\n\n"
    order_message += f"–ü—Ä–æ–¥—É–∫—Ç: üå≤ {product_name} {product_param}\n"
    if gift:
        order_message += f"–ü–æ–¥–∞—Ä–æ–∫: üéÅ {gift}\n\n"
    if sale_type == "–î–æ—Å—Ç–∞–≤–∫–∞":
        order_message += f"–î–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏: üìÖ {delivery_date}\n"
        order_message += f"–í—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏: ‚è∞ {delivery_time}\n\n"
        order_message += f"–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: üìç {delivery_address}\n\n"
        if note:
            order_message += f"–ó–∞–º–µ—Ç–∫–∞: üìù {note}\n\n"
        order_message += f"–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω: üìû {contact_phone} ({contact_name})\n"
        order_message += f"–°—É–º–º–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã: üí∞ {total_price} ‚ÇΩ\n"
    else:
        if note:
            order_message += f"–ó–∞–º–µ—Ç–∫–∞: üìù {note}\n"
    order_message += f"–ú–µ–Ω–µ–¥–∂–µ—Ä: {manager_name} ({manager_username})"
    return order_message


def save_photo_and_resize(photo, order_id):
    directory = "avito_photos/"
    if not os.path.exists(directory):
        os.makedirs(directory)

    photo_path = f"{directory}{order_id}_avito.png"

    image = Image.open(io.BytesIO(photo))
    image.save(photo_path, optimize=True, quality=85)  # –°–∂–∏–º–∞–µ–º —Ñ–æ—Ç–æ

    return photo_path


def utf16_offset_length(text, substring):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç offset –∏ length –¥–ª—è –ø–æ–¥—Å—Ç—Ä–æ–∫–∏ –≤ —Å—Ç—Ä–æ–∫–µ text, –∏—Å–ø–æ–ª—å–∑—É—è UTF-16 –∫–æ–¥–æ–≤—ã–µ –µ–¥–∏–Ω–∏—Ü—ã.
    """
    utf16_text = text.encode('utf-16-le')  # –ö–æ–¥–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –≤ UTF-16 (LE)
    utf16_substring = substring.encode('utf-16-le')  # –ö–æ–¥–∏—Ä—É–µ–º –ø–æ–¥—Å—Ç—Ä–æ–∫—É –≤ UTF-16 (LE)

    # –ù–∞—Ö–æ–¥–∏–º –±–∞–π—Ç–æ–≤—ã–π offset –ø–æ–¥—Å—Ç—Ä–æ–∫–∏
    byte_offset = utf16_text.find(utf16_substring)

    if byte_offset == -1:
        raise ValueError(f"–ü–æ–¥—Å—Ç—Ä–æ–∫–∞ '{substring}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å—Ç—Ä–æ–∫–µ '{text}'")

    # UTF-16 –∫–æ–¥–æ–≤—ã–µ –µ–¥–∏–Ω–∏—Ü—ã –¥–µ–ª—è—Ç—Å—è –Ω–∞ 2 –±–∞–π—Ç–∞, –ø–æ—ç—Ç–æ–º—É –¥–µ–ª–∏–º –Ω–∞ 2 –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è offset –≤ –∫–æ–¥–æ–≤—ã—Ö –µ–¥–∏–Ω–∏—Ü–∞—Ö
    utf16_offset = byte_offset // 2
    utf16_length = len(utf16_substring) // 2

    return utf16_offset, utf16_length


def format_order_message_for_courier(order):
    order_id = order.get('id')
    product_id = order.get('product_id')
    product_param_id = order.get('product_param_id')
    gift = order.get('gift', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
    note = order.get('note', '–ù–µ—Ç –ø—Ä–∏–º–µ—á–∞–Ω–∏–π')
    order_type = order.get('order_type')
    status = order.get('status')
    delivery_date = order.get('delivery_date')
    delivery_time = order.get('delivery_time')
    delivery_address = order.get('delivery_address')
    delivery_note = order.get('delivery_note')
    contact_phone = order.get('contact_phone')
    contact_name = order.get('contact_name')
    total_price = order.get('total_price')

    product_name, product_param = get_product_info(product_id, product_param_id)
    formatted_order_id = str(order_id).zfill(4)

    message = (
        f"üÜî –ó–∞–∫–∞–∑: #{formatted_order_id}„Ö§\n\n"
        f"üì¶ {product_name} {product_param}\n\n"
        f"üéÅ –ü–æ–¥–∞—Ä–æ–∫: {gift}\n"
    )

    if note:
        message += f"üìù –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: {note}\n\n"

    message += (
        f"üîÑ –¢–∏–ø –ø—Ä–æ–¥–∞–∂–∏: {SaleTypeRu[order_type.upper()].value}\n\n"
        f"üìä –°—Ç–∞—Ç—É—Å: {OrderTypeRu[status.upper()].value}\n"
    )

    if order_type == 'delivery':
        message += (
            f"üöö –î–æ—Å—Ç–∞–≤–∫–∞: {delivery_date or '–ù–µ —É–∫–∞–∑–∞–Ω–∞'} {delivery_time or ''}\n"
            f"üìç –ê–¥—Ä–µ—Å: {delivery_address or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
            f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {contact_phone or '–ù–µ —É–∫–∞–∑–∞–Ω'} ({contact_name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'})\n"
            f"üí∞ –°—É–º–º–∞: {total_price or '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}\n"
        )
        if delivery_note:
            message += f"üìù –ó–∞–º–µ—Ç–∫–∞ –∫ –¥–æ—Å—Ç–∞–≤–∫–µ: {delivery_note}\n"

    elif 'avito_photo' in order and order['avito_photo']:
        message += "üì∑ –§–æ—Ç–æ: –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ\n"

    return message


def extract_order_number(caption):
    # –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Å–∏–º–≤–æ–ª—É '#' –∏ —Ü–∏—Ñ—Ä–∞–º —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –Ω–µ–≥–æ
    match = re.search(r"#(\d+)", caption)
    if match:
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –≤ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ
        return int(match.group(1))
    return None

# –í–∞–ª–∏–¥–∞—Ü–∏—è –≤–≤–æ–¥–∞ –¥–∞—Ç—ã
def validate_date_range(date_range):
    pattern = r'^\d{2}.\d{2}.\d{4}\-\d{2}.\d{2}.\d{4}$'
    if re.match(pattern, date_range):
        try:
            start_date, end_date = date_range.split('-')

            start_date = datetime.strptime(start_date, "%d.%m.%Y")
            end_date = datetime.strptime(end_date, "%d.%m.%Y")
            return start_date, end_date
        except ValueError:
            return None
    return None

def set_admin_commands(bot):
    admin_commands = [
        types.BotCommand("/type_product", "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–∏–ø–∞–º–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤"),
        types.BotCommand("/product", "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏"),
        types.BotCommand("/product_param", "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤"),
        types.BotCommand("/reports", "–û—Ç—á–µ—Ç—ã"),
        types.BotCommand("/restart", "–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞")
    ]
    bot.set_my_commands(admin_commands)

def is_valid_command(message_text,state):
    if message_text.startswith('#') or message_text.startswith('/restart'):
        state.delete()
        return False
    return True