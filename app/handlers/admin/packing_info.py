import json
from telebot import types
from bot import bot
from telebot.states.sync.context import StateContext
from database import get_connection
from states import AdminStates


@bot.message_handler(commands=['pack_info'])
def handle_pack_info_command(message: types.Message, state: StateContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /pack_info"""
    # –°–æ–∑–¥–∞–µ–º CRUD –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    markup = types.InlineKeyboardMarkup(row_width=2)
    markup.add(
        types.InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å", callback_data="packing_rule-add"),
        types.InlineKeyboardButton("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å", callback_data="packing_rule-view"),
        types.InlineKeyboardButton("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="packing_rule-edit"),
        types.InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å", callback_data="packing_rule-delete")
    )

    bot.reply_to(message, "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª–∞–º–∏ —É–ø–∞–∫–æ–≤–∫–∏:", reply_markup=markup)
    state.set(AdminStates.manage_packing_rules)


@bot.callback_query_handler(func=lambda call: call.data.endswith('-view') and call.data.startswith('packing_rule'))
def handle_view_packing_rules(call: types.CallbackQuery, state: StateContext):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–∞–≤–∏–ª —É–ø–∞–∫–æ–≤–∫–∏"""
    try:
        with get_connection() as conn:
            with conn.cursor() as cursor:
                # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞ —É–ø–∞–∫–æ–≤–∫–∏
                cursor.execute("""
                    SELECT 
                        name,
                        description,
                        conditions,
                        priority,
                        is_active,
                        created_at
                    FROM packing_rules
                    WHERE is_active = true
                    ORDER BY priority DESC
                """)
                rules = cursor.fetchall()

                if not rules:
                    bot.edit_message_text(
                        "–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–∞–≤–∏–ª —É–ø–∞–∫–æ–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.",
                        call.message.chat.id,
                        call.message.message_id
                    )
                    return

                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø—Ä–∞–≤–∏–ª–∞—Ö
                message_parts = ["üì¶ –ê–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞ —É–ø–∞–∫–æ–≤–∫–∏:\n"]

                for rule in rules:
                    name, description, conditions, priority, is_active, created_at = rule

                    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —É—Å–ª–æ–≤–∏—è –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
                    formatted_conditions = format_packing_conditions(conditions)

                    rule_info = (
                        f"\nüî∑ {name}\n"
                        f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {description}\n"
                        f"‚öôÔ∏è –£—Å–ª–æ–≤–∏—è:\n{formatted_conditions}\n"
                        f"üìä –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {priority}\n"
                        f"üìÖ –°–æ–∑–¥–∞–Ω–æ: {created_at.strftime('%d.%m.%Y %H:%M')}\n"
                        f"{'‚úÖ –ê–∫—Ç–∏–≤–Ω–æ' if is_active else '‚ùå –ù–µ–∞–∫—Ç–∏–≤–Ω–æ'}\n"
                        f"{'‚îÄ' * 30}"
                    )
                    message_parts.append(rule_info)

                # –†–∞–∑–±–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏, –µ—Å–ª–∏ –æ–Ω–æ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
                message_text = '\n'.join(message_parts)
                if len(message_text) > 4096:
                    for i in range(0, len(message_text), 4096):
                        if i == 0:
                            bot.edit_message_text(
                                message_text[i:i + 4096],
                                call.message.chat.id,
                                call.message.message_id
                            )
                        else:
                            bot.send_message(
                                call.message.chat.id,
                                message_text[i:i + 4096]
                            )
                else:
                    bot.edit_message_text(
                        message_text,
                        call.message.chat.id,
                        call.message.message_id
                    )

    except Exception as e:
        bot.answer_callback_query(call.id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–∞–≤–∏–ª: {str(e)}")
        print(f"Error in handle_view_packing_rules: {e}")


def format_packing_conditions(conditions):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —É—Å–ª–æ–≤–∏—è —É–ø–∞–∫–æ–≤–∫–∏ –¥–ª—è —á–∏—Ç–∞–µ–º–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    try:
        if isinstance(conditions, str):
            conditions = json.loads(conditions)

        formatted_parts = []

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–∞–Ω—É –ø—Ä–æ–∏—Å—Ö–æ–∂–¥–µ–Ω–∏—è
        if 'origin' in conditions:
            formatted_parts.append(f"üìç –°—Ç—Ä–∞–Ω–∞: {conditions['origin']}")

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤
        if 'item_count' in conditions:
            if isinstance(conditions['item_count'], dict):
                if 'type' in conditions['item_count']:
                    if conditions['item_count']['type'] == 'even':
                        formatted_parts.append("üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: —á–µ—Ç–Ω–æ–µ")
                if 'min' in conditions['item_count']:
                    formatted_parts.append(f"üì¶ –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {conditions['item_count']['min']}")
            else:
                formatted_parts.append(f"üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {conditions['item_count']}")

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        if 'same_params' in conditions:
            formatted_parts.append(
                "üîÑ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º–∏" if conditions['same_params']
                else "üîÑ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: –º–æ–≥—É—Ç —Ä–∞–∑–ª–∏—á–∞—Ç—å—Å—è"
            )

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ —É–ø–∞–∫–æ–≤–∫–∏
        if 'needs_packing' in conditions:
            formatted_parts.append(
                "üì¶ –¢—Ä–µ–±—É–µ—Ç —É–ø–∞–∫–æ–≤–∫–∏" if conditions['needs_packing']
                else "üì¶ –ù–µ —Ç—Ä–µ–±—É–µ—Ç —É–ø–∞–∫–æ–≤–∫–∏"
            )

        return "\n".join(f"  {part}" for part in formatted_parts)
    except Exception as e:
        print(f"Error formatting conditions: {e}")
        return str(conditions)