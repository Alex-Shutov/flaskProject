from telebot.handler_backends import State, StatesGroup
from telebot import types
from telebot.types import Message, CallbackQuery
from telebot.states.sync.context import StateContext
from datetime import datetime

from middlewares.delivery_zones import CourierTripManager, DeliveryZoneManager, DeliveryCostCalculator
from bot import bot
from config import CHANNEL_CHAT_ID, YANDEX_API_KEY, DATABASE_CONFIG
from database import (
    get_orders,
    get_user_info,
    update_order_status,
    get_avito_photos,
    update_order_message_id,
)
from utils import format_order_message
from app_types import OrderType
import psycopg2

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –ë–î
connection = psycopg2.connect(**DATABASE_CONFIG)
connection.set_session(autocommit=True)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
trip_manager = CourierTripManager(connection)
zone_manager = DeliveryZoneManager(connection, YANDEX_API_KEY)
cost_calculator = DeliveryCostCalculator(connection)


class TripStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–µ–∑–¥–∫–∏"""
    selecting_orders = State()  # –í—ã–±–æ—Ä –∑–∞–∫–∞–∑–æ–≤
    confirm_orders = State()  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤
    trip_in_progress = State()  # –ü–æ–µ–∑–¥–∫–∞ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è
    completing_delivery = State()  # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –¥–æ—Å—Ç–∞–≤–∫–∏
    canceling_items = State()  # –û—Ç–º–µ–Ω–∞ —Ç–æ–≤–∞—Ä–æ–≤


def get_orders_keyboard(orders: list) -> types.InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –∑–∞–∫–∞–∑–æ–≤"""
    markup = types.InlineKeyboardMarkup(row_width=1)
    for order in orders:
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
        button_text = f"–ó–∞–∫–∞–∑ #{order['id']} - {order['delivery_address']}"
        callback_data = f"select_order_{order['id']}"
        markup.add(types.InlineKeyboardButton(button_text, callback_data=callback_data))

    markup.add(types.InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã–±–æ—Ä", callback_data="confirm_orders"))
    return markup


@bot.callback_query_handler(func=lambda call: call.data == 'create_trip')
def start_trip_creation(call: CallbackQuery, state: StateContext):
    """–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–µ–∑–¥–∫–∏"""
    message = call.message
    print(123)
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫—É—Ä—å–µ—Ä–µ
        courier_info = get_user_info(call.message.json['chat']['username'])
        if not courier_info:
            bot.reply_to(message, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫—É—Ä—å–µ—Ä–µ.")
            return

        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã, –≥–æ—Ç–æ–≤—ã–µ –∫ –¥–æ—Å—Ç–∞–≤–∫–µ
        available_orders = get_orders(
            order_type=['avito', 'delivery'],
            status=[OrderType.READY_TO_DELIVERY.value],
            is_courier_null=True
        )

        if not available_orders:
            bot.reply_to(message, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏.")
            return

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –∑–∞–∫–∞–∑–æ–≤
        markup = get_orders_keyboard(available_orders)

        bot.reply_to(
            message,
            "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–∫–∞–∑—ã –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –ø–æ–µ–∑–¥–∫—É:",
            reply_markup=markup
        )

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –∑–∞–∫–∞–∑–æ–≤
        state.set(TripStates.selecting_orders)
        state.add_data(selected_orders=[])

    except Exception as e:
        bot.reply_to(message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–µ–∑–¥–∫–∏.")
        print(f"Error in start_trip_creation: {e}")


def build_menu(buttons, n_cols=1, header_buttons=None, footer_buttons=None):
    """–°—Ç—Ä–æ–∏—Ç –º–µ–Ω—é –∫–Ω–æ–ø–æ–∫ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∫–æ–ª–æ–Ω–æ–∫"""
    menu = [buttons[i:i + n_cols] for i in range(0, len(buttons), n_cols)]
    if header_buttons:
        menu.insert(0, header_buttons)
    if footer_buttons:
        menu.append(footer_buttons)
    return menu


def get_orders_keyboard(orders: list, selected_items: dict = None) -> types.InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –∑–∞–∫–∞–∑–æ–≤

    Args:
        orders: —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤
        selected_items: —Å–ª–æ–≤–∞—Ä—å –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ {order_id: [item_id1, item_id2, ...]}
    """
    button_list = []

    for order in orders:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –≤ —ç—Ç–æ–º –∑–∞–∫–∞–∑–µ
        has_selected_items = (selected_items and
                              order['id'] in selected_items and
                              len(selected_items[order['id']]) > 0)

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
        prefix = "üì¶" if not has_selected_items else "‚úÖ"

        button_text = (
            f"{prefix} –ó–∞–∫–∞–∑ #{order['id']} - "
            f"{order.get('delivery_address', '–ê–¥—Ä–µ—Å –Ω–µ —É–∫–∞–∑–∞–Ω')} "
            f"({len(order['products'].get('general', []))} —Ç–æ–≤–∞—Ä–æ–≤)"
        )

        button_list.append(
            types.InlineKeyboardButton(
                button_text,
                callback_data=f"show_order_items_{order['id']}"
            )
        )

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã
    footer_buttons = None
    if selected_items and any(selected_items.values()):
        footer_buttons = [
            types.InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã–±–æ—Ä", callback_data="confirm_orders")
        ]

    return types.InlineKeyboardMarkup(
        build_menu(button_list, n_cols=1, footer_buttons=footer_buttons)
    )


def get_order_items_keyboard(order_id: int, items: list, selected_items: list = None) -> types.InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –∑–∞–∫–∞–∑–∞

    Args:
        order_id: ID –∑–∞–∫–∞–∑–∞
        items: —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤
        selected_items: —Å–ø–∏—Å–æ–∫ ID –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
    """
    button_list = []
    selected_items = selected_items or []

    for item in items:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –≤—ã–±—Ä–∞–Ω –ª–∏ —Ç–æ–≤–∞—Ä
        is_selected = item['id'] in selected_items
        prefix = "‚òëÔ∏è" if is_selected else "‚¨úÔ∏è"

        button_text = f"{prefix} {item['product_name']} - {item.get('param_title', '')}"
        callback_data = f"toggle_item_{order_id}_{item['id']}"

        button_list.append(
            types.InlineKeyboardButton(
                button_text,
                callback_data=callback_data
            )
        )

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
    footer_buttons = [
        types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –∑–∞–∫–∞–∑–∞–º", callback_data="back_to_orders")
    ]

    return types.InlineKeyboardMarkup(
        build_menu(button_list, n_cols=1, footer_buttons=footer_buttons)
    )


@bot.callback_query_handler(func=lambda call: call.data.startswith('show_order_items_'),
                            state=TripStates.selecting_orders)
def show_order_items(call: CallbackQuery, state: StateContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–æ–≤–∞—Ä—ã –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –∑–∞–∫–∞–∑–µ"""
    try:
        order_id = int(call.data.split('_')[3])

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ
        order = get_orders(order_id=order_id)[0]
        if not order:
            bot.answer_callback_query(call.id, "–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–Ω–µ–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        with state.data() as data:
            selected_items = data.get('selected_items', {})
            current_order_selections = selected_items.get(order_id, [])

        # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∑–∞–∫–∞–∑–µ –∏ —Ç–æ–≤–∞—Ä–∞—Ö
        message_text = (
            f"üì¶ –ó–∞–∫–∞–∑ #{order['id']}\n"
            f"üìç –ê–¥—Ä–µ—Å: {order.get('delivery_address', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
            f"üì± –ö–æ–Ω—Ç–∞–∫—Ç: {order.get('contact_name', '–ù–µ —É–∫–∞–∑–∞–Ω')} "
            f"({order.get('contact_phone', '–ù–µ —É–∫–∞–∑–∞–Ω')})\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä—ã –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –ø–æ–µ–∑–¥–∫—É:"
        )

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ç–æ–≤–∞—Ä–∞–º–∏
        markup = get_order_items_keyboard(
            order_id,
            order['products'].get('general', []),
            current_order_selections
        )

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        bot.edit_message_text(
            message_text,
            call.message.chat.id,
            call.message.message_id,
            reply_markup=markup
        )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π –∑–∞–∫–∞–∑ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        state.add_data(current_order_id=order_id)

    except Exception as e:
        bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤")
        print(f"Error in show_order_items: {e}")


@bot.callback_query_handler(func=lambda call: call.data.startswith('toggle_item_'), state=TripStates.selecting_orders)
def toggle_item_selection(call: CallbackQuery, state: StateContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞/–æ—Ç–º–µ–Ω—ã –≤—ã–±–æ—Ä–∞ —Ç–æ–≤–∞—Ä–∞"""
    try:
        _, order_id, item_id = call.data.split('_')[1:]
        order_id, item_id = int(order_id), int(item_id)

        with state.data() as data:
            selected_items = data.get('selected_items', {})
            if order_id not in selected_items:
                selected_items[order_id] = []

            # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –≤—ã–±–æ—Ä —Ç–æ–≤–∞—Ä–∞
            if item_id in selected_items[order_id]:
                selected_items[order_id].remove(item_id)
                action = "—É–¥–∞–ª–µ–Ω –∏–∑"
            else:
                selected_items[order_id].append(item_id)
                action = "–¥–æ–±–∞–≤–ª–µ–Ω –≤"

            data['selected_items'] = selected_items

        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        order = get_orders(order_id=order_id)[0]
        markup = get_order_items_keyboard(
            order_id,
            order['products'].get('general', []),
            selected_items[order_id]
        )

        bot.edit_message_reply_markup(
            call.message.chat.id,
            call.message.message_id,
            reply_markup=markup
        )

        bot.answer_callback_query(
            call.id,
            f"–¢–æ–≤–∞—Ä {action} –ø–æ–µ–∑–¥–∫—É"
        )

    except Exception as e:
        bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ç–æ–≤–∞—Ä–∞")
        print(f"Error in toggle_item_selection: {e}")


@bot.callback_query_handler(func=lambda call: call.data == 'back_to_orders', state=TripStates.selecting_orders)
def back_to_orders_list(call: CallbackQuery, state: StateContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É –∑–∞–∫–∞–∑–æ–≤"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã
        orders = get_orders(
            order_type=['avito', 'delivery'],
            status=[OrderType.READY_TO_DELIVERY.value],
            is_courier_null=True
        )

        # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        with state.data() as data:
            selected_items = data.get('selected_items', {})

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —É—á–µ—Ç–æ–º –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
        markup = get_orders_keyboard(orders, selected_items)

        bot.edit_message_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–∫–∞–∑—ã –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –≤ –ø–æ–µ–∑–¥–∫—É:",
            call.message.chat.id,
            call.message.message_id,
            reply_markup=markup
        )

    except Exception as e:
        bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ —Å–ø–∏—Å–∫—É –∑–∞–∫–∞–∑–æ–≤")
        print(f"Error in back_to_orders_list: {e}")


@bot.callback_query_handler(func=lambda call: call.data == "confirm_orders", state=TripStates.selecting_orders)
def confirm_orders_selection(call: CallbackQuery, state: StateContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤"""
    try:
        with state.data() as data:
            selected_orders = data.get('selected_orders', [])

        if not selected_orders:
            bot.answer_callback_query(call.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∑–∞–∫–∞–∑")
            return

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫—É—Ä—å–µ—Ä–µ
        courier_info = get_user_info(call.from_user.username)
        if not courier_info:
            bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫—É—Ä—å–µ—Ä–µ")
            return

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–∞–º—É—é –¥–∞–ª—å–Ω—é—é –∑–æ–Ω—É –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤
        orders_info = []
        furthest_zone_id = None
        furthest_zone_price = 0

        for order_id in selected_orders:
            order = get_orders(order_id=order_id)[0]
            orders_info.append(order)

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–æ–Ω—É –¥–æ—Å—Ç–∞–≤–∫–∏
            delivery_address = order['delivery_address']
            coordinates = zone_manager.geocode_address(delivery_address)
            if coordinates:
                zone = zone_manager.get_zone_by_coordinates(*coordinates)
                if zone and zone.base_price > furthest_zone_price:
                    furthest_zone_id = zone.id
                    furthest_zone_price = zone.base_price

        if not furthest_zone_id:
            bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∑–æ–Ω—ã –¥–æ—Å—Ç–∞–≤–∫–∏")
            return

        # –°–æ–∑–¥–∞–µ–º –ø–æ–µ–∑–¥–∫—É
        trip_id = trip_manager.create_trip(courier_info['id'], furthest_zone_id)
        if not trip_id:
            bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–µ–∑–¥–∫–∏")
            return

        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–∫–∞–∑—ã –≤ –ø–æ–µ–∑–¥–∫—É
        success = trip_manager.add_items_to_trip(trip_id, selected_orders)
        if not success:
            bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤ –≤ –ø–æ–µ–∑–¥–∫—É")
            return

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å—ã –∑–∞–∫–∞–∑–æ–≤
        for order_id in selected_orders:
            update_order_status(order_id, OrderType.IN_DELIVERY.value)

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏
        delivery_cost = cost_calculator.calculate_for_trip(orders_info, furthest_zone_id)

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–æ–∑–¥–∞–Ω–Ω–æ–π –ø–æ–µ–∑–¥–∫–µ
        trip_message = (
            f"üöö –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –ø–æ–µ–∑–¥–∫–∞\n\n"
            f"–ö—É—Ä—å–µ—Ä: {courier_info['name']} (@{courier_info['username']})\n"
            f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤: {len(selected_orders)}\n"
            f"–°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏: {delivery_cost.total_price} —Ä—É–±.\n\n"
            f"–ó–∞–∫–∞–∑—ã –≤ –ø–æ–µ–∑–¥–∫–µ:\n"
        )

        for order in orders_info:
            trip_message += f"- –ó–∞–∫–∞–∑ #{order['id']}: {order['delivery_address']}\n"

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–µ–∑–¥–∫–æ–π
        markup = types.InlineKeyboardMarkup(row_width=1)
        markup.add(
            types.InlineKeyboardButton("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –ø–æ–µ–∑–¥–∫—É", callback_data=f"complete_trip_{trip_id}"),
            types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–µ–∑–¥–∫—É", callback_data=f"cancel_trip_{trip_id}")
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–µ–∑–¥–∫–∏
        bot.edit_message_text(
            trip_message,
            call.message.chat.id,
            call.message.message_id,
            reply_markup=markup
        )

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        state.set(TripStates.trip_in_progress)
        state.add_data(
            trip_id=trip_id,
            orders_info=orders_info,
            delivery_cost=delivery_cost.__dict__
        )

    except Exception as e:
        bot.answer_callback_query(call.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–µ–∑–¥–∫–∏")
        print(f"Error in confirm_orders_selection: {e}")


@bot.callback_query_handler(func=lambda call: call.data.startswith('complete_trip_'))
def handle_trip_completion(call: CallbackQuery, state: StateContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ–µ–∑–¥–∫–∏"""
    try:
        trip_id = int(call.data.split('_')[2])

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–∞—Ö –≤ –ø–æ–µ–∑–¥–∫–µ
        trip_items = trip_manager.get_trip_items(trip_id)

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
        markup = types.InlineKeyboardMarkup(row_width=1)
        for item in trip_items:
            if item['trip_item_status'] == 'pending':
                btn_text = f"‚úÖ {item['product_name']} - {item['city']}, {item['street']}"
                callback_data = f"deliver_item_{trip_id}_{item['trip_item_id']}"
                markup.add(types.InlineKeyboardButton(btn_text, callback_data=callback_data))

        markup.add(types.InlineKeyboardButton("üèÅ –ó–∞–≤–µ—Ä—à–∏—Ç—å –ø–æ–µ–∑–¥–∫—É", callback_data=f"finalize_trip_{trip_id}"))

        bot.edit_message_text(
            "–û—Ç–º–µ—Ç—å—Ç–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã:",
            call.message.chat.id,
            call.message.message_id,
            reply_markup=markup
        )

        state.set(TripStates.completing_delivery)

    except Exception as e:
        bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø–æ–µ–∑–¥–∫–∏")
        print(f"Error in handle_trip_completion: {e}")


@bot.callback_query_handler(func=lambda call: call.data.startswith('cancel_trip_'))
def handle_trip_cancellation(call: CallbackQuery, state: StateContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã –ø–æ–µ–∑–¥–∫–∏"""
    trip_id = int(call.data.split('_')[2])

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–∞—Ö –≤ –ø–æ–µ–∑–¥–∫–µ
    trip_items = trip_manager.get_trip_items(trip_id)

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –æ—Ç–º–µ–Ω—ã
    markup = types.InlineKeyboardMarkup(row_width=1)
    for item in trip_items:
        if item['trip_item_status'] == 'pending':
            btn_text = f"‚ùå {item['product_name']} - {item['city']}, {item['street']}"
            callback_data = f"cancel_item_{trip_id}_{item['trip_item_id']}"
            markup.add(types.InlineKeyboardButton(btn_text, callback_data=callback_data))

    markup.add(types.InlineKeyboardButton("üîÑ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ—Ç–º–µ–Ω—É", callback_data=f"confirm_cancellation_{trip_id}"))

    bot.edit_message_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä—ã –¥–ª—è –æ—Ç–º–µ–Ω—ã:",
        call.message.chat.id,
        call.message.message_id,
        reply_markup=markup
    )

    state.set(TripStates.canceling_items)
    state.add_data(cancelled_items=[])


@bot.callback_query_handler(func=lambda call: call.data.startswith('deliver_item_'))
def handle_item_delivery(call: CallbackQuery, state: StateContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞"""
    try:
        _, trip_id, item_id = call.data.split('_')
        trip_id, item_id = int(trip_id), int(item_id)

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç–æ–≤–∞—Ä–∞
        success = trip_manager.update_trip_item_status(item_id, 'delivered')
        if not success:
            bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ —Ç–æ–≤–∞—Ä–∞")
            return

        bot.answer_callback_query(call.id, "–¢–æ–≤–∞—Ä –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π")

        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        trip_items = trip_manager.get_trip_items(trip_id)
        markup = types.InlineKeyboardMarkup(row_width=1)

        has_pending_items = False
        for item in trip_items:
            if item['trip_item_status'] == 'pending':
                has_pending_items = True
                btn_text = f"‚úÖ {item['product_name']} - {item['city']}, {item['street']}"
                callback_data = f"deliver_item_{trip_id}_{item['trip_item_id']}"
                markup.add(types.InlineKeyboardButton(btn_text, callback_data=callback_data))

        if has_pending_items:
            markup.add(types.InlineKeyboardButton("üèÅ –ó–∞–≤–µ—Ä—à–∏—Ç—å –ø–æ–µ–∑–¥–∫—É", callback_data=f"finalize_trip_{trip_id}"))
        else:
            # –ï—Å–ª–∏ –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≤–µ—Ä—à–∞–µ–º –ø–æ–µ–∑–¥–∫—É
            finalize_trip(call, trip_id, state)
            return

        bot.edit_message_reply_markup(
            call.message.chat.id,
            call.message.message_id,
            reply_markup=markup
        )

    except Exception as e:
        bot.answer_callback_query(call.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–æ—Å—Ç–∞–≤–∫–∏")
        print(f"Error in handle_item_delivery: {e}")


def finalize_trip(call: CallbackQuery, trip_id: int, state: StateContext):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø–æ–µ–∑–¥–∫–∏"""
    try:
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–µ–∑–¥–∫–∏
        success = trip_manager.update_trip_status(trip_id, 'completed')
        if not success:
            raise Exception("Failed to update trip status")

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–µ–∑–¥–∫–µ
        trip_items = trip_manager.get_trip_items(trip_id)

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        summary_message = "üèÅ –ü–æ–µ–∑–¥–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n\n"

        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ç–æ–≤–∞—Ä—ã –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
        delivered_items = []
        cancelled_items = []

        for item in trip_items:
            item_info = f"‚Ä¢ {item['product_name']} - {item['city']}, {item['street']}"
            if item['trip_item_status'] == 'delivered':
                delivered_items.append(item_info)
            elif item['trip_item_status'] in ['declined', 'refunded']:
                cancelled_items.append(item_info)

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–∞—Ö
        if delivered_items:
            summary_message += "‚úÖ –î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ:\n" + "\n".join(delivered_items) + "\n\n"

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–∞—Ö
        if cancelled_items:
            summary_message += "‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ:\n" + "\n".join(cancelled_items) + "\n"

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        bot.edit_message_text(
            summary_message,
            call.message.chat.id,
            call.message.message_id
        )

        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        state.delete()

    except Exception as e:
        bot.answer_callback_query(call.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø–æ–µ–∑–¥–∫–∏")
        print(f"Error in finalize_trip: {e}")


@bot.callback_query_handler(func=lambda call: call.data.startswith('finalize_trip_'))
def handle_trip_finalization(call: CallbackQuery, state: StateContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ–µ–∑–¥–∫–∏"""
    try:
        trip_id = int(call.data.split('_')[2])
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—Å–µ –ª–∏ —Ç–æ–≤–∞—Ä—ã –∏–º–µ—é—Ç —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å
        trip_items = trip_manager.get_trip_items(trip_id)
        pending_items = [item for item in trip_items if item['trip_item_status'] == 'pending']

        if pending_items:
            markup = types.InlineKeyboardMarkup(row_width=1)
            markup.add(
                types.InlineKeyboardButton(
                    "‚úÖ –î–∞, –∑–∞–≤–µ—Ä—à–∏—Ç—å",
                    callback_data=f"force_finalize_{trip_id}"
                ),
                types.InlineKeyboardButton(
                    "üîÑ –ù–µ—Ç, –≤–µ—Ä–Ω—É—Ç—å—Å—è",
                    callback_data=f"return_to_trip_{trip_id}"
                )
            )

            bot.answer_callback_query(call.id)
            bot.edit_message_text(
                "‚ö†Ô∏è –ï—Å—Ç—å —Ç–æ–≤–∞—Ä—ã –±–µ–∑ —Å—Ç–∞—Ç—É—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏. –£–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å –ø–æ–µ–∑–¥–∫—É?",
                call.message.chat.id,
                call.message.message_id,
                reply_markup=markup
            )
        else:
            finalize_trip(call, trip_id, state)

    except Exception as e:
        bot.answer_callback_query(call.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø–æ–µ–∑–¥–∫–∏")
        print(f"Error in handle_trip_finalization: {e}")


@bot.callback_query_handler(func=lambda call: call.data.startswith('force_finalize_'))
def handle_force_finalization(call: CallbackQuery, state: StateContext):
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø–æ–µ–∑–¥–∫–∏"""
    trip_id = int(call.data.split('_')[2])
    # –ü–æ–º–µ—á–∞–µ–º –≤—Å–µ pending —Ç–æ–≤–∞—Ä—ã –∫–∞–∫ –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ
    trip_items = trip_manager.get_trip_items(trip_id)
    pending_items = [item['trip_item_id'] for item in trip_items if item['trip_item_status'] == 'pending']

    if pending_items:
        trip_manager.cancel_trip_items(trip_id, pending_items)

    finalize_trip(call, trip_id, state)


@bot.callback_query_handler(func=lambda call: call.data.startswith('return_to_trip_'))
def handle_return_to_trip(call: CallbackQuery, state: StateContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –ø–æ–µ–∑–¥–∫–æ–π"""
    trip_id = int(call.data.split('_')[2])
    trip_items = trip_manager.get_trip_items(trip_id)

    markup = types.InlineKeyboardMarkup(row_width=1)
    for item in trip_items:
        if item['trip_item_status'] == 'pending':
            btn_text = f"‚úÖ {item['product_name']} - {item['city']}, {item['street']}"
            callback_data = f"deliver_item_{trip_id}_{item['trip_item_id']}"
            markup.add(types.InlineKeyboardButton(btn_text, callback_data=callback_data))

    markup.add(types.InlineKeyboardButton("üèÅ –ó–∞–≤–µ—Ä—à–∏—Ç—å –ø–æ–µ–∑–¥–∫—É", callback_data=f"finalize_trip_{trip_id}"))

    bot.edit_message_text(
        "–û—Ç–º–µ—Ç—å—Ç–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã:",
        call.message.chat.id,
        call.message.message_id,
        reply_markup=markup
    )


@bot.callback_query_handler(func=lambda call: call.data.startswith('cancel_item_'))
def handle_item_cancellation(call: CallbackQuery, state: StateContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞"""
    try:
        _, trip_id, item_id = call.data.split('_')
        trip_id, item_id = int(trip_id), int(item_id)

        with state.data() as data:
            cancelled_items = data.get('cancelled_items', [])
            if item_id not in cancelled_items:
                cancelled_items.append(item_id)
            data['cancelled_items'] = cancelled_items

        bot.answer_callback_query(call.id, "–¢–æ–≤–∞—Ä –æ—Ç–º–µ—á–µ–Ω –¥–ª—è –æ—Ç–º–µ–Ω—ã")

        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        trip_items = trip_manager.get_trip_items(trip_id)
        markup = types.InlineKeyboardMarkup(row_width=1)

        for item in trip_items:
            if item['trip_item_status'] == 'pending':
                is_cancelled = item['trip_item_id'] in cancelled_items
                btn_text = f"{'‚ùå' if is_cancelled else 'üîÑ'} {item['product_name']} - {item['city']}, {item['street']}"
                callback_data = f"cancel_item_{trip_id}_{item['trip_item_id']}"
                markup.add(types.InlineKeyboardButton(btn_text, callback_data=callback_data))

        markup.add(types.InlineKeyboardButton(
            "üîÑ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ—Ç–º–µ–Ω—É",
            callback_data=f"confirm_cancellation_{trip_id}"
        ))

        bot.edit_message_reply_markup(
            call.message.chat.id,
            call.message.message_id,
            reply_markup=markup
        )

    except Exception as e:
        bot.answer_callback_query(call.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ —Ç–æ–≤–∞—Ä–∞")
        print(f"Error in handle_item_cancellation: {e}")


@bot.callback_query_handler(func=lambda call: call.data.startswith('confirm_cancellation_'))
def handle_cancellation_confirmation(call: CallbackQuery, state: StateContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–º–µ–Ω—ã —Ç–æ–≤–∞—Ä–æ–≤"""
    try:
        trip_id = int(call.data.split('_')[2])

        with state.data() as data:
            cancelled_items = data.get('cancelled_items', [])

        if not cancelled_items:
            bot.answer_callback_query(call.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä—ã –¥–ª—è –æ—Ç–º–µ–Ω—ã")
            return

        # –û—Ç–º–µ–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã
        success = trip_manager.cancel_trip_items(trip_id, cancelled_items)
        if not success:
            raise Exception("Failed to cancel items")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Å—Ç–∞–ª–∏—Å—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã
        trip_items = trip_manager.get_trip_items(trip_id)
        pending_items = [item for item in trip_items if item['trip_item_status'] == 'pending']

        if pending_items:
            # –ï—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –ø–æ–µ–∑–¥–∫–æ–π
            markup = types.InlineKeyboardMarkup(row_width=1)
            for item in pending_items:
                btn_text = f"‚úÖ {item['product_name']} - {item['city']}, {item['street']}"
                callback_data = f"deliver_item_{trip_id}_{item['trip_item_id']}"
                markup.add(types.InlineKeyboardButton(btn_text, callback_data=callback_data))

            markup.add(types.InlineKeyboardButton("üèÅ –ó–∞–≤–µ—Ä—à–∏—Ç—å –ø–æ–µ–∑–¥–∫—É", callback_data=f"finalize_trip_{trip_id}"))

            bot.edit_message_text(
                "–¢–æ–≤–∞—Ä—ã –æ—Ç–º–µ–Ω–µ–Ω—ã. –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ –¥–æ—Å—Ç–∞–≤–∫—É –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è —Ç–æ–≤–∞—Ä–æ–≤:",
                call.message.chat.id,
                call.message.message_id,
                reply_markup=markup
            )
        else:
            # –ï—Å–ª–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å, –∑–∞–≤–µ—Ä—à–∞–µ–º –ø–æ–µ–∑–¥–∫—É
            finalize_trip(call, trip_id, state)

    except Exception as e:
        bot.answer_callback_query(call.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –æ—Ç–º–µ–Ω—ã")
        print(f"Error in handle_cancellation_confirmation: {e}")