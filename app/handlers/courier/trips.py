from pprint import pprint

from telebot.handler_backends import State, StatesGroup
from telebot import types
from telebot.types import Message, CallbackQuery
from telebot.states.sync.context import StateContext
from datetime import datetime

from middlewares.delivery_zones import (
    DeliveryZoneManager,
    AddressComponents,
    DeliveryCostCalculator,
CourierTripManager
)
from bot import bot
from config import CHANNEL_CHAT_ID, YANDEX_API_KEY, DATABASE_CONFIG
from database import (
    get_orders,
    get_user_info,
    update_order_status,
    get_avito_photos,
    update_order_message_id,
)
from utils import format_order_message
from app_types import OrderType
import psycopg2

from database import get_order_by_id

from utils import generate_map_link

from database import update_order_item_status, update_order_delivery_note, update_order_delivery_sum
from states import CourierStates

from config import WAREHOUSE_LOCATION

from database import get_delivery_coordinates

from handlers.handlers import delete_multiple_states

from handlers.handlers import get_user_by_username

from database import update_trip_item, increment_stock

from utils import is_valid_command

from database import update_order_invoice_photo
from utils import create_media_group, save_photo_and_resize
import time
from database import get_connection as connection

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
trip_manager = CourierTripManager(connection)
zone_manager = DeliveryZoneManager(connection, YANDEX_API_KEY)
cost_calculator = DeliveryCostCalculator(connection)


class TripStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–µ–∑–¥–∫–∏"""
    selecting_orders = State()  # –í—ã–±–æ—Ä –∑–∞–∫–∞–∑–æ–≤
    confirm_orders = State()  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤
    trip_in_progress = State()  # –ü–æ–µ–∑–¥–∫–∞ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è
    completing_delivery = State()  # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –¥–æ—Å—Ç–∞–≤–∫–∏
    canceling_items = State()  # –û—Ç–º–µ–Ω–∞ —Ç–æ–≤–∞—Ä–æ–≤
    selected_items=State()
    cancelled_items=State()


@bot.callback_query_handler(func=lambda call: call.data == 'create_trip')
def start_trip_creation(call: CallbackQuery, state: StateContext):
    """–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–µ–∑–¥–∫–∏"""
    message = call.message
    delete_multiple_states(state,['selecting_orders','confirm_orders','trip_in_progress','completing_delivery','canceling_items','selected_items'])
    delete_multiple_states(state,['selecting_delivered_items','avito_photos_sent'])
    delete_multiple_states(state, [
        'selecting_delivered_items',
        'avito_photos_sent',
        'avito_order_shown',
        'avito_message_id',
        'current_order_id'
        'avito_photos_messages'
    ])
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫—É—Ä—å–µ—Ä–µ
        courier_info = get_user_info(call.message.json['chat']['username'])
        if not courier_info:
            bot.edit_message_text(
                "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫—É—Ä—å–µ—Ä–µ.",
                call.message.chat.id,
                call.message.message_id
            )
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–µ–∑–¥–æ–∫
        active_trips = trip_manager.get_courier_active_trips(courier_info['id'])
        if active_trips:
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Ç–µ–∫—É—â–µ–π –ø–æ–µ–∑–¥–∫–µ
            markup = types.InlineKeyboardMarkup()
            markup.add(
                types.InlineKeyboardButton(
                    "üöö –¢–µ–∫—É—â–∞—è –ø–æ–µ–∑–¥–∫–∞",
                    callback_data="show_current_trip"
                )
            )

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ç–µ–∫—É—â—É—é –ø–æ–µ–∑–¥–∫—É
            bot.edit_message_text(
                "‚ö†Ô∏è –£ –≤–∞—Å –µ—Å—Ç—å –Ω–µ–∑–∞–∫–æ–Ω—á–µ–Ω–Ω–∞—è –ø–æ–µ–∑–¥–∫–∞\n"
                "–ó–∞–∫–æ–Ω—á–∏—Ç–µ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ –µ–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é",
                call.message.chat.id,
                call.message.message_id,
                reply_markup=markup
            )
            return

        # –ï—Å–ª–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–µ–∑–¥–æ–∫ –Ω–µ—Ç, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π
        available_orders = get_orders(
            item_status=[OrderType.READY_TO_DELIVERY.value],
            order_type=['avito', 'delivery'],
            status=[OrderType.READY_TO_DELIVERY.value, OrderType.PARTLY_DELIVERED.value],
            role='courier',
            username=courier_info['username']
        )

        if not available_orders:
            bot.edit_message_text(
                "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏.",
                call.message.chat.id,
                call.message.message_id,
                reply_markup=types.InlineKeyboardMarkup().add(
                    types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_courier_menu")
                )
            )
            return

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –∑–∞–∫–∞–∑–æ–≤
        markup = get_orders_keyboard(available_orders)

        bot.edit_message_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–∫–∞–∑—ã –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –ø–æ–µ–∑–¥–∫—É. \n–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –æ–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–æ–≤–∞—Ä–æ–≤ (—Ç—Ä–µ–∫–Ω–æ–º–µ—Ä–æ–≤ –¥–ª—è –∞–≤–∏—Ç–æ) –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏, –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∂–µ–ª–∞–µ–º—ã–π —Ç–æ–≤–∞—Ä(—Ç—Ä–µ–∫–Ω–æ–º–µ—Ä) \n\n–ï—Å–ª–∏ –≤ –∑–∞–∫–∞–∑–µ –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –≤—ã–±—Ä–∞–Ω—ã, –Ω–∞ —Ç–æ–≤–∞—Ä–µ –∑–∞–≥–æ—Ä–∏—Ç—Å—è –∑–Ω–∞—á–æ–∫ ‚úÖ\n –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ —Ç–æ–ª—å–∫–æ —á–∞—Å—Ç—å —Ç–æ–≤–∞—Ä–æ–≤ - –∑–Ω–∞—á–æ–∫ ‚ö°Ô∏è\n\n–ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ‚úÖ–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã–±–æ—Ä",
            call.message.chat.id,
            call.message.message_id,
            reply_markup=markup.add(
                    types.InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_courier_menu"))
        )

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –∑–∞–∫–∞–∑–æ–≤
        state.set(TripStates.selecting_orders)
        state.add_data(selected_orders=[])

    except Exception as e:
        bot.edit_message_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–µ–∑–¥–∫–∏.",
            call.message.chat.id,
            call.message.message_id,
            reply_markup=types.InlineKeyboardMarkup().add(
                types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_courier_menu")
            )
        )
        print(f"Error in start_trip_creation: {e}")


def build_menu(buttons, n_cols=1, header_buttons=None, footer_buttons=None):
    """–°—Ç—Ä–æ–∏—Ç –º–µ–Ω—é –∫–Ω–æ–ø–æ–∫ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∫–æ–ª–æ–Ω–æ–∫"""
    menu = [buttons[i:i + n_cols] for i in range(0, len(buttons), n_cols)]
    if header_buttons:
        menu.insert(0, header_buttons)
    if footer_buttons:
        menu.append(footer_buttons)
    return menu


@bot.callback_query_handler(func=lambda call: call.data.startswith('show_avito_order_'))
def show_avito_order(call: CallbackQuery, state: StateContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ –ê–≤–∏—Ç–æ –∏ –µ–≥–æ —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä–∞—Ö"""
    try:
        order_id = int(call.data.split('_')[3])

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ
        order = get_order_by_id(order_id, [OrderType.READY_TO_DELIVERY.value])
        if not order:
            bot.answer_callback_query(call.id, "–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã–π –ª–∏ —ç—Ç–æ –ø–æ–∫–∞–∑ –∑–∞–∫–∞–∑–∞
        with state.data() as data:
            selected_items = data.get('selected_items', {})
            current_order_selections = selected_items.get(str(order_id), [])
            avito_order_shown = data.get('avito_order_shown', False)
            orders_message_id = call.message.message_id

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä–æ–≤
        track_numbers = {}
        for track_number, track_info in order['products'].items():
            if track_number != 'no_track':
                track_numbers[track_number] = track_info['products']

        # –ï—Å–ª–∏ –∑–∞–∫–∞–∑ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –≤–ø–µ—Ä–≤—ã–µ
        if not avito_order_shown:
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –∑–∞–∫–∞–∑–æ–≤
            bot.delete_message(call.message.chat.id, orders_message_id)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
            avito_photos = []
            for track_number in track_numbers.keys():
                photos = get_avito_photos(order_id)
                if photos:
                    avito_photos.extend(photos)

            if avito_photos:
                try:
                    media_group = create_media_group(avito_photos, None)
                    sent_photos = bot.send_media_group(call.message.chat.id, media=media_group)
                    state.add_data(avito_photos_messages=[msg.message_id for msg in sent_photos])
                except Exception as e:
                    print(f"Error sending media group: {e}")

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∑–∞–∫–∞–∑–µ
            message_text = get_avito_order_message(order, track_numbers, current_order_selections)
            markup = get_avito_order_markup(order_id, track_numbers, current_order_selections)

            new_message = bot.send_message(
                call.message.chat.id,
                message_text,
                reply_markup=markup
            )

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–º, —á—Ç–æ –∑–∞–∫–∞–∑ —É–∂–µ –ø–æ–∫–∞–∑–∞–Ω –∏ ID –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            state.add_data(
                avito_order_shown= True,
                current_order_id= order_id,
                avito_message_id= new_message.message_id,
                current_message_to_edit = new_message.message_id,
            )
        else:
            # –ï—Å–ª–∏ –∑–∞–∫–∞–∑ —É–∂–µ –ø–æ–∫–∞–∑—ã–≤–∞–ª—Å—è, –ø—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            with state.data() as data:
                avito_message_id = data.get('avito_message_id')
                previous_message = data.get('previous_message_text', '')

            message_text = get_avito_order_message(order, track_numbers, current_order_selections)
            markup = get_avito_order_markup(order_id, track_numbers, current_order_selections)

            if message_text != previous_message:
                mes = bot.edit_message_text(
                    message_text,
                    call.message.chat.id,
                    avito_message_id,
                    reply_markup=markup
                )
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
                state.add_data(previous_message_text=message_text, current_message_to_edit=mes.id)

    except Exception as e:
        bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞")
        print(f"Error in show_avito_order: {e}")


def get_avito_order_message(order, track_numbers, current_order_selections):
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∑–∞–∫–∞–∑–∞ –ê–≤–∏—Ç–æ"""
    message_text = [
        f"üì¶ –ó–∞–∫–∞–∑ #{str(order['id']).zfill(4)}„Ö§",
        f"–¢–∏–ø –∑–∞–∫–∞–∑–∞ - –ê–≤–∏—Ç–æ",
        f"–ú–µ–Ω–µ–¥–∂–µ—Ä - {order.get('manager_username', '–ù–µ —É–∫–∞–∑–∞–Ω')}",
        f"–ó–∞–º–µ—Ç–∫–∞ - {order.get('note', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}"
        f"\n–°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞:"
    ]

    for track_number, products in track_numbers.items():
        message_text.append(f"\n{track_number}:")
        for product in products:
            message_text.append(f"\t‚Ä¢ {product['name']} - {product.get('param', '')}")

    message_text.append("\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –ø–æ–µ–∑–¥–∫—É:")

    return '\n'.join(message_text)


def get_avito_order_markup(order_id, track_numbers, current_order_selections):
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∑–∞–∫–∞–∑–∞ –ê–≤–∏—Ç–æ"""
    markup = types.InlineKeyboardMarkup(row_width=1)

    for track_number, items in track_numbers.items():
        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ order_item_id –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä–∞
        order_item_ids = [str(item['order_item_id']) for item in items]
        item_key = f"{track_number}|{order_id}|{','.join(order_item_ids)}"
        is_selected = item_key in current_order_selections
        prefix = "‚òëÔ∏è" if is_selected else "‚¨úÔ∏è"

        markup.add(types.InlineKeyboardButton(
            f"{prefix} –¢—Ä–µ–∫-–Ω–æ–º–µ—Ä: {track_number}",
            callback_data=f"toggle_avito_item_{order_id}_{','.join(order_item_ids)}_{track_number}"
        ))

    markup.add(
        # types.InlineKeyboardButton("‚úÖ –í—ã–±—Ä–∞—Ç—å –≤—Å–µ", callback_data=f"select_all_avito_{order_id}"),
        types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –∑–∞–∫–∞–∑–∞–º", callback_data="back_to_orders")
    )

    return markup
def show_avito_trip_order(call: CallbackQuery, state: StateContext, order_id: int):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ –ê–≤–∏—Ç–æ –≤ –ø–æ–µ–∑–¥–∫–µ"""
    try:
        order = get_order_by_id(order_id, item_statuses=[OrderType.IN_DELIVERY.value])
        if not order:
            bot.answer_callback_query(call.id, "–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã –∑–∞–∫–∞–∑–∞ –≤ –ø–æ–µ–∑–¥–∫–µ
        trip_items = trip_manager.get_trip_items_for_order(
            order_id,
            order_item_status=[OrderType.IN_DELIVERY.value],
            trip_status=['pending'],
            courier_trip_status=['created']
        )

        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ç–æ–≤–∞—Ä—ã –ø–æ —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä–∞–º
        tracks_in_trip = {}
        for item in trip_items:
            product_name = item['product_name']
            param_title = item.get('param_title', '')
            track_number = next(
                (track for track, info in order['products'].items()
                 if any(p['name'] == product_name and p.get('param') == param_title
                        for p in info.get('products', []))),
                None
            )
            if track_number:
                if track_number not in tracks_in_trip:
                    tracks_in_trip[track_number] = {
                        'products': [],
                        'trip_items': []
                    }
                tracks_in_trip[track_number]['products'].append(f"{product_name} - {param_title}")
                tracks_in_trip[track_number]['trip_items'].append(item)

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message_text = [
            f"üì¶ –ó–∞–∫–∞–∑ #{str(order['id']).zfill(4)}„Ö§",
            f"–¢–∏–ø –∑–∞–∫–∞–∑–∞ - –ê–≤–∏—Ç–æ",
            f"–ú–µ–Ω–µ–¥–∂–µ—Ä - @{order.get('manager_username', '–ù–µ —É–∫–∞–∑–∞–Ω')}",
            f"–ó–∞–º–µ—Ç–∫–∞ - {order.get('note', '–ù–µ—Ç')}",
            f"\n–°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞ –≤ –ø–æ–µ–∑–¥–∫–µ:"
        ]

        for track_number, track_data in tracks_in_trip.items():
            message_text.append(f"\n{track_number}:")
            for product in track_data['products']:
                message_text.append(f"\t‚Ä¢ {product}")

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä–∞–º–∏
        markup = types.InlineKeyboardMarkup(row_width=1)

        for track_number, track_data in tracks_in_trip.items():
            markup.add(types.InlineKeyboardButton(
                f"üì¶ –¢—Ä–µ–∫-–Ω–æ–º–µ—Ä: {track_number}",
                callback_data=f"process_avito_track_{order_id}_{track_number}"
            ))

        markup.add(types.InlineKeyboardButton(
            "üîô –ù–∞–∑–∞–¥ –∫ –ø–æ–µ–∑–¥–∫–µ",
            callback_data="show_current_trip"
        ))

        # –ü–æ–ª—É—á–∞–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –¥–ª—è —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä–æ–≤ –≤ –ø–æ–µ–∑–¥–∫–µ
        avito_photos = []
        for track_number in tracks_in_trip.keys():
            photos = get_avito_photos(order_id)
            avito_photos.extend([photo for photo in photos if photo])

        if avito_photos:
            media_group = create_media_group(avito_photos, None)
            bot.send_media_group(call.message.chat.id, media=media_group)

        bot.edit_message_text(
            '\n'.join(message_text),
            call.message.chat.id,
            call.message.message_id,
            reply_markup=markup
        )

    except Exception as e:
        print(f"Error in show_avito_trip_order: {e}")
        bot.send_message(call.message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞")


@bot.callback_query_handler(func=lambda call: call.data.startswith('process_avito_track_'))
def process_avito_track(call: CallbackQuery, state: StateContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π —Å —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä–æ–º –≤ –ø–æ–µ–∑–¥–∫–µ"""
    try:
        _, order_id, track_number = call.data.split('_')
        order_id = int(order_id)

        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑ –∏ –µ–≥–æ —Ç–æ–≤–∞—Ä—ã
        order = get_order_by_id(order_id, item_statuses=[OrderType.IN_DELIVERY.value])

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–∞—Ö –≤ —Ç—Ä–µ–∫–µ
        track_products = []
        if order and track_number in order['products']:
            track_products = order['products'][track_number]['products']

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message_text = [
            f"üì¶ –ó–∞–∫–∞–∑ #{str(order_id).zfill(4)}„Ö§",
            f"–¢—Ä–µ–∫-–Ω–æ–º–µ—Ä: {track_number}",
            f"–ú–µ–Ω–µ–¥–∂–µ—Ä: @{order.get('manager_username', '–ù–µ —É–∫–∞–∑–∞–Ω')}",
            f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—à–∫–æ–≤: {order.get('avito_boxes', 0)}",
            "\n–¢–æ–≤–∞—Ä—ã –≤ —Ç—Ä–µ–∫–µ:"
        ]

        for product in track_products:
            message_text.append(f"‚Ä¢ {product['name']} - {product.get('param', '')}")

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        markup = types.InlineKeyboardMarkup(row_width=2)
        markup.add(
            types.InlineKeyboardButton("‚úÖ –î–∞–ª–µ–µ", callback_data=f"complete_avito_track_{order_id}_{track_number}"),
            types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"cancel_avito_track_{order_id}_{track_number}"),

        )

        # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ –¥–ª—è —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä–∞
        photos = get_avito_photos(order_id)
        if photos:
            track_photos = [photo for photo in photos if photo]
            if track_photos:
                media_group = create_media_group(track_photos, None)
                bot.send_media_group(call.message.chat.id, media=media_group)

        bot.edit_message_text(
            '\n'.join(message_text),
            call.message.chat.id,
            call.message.message_id,
            reply_markup=markup
        )

    except Exception as e:
        print(f"Error in process_avito_track: {e}")
        bot.answer_callback_query(call.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä–∞")


@bot.callback_query_handler(func=lambda call: call.data.startswith('complete_avito_track_'))
def handle_complete_avito_track(call: CallbackQuery, state: StateContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–æ—Å—Ç–∞–≤–∫–∏ —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä–∞ –ê–≤–∏—Ç–æ"""
    try:
        _,_,_, order_id, track_number = call.data.split('_')
        order_id = int(order_id)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ state –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
        state.add_data(
            processing_order_id= order_id,
            processing_track_number= track_number
        )

        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ñ–æ—Ç–æ –Ω–∞–∫–ª–∞–¥–Ω–æ–π
        bot.edit_message_text(
            "üì∏ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –Ω–∞–∫–ª–∞–¥–Ω–æ–π",
            call.message.chat.id,
            call.message.message_id
        )

        state.set(CourierStates.waiting_for_invoice)

    except Exception as e:
        print(f"Error in handle_complete_avito_track: {e}")
        bot.answer_callback_query(call.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä–∞")


@bot.message_handler(content_types=['photo'], state=CourierStates.waiting_for_invoice)
def handle_invoice_photo(message: Message, state: StateContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–æ—Ç–æ –Ω–∞–∫–ª–∞–¥–Ω–æ–π"""
    try:
        with state.data() as data:
            order_id = data.get('processing_order_id')
            track_number = data.get('processing_track_number')

        if not order_id or not track_number:
            bot.reply_to(message, "–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ")
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ –Ω–∞–∫–ª–∞–¥–Ω–æ–π
        photo = message.photo[-1]
        file_info = bot.get_file(photo.file_id)
        downloaded_file = bot.download_file(file_info.file_path)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ –∏ –ø–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
        photo_path = save_photo_and_resize(downloaded_file, f"invoice_{order_id}_{track_number}")

        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        if not update_order_invoice_photo(order_id, track_number, photo_path):
            raise Exception("Failed to update invoice photo")

        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—é –¥–æ—Å—Ç–∞–≤–∫–∏
        process_avito_delivery_completion(message.from_user.username, message.chat.id, order_id, track_number,photo_path, state)

    except Exception as e:
        print(f"Error in handle_invoice_photo: {e}")
        bot.reply_to(message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–æ—Ç–æ –Ω–∞–∫–ª–∞–¥–Ω–æ–π")


@bot.callback_query_handler(func=lambda call: call.data.startswith('cancel_avito_track_'))
def handle_cancel_avito_track(call: CallbackQuery, state: StateContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –¥–æ—Å—Ç–∞–≤–∫–∏ —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä–∞ –ê–≤–∏—Ç–æ"""
    try:
        _,_,_, order_id, track_number = call.data.split('_')
        order_id = int(order_id)

        order = get_order_by_id(order_id, [OrderType.IN_DELIVERY.value] )

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã —ç—Ç–æ–≥–æ —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä–∞
        trip_items = trip_manager.get_trip_items_for_order(
            order_id,
            order_item_status=[OrderType.IN_DELIVERY.value],
            trip_status=['pending']
        )

        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–≤–∞—Ä—ã –ø–æ —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä—É
        track_items = []
        for item in trip_items:
            product_name = item['product_name']
            param_title = item.get('param_title', '')
            item_track = next(
                (track for track, info in order['products'].items()
                 if any(p['name'] == product_name and p.get('param') == param_title
                        for p in info.get('products', []))),
                None
            )
            if item_track == track_number:
                track_items.append(item)

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–º–µ–Ω—É
        for item in track_items:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç–æ–≤–∞—Ä–∞ –≤ order_items –Ω–∞ REFUND
            update_order_item_status(item['order_item_id'], OrderType.REFUND.value)
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ trip_items
            update_trip_item('refunded', item['order_item_id'])
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—Ç–æ–∫
            increment_stock(item['product_param_id'])

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä–æ–≤
        remaining_items = trip_manager.get_trip_items_for_order(
            order_id,
            order_item_status=[OrderType.IN_DELIVERY.value],
            trip_status=['pending']
        )

        if not remaining_items:
            # –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤, –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –∑–∞–∫–∞–∑–∞
            all_trip_items = trip_manager.get_trip_items_for_order(order_id)
            all_statuses = [item['status'] for item in all_trip_items]

            if all(status in [OrderType.CLOSED.value, OrderType.REFUND.value] for status in all_statuses):
                # –ï—Å–ª–∏ –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –∏–º–µ—é—Ç —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å, –∑–∞–∫—Ä—ã–≤–∞–µ–º –∑–∞–∫–∞–∑
                update_order_status(order_id, OrderType.CLOSED.value)
            else:
                # –ò–Ω–∞—á–µ —Å—Ç–∞–≤–∏–º —á–∞—Å—Ç–∏—á–Ω—É—é –¥–æ—Å—Ç–∞–≤–∫—É
                update_order_status(order_id, OrderType.PARTLY_DELIVERED.value)
            active_trip = trip_manager.get_courier_active_trips(order['courier_id'])[0]
            trip_manager.update_trip_status(active_trip['id'], 'completed')
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç–º–µ–Ω–µ
        cancel_message = (
            f"‚ùå –¢—Ä–µ–∫-–Ω–æ–º–µ—Ä {track_number} –æ—Ç–º–µ–Ω—ë–Ω\n"
            f"–ó–∞–∫–∞–∑ #{str(order_id).zfill(4)}„Ö§\n"
            "–¢–æ–≤–∞—Ä—ã –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –Ω–∞ —Å–∫–ª–∞–¥"
        )

        bot.edit_message_text(
            cancel_message,
            call.message.chat.id,
            call.message.message_id,
            reply_markup=types.InlineKeyboardMarkup().add(
                types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –ø–æ–µ–∑–¥–∫–µ", callback_data="show_current_trip")
            )
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª
        bot.send_message(
            CHANNEL_CHAT_ID,
            cancel_message,
            reply_to_message_id=order.get('message_id')
        )

    except Exception as e:
        print(f"Error in handle_cancel_avito_track: {e}")
        bot.answer_callback_query(call.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä–∞")


def process_avito_delivery_completion(username: str, chat_id: int, order_id: int, track_number: str,invoice_path,
                                      state: StateContext):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–π –¥–æ—Å—Ç–∞–≤–∫–∏ —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä–∞ –ê–≤–∏—Ç–æ

    Args:
        username: Username –∫—É—Ä—å–µ—Ä–∞
        chat_id: ID —á–∞—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        order_id: ID –∑–∞–∫–∞–∑–∞
        track_number: –ù–æ–º–µ—Ä —Ç—Ä–µ–∫–∞ –ê–≤–∏—Ç–æ
        state: –°–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ
        order = get_order_by_id(order_id)
        if not order:
            raise ValueError(f"Order {order_id} not found")

        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã —ç—Ç–æ–≥–æ —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä–∞ –≤ –ø–æ–µ–∑–¥–∫–µ
        trip_items = trip_manager.get_trip_items_for_order(
            order_id,
            order_item_status=[OrderType.IN_DELIVERY.value],
            trip_status=['pending']
        )

        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–≤–∞—Ä—ã –ø–æ —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä—É
        track_items = []
        delivered_products = []
        for item in trip_items:
            product_name = item['product_name']
            param_title = item.get('param_title', '')
            order_item_id = item.get('order_item_id', '')
            item_track = next(
                (track for track, info in order['products'].items()
                 if any(p['name'] == product_name and p.get('param') == param_title and order_item_id == p.get('order_item_id')
                        for p in info.get('products', []))),
                None
            )
            if item_track == track_number:
                track_items.append(item)
                delivered_products.append(f"‚Ä¢ {product_name} - {param_title}")

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–æ—Å—Ç–∞–≤–∫—É
        for item in track_items:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç–æ–≤–∞—Ä–∞ –≤ order_items –Ω–∞ CLOSED
            update_order_item_status(item['order_item_id'], OrderType.CLOSED.value)
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ trip_items
            update_trip_item('delivered', item['order_item_id'])

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä–æ–≤
        remaining_items = trip_manager.get_trip_items_for_order(
            order_id,
            order_item_status=[OrderType.IN_DELIVERY.value],
            trip_status=['pending']
        )

        if not remaining_items:
            # –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤, –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –∑–∞–∫–∞–∑–∞
            all_trip_items = trip_manager.get_trip_items_for_order(order_id)
            all_statuses = [item['status'] for item in all_trip_items]

            if all(status in [OrderType.CLOSED.value, OrderType.REFUND.value] for status in all_statuses):
                # –ï—Å–ª–∏ –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –∏–º–µ—é—Ç —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å, –∑–∞–∫—Ä—ã–≤–∞–µ–º –∑–∞–∫–∞–∑
                update_order_status(order_id, OrderType.CLOSED.value)
            else:
                # –ò–Ω–∞—á–µ —Å—Ç–∞–≤–∏–º —á–∞—Å—Ç–∏—á–Ω—É—é –¥–æ—Å—Ç–∞–≤–∫—É
                update_order_status(order_id, OrderType.PARTLY_DELIVERED.value, )

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫—É—Ä—å–µ—Ä–µ
        courier_info = get_user_by_username(username, state)

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –¥–æ—Å—Ç–∞–≤–∫–µ
        delivery_message = (
            f"‚úÖ –¢—Ä–µ–∫-–Ω–æ–º–µ—Ä {track_number} –¥–æ—Å—Ç–∞–≤–ª–µ–Ω\n"
            f"üì¶ –ó–∞–∫–∞–∑ #{str(order_id).zfill(4)}„Ö§\n"
            f"üë§ –ú–µ–Ω–µ–¥–∂–µ—Ä: {order.get('manager_username', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n\n"
            "üìã –î–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã:\n"
            f"{chr(10).join(delivered_products)}\n\n"
            f"üöö –ö—É—Ä—å–µ—Ä: {courier_info['name']} ({courier_info['username']})"
        )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å—Ç–∞–ª–∏—Å—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã –≤ –ø–æ–µ–∑–¥–∫–µ
        courier_id = courier_info['id']
        active_trip = trip_manager.get_courier_active_trips(courier_id)[0]
        remaining_trip_items = trip_manager.get_trip_items(active_trip['id'])

        markup = types.InlineKeyboardMarkup()

        if not remaining_trip_items:
            # –ï—Å–ª–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –±–æ–ª—å—à–µ –Ω–µ—Ç, –∑–∞–≤–µ—Ä—à–∞–µ–º –ø–æ–µ–∑–¥–∫—É
            trip_manager.update_trip_status(active_trip['id'], 'completed')
            delivery_message += "\n\n‚úÖ –ü–æ–µ–∑–¥–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
            markup.add(types.InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data='back_to_courier_menu'))
        else:
            markup.add(
                types.InlineKeyboardButton("–¢–µ–∫—É—â–∞—è –ø–æ–µ–∑–¥–∫–∞", callback_data="show_current_trip"),
                types.InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data='back_to_courier_menu')
            )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫—É—Ä—å–µ—Ä—É
        bot.send_message(
            chat_id,
            delivery_message,
            reply_markup=markup
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª
        # bot.send_message(
        #     CHANNEL_CHAT_ID,
        #     delivery_message,
        #     reply_to_message_id=order.get('message_id')
        # )
        media_group = create_media_group([invoice_path], delivery_message)
        bot.send_media_group(CHANNEL_CHAT_ID, media=media_group,reply_to_message_id=order.get('message_id'))

        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è
        delete_multiple_states(state, [
            'processing_order_id',
            'processing_track_number',
            'delivered_items',
            'current_order_id',
            'delivery_sum'
        ])

    except Exception as e:
        print(f"Error in process_avito_delivery_completion: {e}")
        bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–æ—Å—Ç–∞–≤–∫–∏")


@bot.callback_query_handler(func=lambda call: call.data.startswith('toggle_avito_item_'))
def toggle_avito_item_selection(call: CallbackQuery, state: StateContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞/–æ—Ç–º–µ–Ω—ã –≤—ã–±–æ—Ä–∞ —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä–∞"""
    try:
        parts = call.data.split('_')
        order_id = parts[3]
        order_item_ids = parts[4]
        track_number = parts[5]

        item_key = f"{track_number}|{order_id}|{order_item_ids}"

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ
        order = get_order_by_id(int(order_id), [OrderType.READY_TO_DELIVERY.value])
        if not order:
            raise ValueError(f"Order {order_id} not found")

        with state.data() as data:
            selected_items = data.get('selected_items', {})
            if str(order_id) not in selected_items:
                selected_items[str(order_id)] = []

            if item_key in selected_items[str(order_id)]:
                selected_items[str(order_id)].remove(item_key)
                action = "—É–¥–∞–ª–µ–Ω –∏–∑"
            else:
                selected_items[str(order_id)].append(item_key)
                action = "–¥–æ–±–∞–≤–ª–µ–Ω –≤"

            avito_message_id = data.get('avito_message_id')

        state.add_data(selected_items=selected_items)

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä–æ–≤
        track_numbers = {}
        for tn, track_info in order['products'].items():
            if tn != 'no_track':
                track_numbers[tn] = track_info['products']

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞–ø—Ä—è–º—É—é
        message_text = get_avito_order_message(order, track_numbers, selected_items.get(str(order_id), []))
        markup = get_avito_order_markup(order_id, track_numbers, selected_items.get(str(order_id), []))

        mes = bot.edit_message_text(
            message_text,
            call.message.chat.id,
            avito_message_id,
            reply_markup=markup
        )
        state.add_data(current_message_to_edit=mes.message_id)
        bot.answer_callback_query(
            call.id,
            f"–¢—Ä–µ–∫-–Ω–æ–º–µ—Ä {action} –ø–æ–µ–∑–¥–∫—É"
        )

    except Exception as e:
        print(f"Error in toggle_avito_item_selection: {e}")
        bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä–∞")


def get_orders_keyboard(orders: list, selected_items: dict = None) -> types.InlineKeyboardMarkup:
    button_list = []
    for order in orders:
        order_id = str(order['id']).zfill(4)

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ order_item_ids –¥–ª—è –∑–∞–∫–∞–∑–∞
        if order['order_type'] == 'avito':
            # –î–ª—è –ê–≤–∏—Ç–æ —Å—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–µ–∫–Ω–æ–º–µ—Ä–æ–≤
            track_numbers = list(order['products'].keys())
            track_numbers = [tn for tn in track_numbers if tn != 'no_track']
            total_items = len(track_numbers)
            items_text = f"{total_items} —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä–æ–≤"
            default_prefix = "üì¨"  # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Å–º–∞–π–ª–∏–∫ –¥–ª—è –ê–≤–∏—Ç–æ
        else:
            # –î–ª—è –æ–±—ã—á–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ —Å—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤
            order_items = order['products'].get('no_track', {}).get('products', [])
            total_items = len(order_items)
            items_text = f"{total_items} —Ç–æ–≤–∞—Ä–æ–≤"
            default_prefix = "üì¶"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã
        selected_count = 0
        if selected_items and str(order['id']) in selected_items:
            if order['order_type'] == 'avito':
                # –î–ª—è –ê–≤–∏—Ç–æ —Å—á–∏—Ç–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ç—Ä–µ–∫–Ω–æ–º–µ—Ä–∞
                selected_tracks = set(item_key.split('|')[0] for item_key in selected_items[str(order['id'])])
                selected_count = len(selected_tracks)
            else:
                selected_count = len(selected_items[str(order['id'])])

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å
        if selected_count == 0:
            prefix = default_prefix
        elif selected_count == total_items:
            prefix = "‚úÖ"
        else:
            prefix = "‚ö°Ô∏è"

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∞–¥—Ä–µ—Å–Ω—É—é —á–∞—Å—Ç—å
        if order['order_type'] == 'avito':
            address_text = "–ê–≤–∏—Ç–æ"
        else:
            full_address = order.get('delivery_address', '')
            if full_address:
                address_parts = [part.strip() for part in full_address.split(',')]
                if len(address_parts) > 1:
                    address_text = ', '.join(address_parts[1:])
                else:
                    address_text = '–ê–¥—Ä–µ—Å –Ω–µ —É–∫–∞–∑–∞–Ω'
            else:
                address_text = '–ê–¥—Ä–µ—Å –Ω–µ —É–∫–∞–∑–∞–Ω'

        button_text = f"{prefix} –ó–∞–∫–∞–∑ #{order_id}„Ö§- {address_text} ({items_text})"

        callback_data = f"show_avito_order_{order['id']}" if order[
                                                                 'order_type'] == 'avito' else f"show_order_items_{order['id']}"

        button_list.append(
            types.InlineKeyboardButton(
                button_text,
                callback_data=callback_data
            )
        )

    footer_buttons = None
    if selected_items and any(selected_items.values()):
        footer_buttons = [
            types.InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã–±–æ—Ä", callback_data="confirm_orders")
        ]

    return types.InlineKeyboardMarkup(
        build_menu(button_list, n_cols=1, footer_buttons=footer_buttons)
    )


def get_order_items_keyboard(order_id: int, items: list, selected_items: list = None,
                             order_type: str = 'delivery') -> types.InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –∑–∞–∫–∞–∑–∞

    Args:
        order_id: ID –∑–∞–∫–∞–∑–∞
        items: —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤
        selected_items: —Å–ø–∏—Å–æ–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
        order_type: —Ç–∏–ø –∑–∞–∫–∞–∑–∞ ('delivery' –∏–ª–∏ 'avito')
    """
    button_list = []
    selected_items = selected_items or []

    if order_type == 'avito':
        button_list.extend([
            # types.InlineKeyboardButton("‚úÖ –í—ã–±—Ä–∞—Ç—å –≤—Å–µ", callback_data=f"select_all_{order_id}"),
            # types.InlineKeyboardButton("‚ùå –£–±—Ä–∞—Ç—å –≤—Å–µ", callback_data=f"deselect_all_{order_id}"),
            types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –∑–∞–∫–∞–∑–∞–º", callback_data="back_to_orders")
        ])
    else:
        for idx, item in enumerate(items):
            # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è —Ç–æ–≤–∞—Ä–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ order_item_id –∏–ª–∏ –¥—Ä—É–≥–∏—Ö –¥–∞–Ω–Ω—ã—Ö
            item_key = f"{item['order_item_id']}|{item.get('product_id')}|{item.get('param_id')}"

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–±—Ä–∞–Ω –ª–∏ —Ç–æ–≤–∞—Ä
            is_selected = item_key in selected_items

            # –í—ã–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è
            prefix = "‚òëÔ∏è" if is_selected else "‚¨úÔ∏è"

            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ
            product_name = item.get('name', item.get('product_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–æ–≤–∞—Ä'))
            param_title = item.get('param', item.get('param_title', ''))

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
            button_text = f"{prefix} {product_name} - {param_title}"

            # –°–æ–∑–¥–∞–µ–º callback_data
            callback_data = f"toggle_item_{order_id}_{item_key}"

            button_list.append(
                types.InlineKeyboardButton(button_text, callback_data=callback_data)
            )

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤–Ω–∏–∑—É
    footer_buttons = [
        # types.InlineKeyboardButton("‚úÖ –í—ã–±—Ä–∞—Ç—å –≤—Å–µ", callback_data=f"select_all_{order_id}"),
        types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –∑–∞–∫–∞–∑–∞–º", callback_data="back_to_orders")
    ]

    return types.InlineKeyboardMarkup(
        build_menu(button_list, n_cols=1, footer_buttons=footer_buttons if order_type != 'avito' else [])
    )

@bot.callback_query_handler(func=lambda call: call.data.startswith('select_all_'), state=TripStates.selecting_orders)
def select_all_items(call: CallbackQuery, state: StateContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤"""
    try:
        order_id = int(call.data.split('_')[2])

        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑
        order = get_order_by_id(order_id,[OrderType.READY_TO_DELIVERY.value])
        if not order:
            raise ValueError(f"Order {order_id} not found")

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤
        if order['order_type'] == 'delivery':
            no_track_data = order['products'].get('no_track', {})
            items = no_track_data.get('products', []) if isinstance(no_track_data, dict) else []
        else:
            items = []
            for track_info in order['products'].values():
                if isinstance(track_info, dict) and 'products' in track_info:
                    items.extend(track_info['products'])

        # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö item_keys
        all_item_keys = [f"{item.get('order_item_id')}|{item.get('product_id')}|{item.get('param_id')}" for idx, item in enumerate(items)]

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ state
        with state.data() as data:
            selected_items = data.get('selected_items', {})
            selected_items[str(order_id)] = all_item_keys
        # data['selected_items'] = selected_items
        state.add_data(selected_items=selected_items)

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –∑–∞–∫–∞–∑–æ–≤
        orders = get_orders(
            order_type=['avito', 'delivery'],
            status=[OrderType.READY_TO_DELIVERY.value],
            role='courier',
            username=call.message.json['chat']['username'],
            item_status=[OrderType.READY_TO_DELIVERY.value]

        )
        if orders:
            markup = get_orders_keyboard(orders, selected_items)

            bot.edit_message_text(
                "üì¶ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–∫–∞–∑—ã:",
                call.message.chat.id,
                call.message.message_id,
                reply_markup=markup
            )

            bot.answer_callback_query(
                call.id,
                "–í—Å–µ —Ç–æ–≤–∞—Ä—ã –≤—ã–±—Ä–∞–Ω—ã"
            )

    except Exception as e:
        print(f"Error in select_all_items: {e}")
        bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ç–æ–≤–∞—Ä–æ–≤")

@bot.callback_query_handler(func=lambda call: call.data.startswith('show_order_items_'))
def show_order_items(call: CallbackQuery, state: StateContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–æ–≤–∞—Ä—ã –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –∑–∞–∫–∞–∑–µ"""
    try:
        order_id = int(call.data.split('_')[3])

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ
        order = get_order_by_id(order_id,[OrderType.READY_TO_DELIVERY.value])
        if not order:
            bot.answer_callback_query(call.id, "–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–Ω–µ–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        with state.data() as data:
            selected_items = data.get('selected_items', {})
            current_order_selections = selected_items.get(str(order_id), [])
        print(selected_items,'123',current_order_selections)
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∑–∞–∫–∞–∑–∞
        if order['order_type'] == 'delivery':
            no_track_data = order['products'].get('no_track', {})
            items = no_track_data.get('products', []) if isinstance(no_track_data, dict) else []
        else:
            items = []
            for track_info in order['products'].values():
                if isinstance(track_info, dict) and 'products' in track_info:
                    items.extend(track_info['products'])

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∞–¥—Ä–µ—Å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        if order['order_type'] == 'avito':
            address_display = "–ê–≤–∏—Ç–æ"
        else:
            full_address = order.get('delivery_address', '')
            if full_address:
                # –£–±–∏—Ä–∞–µ–º –≥–æ—Ä–æ–¥ –∏–∑ –∞–¥—Ä–µ—Å–∞
                address_parts = [part.strip() for part in full_address.split(',')]
                address_display = full_address
            else:
                address_display = '–ê–¥—Ä–µ—Å –Ω–µ —É–∫–∞–∑–∞–Ω'

        # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∑–∞–∫–∞–∑–µ –∏ —Ç–æ–≤–∞—Ä–∞—Ö
        message_text = [
            f"üì¶ –ó–∞–∫–∞–∑ #{str(order['id']).zfill(4)}„Ö§",
            f"üìç –ê–¥—Ä–µ—Å: {address_display}"
        ]

        if order['order_type'] == 'delivery':
            message_text.extend([
                f"üì± –ö–æ–Ω—Ç–∞–∫—Ç: {order.get('contact_name', '–ù–µ —É–∫–∞–∑–∞–Ω')}",
                f"‚òéÔ∏è –¢–µ–ª–µ—Ñ–æ–Ω: {order.get('contact_phone', '–ù–µ —É–∫–∞–∑–∞–Ω')}",
                f"üïí –í—Ä–µ–º—è: {order.get('delivery_time', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}",
                f"üìÖ –î–∞—Ç–∞: {order.get('delivery_date', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}"

            ])
        message_text.append("\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä—ã –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –ø–æ–µ–∑–¥–∫—É:")

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ç–æ–≤–∞—Ä–∞–º–∏
        markup = get_order_items_keyboard(
            order_id,
            items,
            current_order_selections,
            order['order_type']
        )

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        mes = bot.edit_message_text(
            '\n'.join(message_text),
            call.message.chat.id,
            call.message.message_id,
            reply_markup=markup
        )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π –∑–∞–∫–∞–∑ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        state.add_data(current_order_id=order_id,current_message_to_edit=mes.message_id)

    except Exception as e:
        bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤")
        print(f"Error in show_order_items: {e}")
        print(f"Order ID: {order_id}")
        if 'order' in locals():
            print(f"Order data: {order}")


@bot.callback_query_handler(func=lambda call: call.data.startswith('toggle_item_'))
def toggle_item_selection(call: CallbackQuery, state: StateContext):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞/–æ—Ç–º–µ–Ω—ã –≤—ã–±–æ—Ä–∞ —Ç–æ–≤–∞—Ä–∞
    """
    try:
        # –†–∞–∑–±–∏—Ä–∞–µ–º callback_data, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–Ω–æ–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ
        parts = call.data.split('_')
        if len(parts) != 4:  # –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å: ['toggle', 'item', 'order_id', 'item_key']
            raise ValueError(f"Invalid callback data format: {call.data}")

        order_id = parts[2]
        item_key = parts[3]

        with state.data() as data:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
            selected_items = data.get('selected_items', {})
            if str(order_id) not in selected_items:
                selected_items[str(order_id)] = []

            # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –≤—ã–±–æ—Ä —Ç–æ–≤–∞—Ä–∞
            if item_key in selected_items[str(order_id)]:
                selected_items[str(order_id)].remove(item_key)
                action = "—É–¥–∞–ª–µ–Ω –∏–∑"
            else:
                selected_items[str(order_id)].append(item_key)
                action = "–¥–æ–±–∞–≤–ª–µ–Ω –≤"


        state.add_data(selected_items=selected_items)


        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ
        order = get_order_by_id(int(order_id),[OrderType.READY_TO_DELIVERY.value])
        if not order:
            raise ValueError(f"Order {order_id} not found")

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤
        if order['order_type'] == 'delivery':
            no_track_data = order['products'].get('no_track', {})
            items = no_track_data.get('products', []) if isinstance(no_track_data, dict) else []
        else:
            items = []
            for track_info in order['products'].values():
                if isinstance(track_info, dict) and 'products' in track_info:
                    items.extend(track_info['products'])

        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        markup = get_order_items_keyboard(
            int(order_id),
            items,
            selected_items[str(order_id)],
            order['order_type']
        )

        try:
            mes = bot.edit_message_reply_markup(
                call.message.chat.id,
                call.message.message_id,
                reply_markup=markup
            )
            state.add_data(current_message_to_edit=mes.message_id)
        except Exception as telegram_error:
            if "message is not modified" not in str(telegram_error):
                raise telegram_error

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –¥–µ–π—Å—Ç–≤–∏–∏
        bot.answer_callback_query(
            call.id,
            f"–¢–æ–≤–∞—Ä {action} –ø–æ–µ–∑–¥–∫—É"
        )

    except Exception as e:
        error_msg = f"Error in toggle_item_selection: {str(e)}"
        print(error_msg)
        if 'order_id' in locals():
            print(f"Order ID: {order_id}")
        if 'item_key' in locals():
            print(f"Item Key: {item_key}")
        if 'order' in locals():
            print(f"Order data: {order}")
        bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ç–æ–≤–∞—Ä–∞")

@bot.callback_query_handler(func=lambda call: call.data.startswith('deselect_all_'), state=TripStates.selecting_orders)
def deselect_all_items(call: CallbackQuery, state: StateContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –≤—ã–±–æ—Ä–∞ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤"""
    try:
        order_id = int(call.data.split('_')[2])

        # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã —ç—Ç–æ–≥–æ –∑–∞–∫–∞–∑–∞ –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö
        with state.data() as data:
            selected_items = data.get('selected_items', {})
            if str(order_id) in selected_items:
                del selected_items[str(order_id)]
        state.add_data(selected_items=selected_items)

        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        order = get_order_by_id(order_id,[OrderType.READY_TO_DELIVERY.value])
        if order:
            markup = get_order_items_keyboard(order_id, [], [], order['order_type'])
            bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=markup)
            bot.answer_callback_query(call.id, "–í—Å–µ —Ç–æ–≤–∞—Ä—ã —É–±—Ä–∞–Ω—ã –∏–∑ –ø–æ–µ–∑–¥–∫–∏")
        else:
            bot.answer_callback_query(call.id, "–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω")

    except Exception as e:
        print(f"Error in deselect_all_items: {e}")
        bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –≤—ã–±–æ—Ä–∞ —Ç–æ–≤–∞—Ä–æ–≤")


@bot.callback_query_handler(func=lambda call: call.data == 'back_to_orders')
def back_to_orders_list(call: CallbackQuery, state: StateContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É –∑–∞–∫–∞–∑–æ–≤"""
    try:
        # courier_info = get_user_info(call.message.json['chat']['username'])
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã

        with state.data() as data:
            avito_message_id = data.get('avito_message_id')
            avito_photos_messages = data.get('avito_photos_messages', [])
            selected_items = data.get('selected_items', {})
            message_to_edit = data.get('current_message_to_edit',{})

            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∞–≤–∏—Ç–æ –∑–∞–∫–∞–∑–æ–º
        # if avito_message_id:
        #     bot.delete_message(call.message.chat.id, avito_message_id)

            # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
        for photo_message_id in avito_photos_messages:
            try:
                bot.delete_message(call.message.chat.id, photo_message_id)
            except Exception as e:
                print(f"Error deleting photo message: {e}")
        orders = get_orders(
            order_type=['avito', 'delivery'],
            status=[OrderType.READY_TO_DELIVERY.value, OrderType.PARTLY_DELIVERED.value],
            role='courier',
            username=call.message.json['chat']['username'],
            item_status=[OrderType.READY_TO_DELIVERY.value]

        )


        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —É—á–µ—Ç–æ–º –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
        markup = get_orders_keyboard(orders, selected_items)
        markup.add(types.InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_courier_menu"))

        new_message = bot.edit_message_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–∫–∞–∑—ã –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –≤ –ø–æ–µ–∑–¥–∫—É:",
            call.message.chat.id,
            message_to_edit,
            reply_markup=markup
        )


        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º ID –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        delete_multiple_states(state, [
            'selecting_delivered_items',
            'avito_photos_sent',
            'avito_order_shown',
            'avito_message_id',
            'current_order_id'
            'avito_photos_messages',
            'current_message_to_edit'
        ])
        state.add_data(orders_message_id=new_message.message_id)

    except Exception as e:
        bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ —Å–ø–∏—Å–∫—É –∑–∞–∫–∞–∑–æ–≤")
        print(f"Error in back_to_orders_list: {e}")


@bot.callback_query_handler(func=lambda call: call.data == "show_current_trip")
def show_current_trip(call: CallbackQuery, state: StateContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–π –ø–æ–µ–∑–¥–∫–µ"""
    try:

        with state.data() as data:
            avito_photos_messages = data.get('avito_photos_messages', [])
            avito_message_id = data.get('avito_message_id')

            # –£–¥–∞–ª—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
        for photo_id in avito_photos_messages:
            try:
                bot.delete_message(call.message.chat.id, photo_id)
            except Exception as e:
                print(f"Error deleting photo: {e}")

            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∑–∞–∫–∞–∑–µ –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
        if avito_message_id:
            try:
                bot.delete_message(call.message.chat.id, avito_message_id)
            except Exception as e:
                print(f"Error deleting message: {e}")

            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è
        delete_multiple_states(state, [
            'avito_photos_messages',
            'avito_message_id',
            'current_order_id'
        ])

        courier_info = get_user_info(call.from_user.username)
        if not courier_info:
            bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫—É—Ä—å–µ—Ä–µ")
            return

        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –ø–æ–µ–∑–¥–∫—É
        trip = trip_manager.get_courier_active_trips(courier_info['id'])
        if not trip:
            bot.edit_message_text(
                "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–µ–∑–¥–æ–∫.",
                call.message.chat.id,
                call.message.message_id,
                reply_markup=types.InlineKeyboardMarkup().add(
                    types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_courier_menu")
                )
            ) if not avito_message_id else (
                bot.send_message(call.message.chat.id,
                                 "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–µ–∑–¥–æ–∫.",
                                 reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_courier_menu"))
            ))

            return

        active_trip = trip[0]
        trip_items = trip_manager.get_trip_items(active_trip['id'])

        # –§–∏–ª—å—Ç—Ä—É–µ–º items –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
        filtered_items = [
            item for item in trip_items
            if item['status'] in [OrderType.PARTLY_DELIVERED.value, OrderType.IN_DELIVERY.value]
        ]

        delivery_items = []
        for item in filtered_items:
            if item and item['order_type'] != 'avito':
                item['delivery_address'] = item.get('delivery_address')
                delivery_items.append(item)

        if not filtered_items:
            bot.edit_message_text(
                "–í—Å–µ –∑–∞–∫–∞–∑—ã –≤ –ø–æ–µ–∑–¥–∫–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã.",
                call.message.chat.id,
                call.message.message_id,
                reply_markup=types.InlineKeyboardMarkup().add(
                    types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_courier_menu")
                )
            ) if not avito_message_id else (
            bot.send_message(
                call.message.chat.id,
                "–í—Å–µ –∑–∞–∫–∞–∑—ã –≤ –ø–æ–µ–∑–¥–∫–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã.",
                reply_markup=types.InlineKeyboardMarkup().add(
                    types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_courier_menu")
                ))
            )
            return

        map_link = generate_map_link(delivery_items, WAREHOUSE_LOCATION)

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        trip_message = (
            "üöö –¢–µ–∫—É—â–∞—è –ø–æ–µ–∑–¥–∫–∞\n\n"
            f"–ö—É—Ä—å–µ—Ä: {courier_info['name']} ({courier_info['username']})\n"
            f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤: {len(set(item['order_id'] for item in filtered_items))}\n\n"
            "–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –ø–æ–µ–∑–¥–∫—É(–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ–ø—Ä–æ—Å–∏–ª–∏ –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ –¥–æ—Å—Ç–∞–≤–∫—É), –∏ –¥–æ—Å—Ç–∞–≤–∏—Ç—å –µ–≥–æ –≤ —Å–ª–µ–¥. —Ä–∞–∑, –Ω–∞–∂–º–∏—Ç–µ ‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–µ–∑–¥–∫—É\n"
            "–í—Å–µ –∑–∞–∫–∞–∑—ã –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç–∞–≤–∏—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ\n"
            "–¢–∞–∫–∂–µ —É –≤–∞—Å –µ—Å—Ç—å –∫–Ω–æ–ø–∫–∞ –ü—Ä–æ–ª–æ–∂–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç, –æ–Ω–∞ –æ—Ç–∫—Ä–æ–µ—Ç –Ø–Ω–¥–µ–∫—Å –∫–∞—Ä—Ç—ã –∏ –æ—Ç–æ–±—Ä–∞–∑–∏—Ç, –∫—É–¥–∞ –Ω—É–∂–Ω–æ –¥–æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑—ã (–¢–æ–ª—å–∫–æ –¥–ª—è –∑–∞–∫–∞–∑–æ–≤ —Å —Ç–∏–ø–æ–º –î–û–°–¢–ê–í–ö–ê)"
            "–î–ª—è –ê–í–ò–¢–û –∑–∞–∫–∞–∑–æ–≤ —Å–º–æ—Ç—Ä–∏—Ç–µ –≤ –∑–∞–∫–∞–∑–µ, –∫—É–¥–∞ –¥–æ—Å—Ç–∞–≤–ª—è—Ç—å"
        )

        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ç–æ–≤–∞—Ä—ã –ø–æ –∑–∞–∫–∞–∑–∞–º
        orders_dict = {}
        for item in filtered_items:
            if item['order_id'] not in orders_dict:
                orders_dict[item['order_id']] = []
            orders_dict[item['order_id']].append(item)

        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –∑–∞–∫–∞–∑–æ–≤
        markup = types.InlineKeyboardMarkup(row_width=1)

        all_orders_completed = True
        for order_id, items in orders_dict.items():
            order = get_order_by_id(order_id)
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∞–¥—Ä–µ—Å–Ω—É—é —á–∞—Å—Ç—å
            if order['order_type'] == 'avito':
                address_text = "–ê–≤–∏—Ç–æ"
            else:
                address_parts = order.get('delivery_address', '').split(',')
                address_text = ', '.join(address_parts[1:]) if len(address_parts) > 1 else '–ê–¥—Ä–µ—Å –Ω–µ —É–∫–∞–∑–∞–Ω'

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å—ã —Ç–æ–≤–∞—Ä–æ–≤
            if any(item['status'] not in ['closed', 'partial_closed', 'refund'] for item in items):
                all_orders_completed = False

            markup.add(
                types.InlineKeyboardButton(
                    f"üì¶ –ó–∞–∫–∞–∑ #{str(order_id).zfill(4)}„Ö§- {address_text}",
                    callback_data=f"show_trip_order_{order_id}"
                )
            )

        state.add_data(current_trip_orders=orders_dict)

        markup.add(types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–µ–∑–¥–∫—É", callback_data="cancel_trip"))

        if any(item.get('coordinates') for item in filtered_items):
            markup.add(types.InlineKeyboardButton(
                text="üó∫Ô∏è –ü—Ä–æ–ª–æ–∂–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç",
                url=map_link
            ))

        markup.add(types.InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_courier_menu"))

        bot.edit_message_text(
            trip_message,
            call.message.chat.id,
            call.message.message_id,
            reply_markup=markup,
            parse_mode='HTML'
        ) if not avito_message_id else (
            bot.send_message(
                call.message.chat.id,
                trip_message,
                reply_markup=markup,
                parse_mode='HTML'
            )
        )

    except Exception as e:
        print(f"Error in show_current_trip: {e}")
        bot.answer_callback_query(call.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –ø–æ–µ–∑–¥–∫–∏")

@bot.callback_query_handler(func=lambda call: call.data.startswith('show_trip_avito_order_'))
def show_trip_avito_order(call: CallbackQuery, state: StateContext, order_id):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ –ê–≤–∏—Ç–æ –≤ –ø–æ–µ–∑–¥–∫–µ"""
    try:
        # order_id = int(call.data.split('_')[4])
        order = get_order_by_id(order_id, item_statuses=[OrderType.IN_DELIVERY.value])

        if not order:
            bot.answer_callback_query(call.id, "–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–∫—É–¥–∞ –ø—Ä–∏—à–µ–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        with state.data() as data:
            avito_photos_messages = data.get('avito_photos_messages', [])
            avito_message_id = data.get('avito_message_id')
            is_from_track = call.data.startswith('show_track_')

        # –ï—Å–ª–∏ –ø—Ä–∏—à–ª–∏ –∏–∑ —Å–ø–∏—Å–∫–∞ –∑–∞–∫–∞–∑–æ–≤, –∞ –Ω–µ –∏–∑ —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä–∞
        if not is_from_track:
            # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            bot.delete_message(call.message.chat.id, call.message.message_id)

            # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Ñ–æ—Ç–æ –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
            for photo_id in avito_photos_messages:
                try:
                    bot.delete_message(call.message.chat.id, photo_id)
                except Exception as e:
                    print(f"Error deleting photo: {e}")

        # –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä–∞ –¥–ª—è –∑–∞–∫–∞–∑–∞
        track_numbers = {}
        for track_number, track_info in order['products'].items():
            if track_number != 'no_track':
                track_numbers[track_number] = track_info['products']

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
        avito_photos = []
        photos_message_ids = []
        for track_number in track_numbers.keys():
            photos = get_avito_photos(order_id)
            if photos:
                avito_photos.extend(photos)

        if avito_photos:
            media_group = create_media_group(avito_photos, None)
            sent_photos = bot.send_media_group(call.message.chat.id, media=media_group)
            photos_message_ids = [msg.message_id for msg in sent_photos]

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message_text = [
            f"üì¶ –ó–∞–∫–∞–∑ #{str(order['id']).zfill(4)}„Ö§",
            f"–¢–∏–ø –∑–∞–∫–∞–∑–∞ - –ê–≤–∏—Ç–æ",
            f"–ú–µ–Ω–µ–¥–∂–µ—Ä - @{order.get('manager_username', '–ù–µ —É–∫–∞–∑–∞–Ω')}",
            f"–ó–∞–º–µ—Ç–∫–∞ - {order.get('note', '–ù–µ—Ç')}",
            "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ç—Ä–µ–∫–Ω–æ–º–µ—Ä –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –Ω–∏–º"
        ]

        for track_number, track_info in track_numbers.items():
            message_text.append(f"\nüì¨ –¢—Ä–µ–∫-–Ω–æ–º–µ—Ä: {track_number}")
            for product in track_info:
                message_text.append(f"  ‚Ä¢ {product.get('name', '')} - {product.get('param', '')}")

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        markup = types.InlineKeyboardMarkup(row_width=1)
        for track_number in track_numbers.keys():
            markup.add(
                types.InlineKeyboardButton(
                    f"üì¨ –¢—Ä–µ–∫-–Ω–æ–º–µ—Ä: {track_number}",
                    callback_data=f"show_track_{order_id}_{track_number}"
                )
            )
        markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –ø–æ–µ–∑–¥–∫–µ", callback_data="show_current_trip"))

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        new_message = bot.send_message(
            call.message.chat.id,
            '\n'.join(message_text),
            reply_markup=markup
        )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ state
        state.add_data(
            avito_photos_messages= photos_message_ids,
            avito_message_id= new_message.message_id,
            current_order_id= order_id
        )

    except Exception as e:
        print(f"Error in show_trip_avito_order: {e}")
        bot.answer_callback_query(call.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞")

@bot.callback_query_handler(func=lambda call: call.data.startswith('show_track_'))
def show_track_details(call: CallbackQuery, state: StateContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä–∞"""
    try:
        _,_, order_id, track_number = call.data.split('_')
        order_id = int(order_id)

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ –∏ —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä–µ
        order = get_order_by_id(order_id, item_statuses=[OrderType.IN_DELIVERY.value])
        if not order:
            bot.answer_callback_query(call.id, "–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        track_info = order['products'].get(track_number, {})
        if not track_info:
            bot.answer_callback_query(call.id, "–¢—Ä–µ–∫-–Ω–æ–º–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message_text = [
            f"üì¶ –ó–∞–∫–∞–∑ #{str(order_id).zfill(4)}„Ö§",
            f"üì¨ –¢—Ä–µ–∫-–Ω–æ–º–µ—Ä: {track_number}",
            f"–ú–µ–Ω–µ–¥–∂–µ—Ä: @{order.get('manager_username', '–ù–µ —É–∫–∞–∑–∞–Ω')}",
            f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—à–∫–æ–≤: {order.get('avito_boxes', 0)}",
            "–ï—Å–ª–∏ –≤—ã –¥–æ—Å—Ç–∞–≤–∏–ª–∏ —Ç—Ä–µ–∫–Ω–æ–º–µ—Ä, –Ω–∞–∂–º–∏—Ç–µ –î–∞–ª–µ–µ\n"
            "–ï—Å–ª–∏ –ø—Ä–∏—à–ª–∞ –æ—Ç–º–µ–Ω–∞, –Ω–∞–∂–º–∏—Ç–µ –û—Ç–º–µ–Ω–∏—Ç—å\n–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ, –¥–∞–Ω–Ω—ã–π —Ç—Ä–µ–∫–Ω–æ–º–µ—Ä –ø–æ–≤—Ç–æ—Ä–Ω–æ –Ω–µ–ª—å–∑—è –±—É–¥–µ—Ç –¥–æ—Å—Ç–∞–≤–∏—Ç—å, —Ç–æ–≤–∞—Ä—ã –∏–∑ –Ω–µ–≥–æ –ø–æ–ø–æ–ª–Ω—è—Ç —Å–∫–ª–∞–¥\n"
            "\n–¢–æ–≤–∞—Ä—ã –≤ —Ç—Ä–µ–∫–µ:"
        ]

        for product in track_info.get('products', []):
            message_text.append(f"‚Ä¢ {product.get('name', '')} - {product.get('param', '')}")

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        markup = types.InlineKeyboardMarkup(row_width=2)
        markup.add(
            types.InlineKeyboardButton("‚úÖ –î–∞–ª–µ–µ", callback_data=f"complete_avito_track_{order_id}_{track_number}"),
            types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"cancel_avito_track_{order_id}_{track_number}"),
            types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"show_trip_order_{order_id}")
        )

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        bot.edit_message_text(
            '\n'.join(message_text),
            call.message.chat.id,
            call.message.message_id,
            reply_markup=markup
        )

    except Exception as e:
        print(f"Error in show_track_details: {e}")
        bot.answer_callback_query(call.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä–∞")

@bot.callback_query_handler(func=lambda call: call.data.startswith('show_trip_order_'))
def show_trip_order(call: CallbackQuery, state: StateContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ –≤ –ø–æ–µ–∑–¥–∫–µ"""
    try:
        order_id = int(call.data.split('_')[3])
        order = get_order_by_id(order_id,item_statuses=[OrderType.IN_DELIVERY.value])

        if not order:
            bot.answer_callback_query(call.id, "–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        if order['order_type'] == 'avito':
            show_trip_avito_order(call, state, order_id)
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∑–∞–∫–∞–∑–µ
        message_text = (
            f"üì¶ –ó–∞–∫–∞–∑ #{str(order_id).zfill(4)}„Ö§\n"
            f"üìç –ê–¥—Ä–µ—Å: {order.get('delivery_address', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
            f"üì± –ö–æ–Ω—Ç–∞–∫—Ç: {order.get('contact_name', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
            f"‚òéÔ∏è –¢–µ–ª–µ—Ñ–æ–Ω: {order.get('contact_phone', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
            f"üïí –í—Ä–µ–º—è: {order.get('delivery_time', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            f"üìÖ –î–∞—Ç–∞: {order.get('delivery_date', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n\n"
            "–ï—Å–ª–∏ –≤–∞–º –ø—Ä–∏—à–ª–∞ –æ—Ç–º–µ–Ω–∞ –ø–æ –∫–∞–∫–æ–º—É-—Ç–æ —Ç–æ–≤–∞—Ä—É, –ø—Ä–æ—Å—Ç–æ –Ω–µ –≤—ã–±–∏—Ä–∞–π—Ç–µ –µ–≥–æ.\n–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ, –¥–∞–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä –Ω–µ–ª—å–∑—è –±—É–¥–µ—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ –¥–æ—Å—Ç–∞–≤–∏—Ç—å, –æ–Ω –æ—Ç–º–µ—è–µ—Ç—Å—è –∏ –µ–¥–µ—Ç –Ω–∞ —Å–∫–ª–∞–¥\n\n"
            
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã:\n"

        )

        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã –∑–∞–∫–∞–∑–∞ –≤ –ø–æ–µ–∑–¥–∫–µ
        trip_items = trip_manager.get_trip_items_for_order(order_id,order_item_status=[OrderType.IN_DELIVERY.value],trip_status=['pending'], courier_trip_status=['created'])

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ç–æ–≤–∞—Ä–∞–º–∏
        markup = types.InlineKeyboardMarkup(row_width=1)

        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–Ω–µ–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        with state.data() as data:
            delivered_items = data.get('delivered_items', {}).get(str(order_id), [])

        for item in trip_items:
            prefix = "‚úÖ" if item['id'] in delivered_items else "‚¨úÔ∏è"
            markup.add(
                types.InlineKeyboardButton(
                    f"{prefix} {item['product_name']} - {item.get('param_title', '')}",
                    callback_data=f"toggle_delivered_{order_id}_{item['id']}"
                )
            )

        # –î–æ–±–∞–≤–ª—è–µ–º —É–ø—Ä–∞–≤–ª—è—é—â–∏–µ –∫–Ω–æ–ø–∫–∏
        markup.add(
            # types.InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—Å–µ", callback_data=f"deliver_all_{order_id}"),
            types.InlineKeyboardButton("‚û°Ô∏è –î–∞–ª–µ–µ", callback_data=f"proceed_delivery_{order_id}"),
            types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –ø–æ–µ–∑–¥–∫–µ", callback_data="show_current_trip")
        )

        bot.edit_message_text(
            message_text,
            call.message.chat.id,
            call.message.message_id,
            reply_markup=markup
        )

        state.set(CourierStates.selecting_delivered_items)

    except Exception as e:
        print(f"Error in show_trip_order: {e}")
        bot.answer_callback_query(call.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞")


@bot.callback_query_handler(func=lambda call: call.data == "confirm_orders")
def confirm_orders_selection(call: CallbackQuery, state: StateContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤"""
    try:
        with state.data() as data:
            selected_items = data.get('selected_items', {})

        if not selected_items:
            bot.answer_callback_query(call.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ç–æ–≤–∞—Ä")
            return

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫—É—Ä—å–µ—Ä–µ
        courier_info = get_user_info(call.from_user.username)
        if not courier_info:
            bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫—É—Ä—å–µ—Ä–µ")
            return

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–∞–º—É—é –¥–∞–ª—å–Ω—é—é –∑–æ–Ω—É –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤
        orders_info = []
        # furthest_zone_id = None
        # furthest_zone_price = 0
        #
        # for order_id in selected_items:
        #     order = get_order_by_id(order_id)
        #     if order:
        #         orders_info.append(order)
        #
        #         # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–æ–Ω—É –¥–æ—Å—Ç–∞–≤–∫–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è –∑–∞–∫–∞–∑–æ–≤ —Å —Ç–∏–ø–æ–º 'delivery'
        #         if order['order_type'] == 'delivery':
        #             delivery_address = order['delivery_address']
        #             coordinates = zone_manager.geocode_address(delivery_address)
        #             if coordinates:
        #                 zone = zone_manager.get_zone_by_coordinates(*coordinates)
        #                 if zone and zone.base_price > furthest_zone_price:
        #                     furthest_zone_id = zone.id
        #                     furthest_zone_price = zone.base_price
        orders_info = []
        delivery_orders_exist = False

        for order_id in selected_items:
            order = get_order_by_id(order_id)
            if order:
                order_info = {'id': order['id'], 'type': order['order_type']}
                if order['order_type'] == 'delivery':
                    delivery_orders_exist = True
                    delivery_address = order['delivery_address']
                    coordinates = zone_manager.geocode_address(delivery_address)
                    if coordinates:
                        zone = zone_manager.get_zone_by_coordinates(*coordinates)
                        if zone:
                            order_info['zone'] = zone
                orders_info.append(order_info)

        # if not furthest_zone_id:
        #     # –ï—Å–ª–∏ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤ —Å –¥–æ—Å—Ç–∞–≤–∫–æ–π, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—É—é –∑–æ–Ω—É
        #     default_zone = zone_manager.get_all_zones()[0]
        #     furthest_zone_id = default_zone.id

        # –°–æ–∑–¥–∞–µ–º –ø–æ–µ–∑–¥–∫—É
        # print(furthest_zone_id,'zone')
        delivery_cost={}
        if delivery_orders_exist:
            delivery_cost = cost_calculator.calculate_for_trip(orders_info, selected_items)
            total_price = delivery_cost.total_price
            zone_id = delivery_cost.zone_id
        else:
            # –î–ª—è –ø–æ–µ–∑–¥–∫–∏ —Ç–æ–ª—å–∫–æ —Å –ê–≤–∏—Ç–æ –∑–∞–∫–∞–∑–∞–º–∏
            #TODO dodelat
            total_price = cost_calculator.calculate_for_trip(orders_info, selected_items).total_price
            zone_id = None
        trip_id = trip_manager.create_trip(courier_info['id'], zone_id, total_price)
        if not trip_id:
            bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–µ–∑–¥–∫–∏")
            return

            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä—ã –≤ –ø–æ–µ–∑–¥–∫—É
        for order_id, item_keys in selected_items.items():
            order = get_order_by_id(int(order_id))
            if order['order_type'] == 'avito':
                # –î–ª—è –ê–≤–∏—Ç–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä–∞
                for item_key in item_keys:
                    track_number = item_key.split('|')[0]
                    track_info = order['products'].get(track_number, {})
                    if track_info and 'products' in track_info:
                        for product in track_info['products']:
                            success = trip_manager.add_item_to_trip(
                                trip_id['id'],
                                int(order_id),
                                f"{product.get('order_item_id')}|{product.get('product_id')}|{product.get('param_id')}"
                            )
                            if not success:
                                print(f"Failed to add item from track {track_number} to trip {trip_id}")
            else:
                # –°—É—â–µ—Å—Ç–≤—É—é—â–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤
                for item_key in item_keys:
                    success = trip_manager.add_item_to_trip(
                        trip_id['id'],
                        int(order_id),
                        item_key
                    )
                    if not success:
                        print(f"Failed to add item {item_key} from order {order_id} to trip {trip_id}")
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å—ã –∑–∞–∫–∞–∑–æ–≤ –∏ —Ç–æ–≤–∞—Ä–æ–≤
        # for order_id in selected_items:
        #
        #     order = get_order_by_id(order_id)
            # if order:
            #     if len(selected_items[order_id]) == len(order['products']):
            #         # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω—ã –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –∑–∞–∫–∞–∑–∞, –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –Ω–∞ 'in_delivery'
            #         update_order_status(order_id, OrderType.IN_DELIVERY.value)
            #     else:
            #         # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ —Ç–æ–ª—å–∫–æ —á–∞—Å—Ç—å —Ç–æ–≤–∞—Ä–æ–≤, –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –Ω–∞ 'partly_delivered'
            #         update_order_status(order_id, OrderType.PARTLY_DELIVERED.value)
            #
            #     # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å—ã –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ 'in_delivery'
            #     for item_key in selected_items[order_id]:
            #         product_id, param_id, idx = item_key.split('|')
            #         # update_order_item_status(order_id, product_id, param_id, OrderType.IN_DELIVERY.value)
        for order_id in selected_items:
            order = get_order_by_id(int(order_id))
            if order:
                if order['order_type'] == 'avito':
                    selected_tracks = [key.split('|')[0] for key in selected_items[order_id]]
                    total_tracks = len([k for k in order['products'].keys() if k != 'no_track'])
                    if len(selected_tracks) == total_tracks:
                        update_order_status(order_id, OrderType.IN_DELIVERY.value)
                    else:
                        update_order_status(order_id, OrderType.PARTLY_DELIVERED.value, with_order_items = False)
                        for item_key in selected_items[order_id]:
                            _, _ ,order_item_ids = item_key.split('|')
                            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –¥–ª—è –∫–∞–∂–¥–æ–≥–æ order_item_id
                            order_item_ids = order_item_ids.split(',')
                            for order_item_id in order_item_ids:
                                update_order_item_status(int(order_item_id), OrderType.IN_DELIVERY.value)
                else:
                    if len(selected_items[order_id]) == len(order['products']['no_track']):
                        # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω—ã –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –∑–∞–∫–∞–∑–∞
                            update_order_status(order_id, OrderType.IN_DELIVERY.value, )
                    else:
                        # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ —Ç–æ–ª—å–∫–æ —á–∞—Å—Ç—å —Ç–æ–≤–∞—Ä–æ–≤
                        update_order_status(order_id, OrderType.PARTLY_DELIVERED.value, with_order_items = False)
                        for item_key in selected_items[order_id]:
                            order_item_id, product_id, param_id= item_key.split('|')
                            update_order_item_status(order_item_id, OrderType.IN_DELIVERY.value)
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–æ–∑–¥–∞–Ω–Ω–æ–π –ø–æ–µ–∑–¥–∫–µ
        trip_message = (
            f"üöö –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –ø–æ–µ–∑–¥–∫–∞\n\n"
            f"–ö—É—Ä—å–µ—Ä: {courier_info['name']} ({courier_info['username']})\n"
            f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤: {len(selected_items)}\n"
            # f"–°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏: {delivery_cost.total_price} —Ä—É–±.\n\n"
            f"–ó–∞–∫–∞–∑—ã –≤ –ø–æ–µ–∑–¥–∫–µ:\n"
        )

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–∞—Ö –∏ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–∞—Ö
        for order in orders_info:
            trip_message += f"\nüì¶ –ó–∞–∫–∞–∑ #{order['id']}"
            if order.get('delivery_address'):
                trip_message += f"\nüìç –ê–¥—Ä–µ—Å: {order['delivery_address']}"

            # –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –¥–ª—è —ç—Ç–æ–≥–æ –∑–∞–∫–∞–∑–∞
            if str(order['id']) in selected_items:
                trip_message += "\nüõçÔ∏è –í—ã–±—Ä–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã:"
                order_data = get_order_by_id(order['id'])
                for item_key in selected_items[str(order['id'])]:
                    if order_data['order_type'] == 'delivery':
                        # –î–ª—è –∑–∞–∫–∞–∑–æ–≤ —Å –¥–æ—Å—Ç–∞–≤–∫–æ–π
                        order_item_id, product_id, param_id = item_key.split('|')
                        products = order_data['products'].get('no_track', {}).get('products', [])
                        for product in products:
                            if str(product.get('product_id')) == product_id and str(
                                    product.get('param_id')) == param_id:
                                trip_message += f"\n  ‚Ä¢ {product.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–æ–≤–∞—Ä')} - {product.get('param', '')}"
                                break
                    else:
                        # –î–ª—è –∑–∞–∫–∞–∑–æ–≤ –ê–≤–∏—Ç–æ
                        track_number, order_id,_ = item_key.split('|')
                        track_info = order_data['products'].get(track_number, {})
                        if track_info and 'products' in track_info:
                            trip_message += f"\n  üì¨ –¢—Ä–µ–∫-–Ω–æ–º–µ—Ä: {track_number}"
                            for product in track_info['products']:
                                trip_message += f"\n    ‚Ä¢ {product.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–æ–≤–∞—Ä')} - {product.get('param', '')}"

            trip_message += "\n"
        # –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞—Ä—Ç—ã


        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –¥–ª—è –∫—É—Ä—å–µ—Ä–∞
        trip_message += "\n\nüí° –ß—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –≤ —Ç–µ–∫—É—â—É—é –ø–æ–µ–∑–¥–∫—É, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É \"–¢–µ–∫—É—â–∞—è –ø–æ–µ–∑–¥–∫–∞\" –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ"
        markup = types.InlineKeyboardMarkup()
        markup.add( types.InlineKeyboardButton("üöö –¢–µ–∫—É—â–∞—è –ø–æ–µ–∑–¥–∫–∞", callback_data="show_current_trip"))
        markup.add(
                types.InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_courier_menu"))
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–µ–∑–¥–∫–∏ –±–µ–∑ –∫–Ω–æ–ø–æ–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–µ–∑–¥–∫–æ–π
        bot.edit_message_text(
            trip_message,
            call.message.chat.id,
            call.message.message_id,
            parse_mode='HTML',
            disable_web_page_preview=True,
            reply_markup=markup
            )


        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        state.set(TripStates.trip_in_progress)
        state.add_data(
            trip_id=trip_id,
            orders_info=orders_info,
            delivery_cost=delivery_cost
        )

    except Exception as e:
        bot.answer_callback_query(call.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–µ–∑–¥–∫–∏")
        print(f"Error in confirm_orders_selection: {e}")

@bot.callback_query_handler(func=lambda call: call.data.startswith('complete_trip_'))
def handle_trip_completion(call: CallbackQuery, state: StateContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ–µ–∑–¥–∫–∏"""
    try:
        trip_id = int(call.data.split('_')[2])

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–∞—Ö –≤ –ø–æ–µ–∑–¥–∫–µ
        trip_items = trip_manager.get_trip_items(trip_id)

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
        markup = types.InlineKeyboardMarkup(row_width=1)
        for item in trip_items:
            if item['trip_item_status'] == 'pending':
                btn_text = f"‚úÖ {item['product_name']} - {item['city']}, {item['street']}"
                callback_data = f"deliver_item_{trip_id}_{item['trip_item_id']}"
                markup.add(types.InlineKeyboardButton(btn_text, callback_data=callback_data))

        markup.add(types.InlineKeyboardButton("üèÅ –ó–∞–≤–µ—Ä—à–∏—Ç—å –ø–æ–µ–∑–¥–∫—É", callback_data=f"finalize_trip_{trip_id}"))

        bot.edit_message_text(
            "–û—Ç–º–µ—Ç—å—Ç–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã:",
            call.message.chat.id,
            call.message.message_id,
            reply_markup=markup
        )

        state.set(TripStates.completing_delivery)

    except Exception as e:
        bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø–æ–µ–∑–¥–∫–∏")
        print(f"Error in handle_trip_completion: {e}")


@bot.callback_query_handler(func=lambda call: call.data.startswith('cancel_trip_'))
def handle_trip_cancellation(call: CallbackQuery, state: StateContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã –ø–æ–µ–∑–¥–∫–∏"""
    trip_id = int(call.data.split('_')[2])

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–∞—Ö –≤ –ø–æ–µ–∑–¥–∫–µ
    trip_items = trip_manager.get_trip_items(trip_id)

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –æ—Ç–º–µ–Ω—ã
    markup = types.InlineKeyboardMarkup(row_width=1)
    for item in trip_items:
        if item['trip_item_status'] == 'pending':
            btn_text = f"‚ùå {item['product_name']} - {item['city']}, {item['street']}"
            callback_data = f"cancel_item_{trip_id}_{item['trip_item_id']}"
            markup.add(types.InlineKeyboardButton(btn_text, callback_data=callback_data))

    markup.add(types.InlineKeyboardButton("üîÑ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ—Ç–º–µ–Ω—É", callback_data=f"confirm_cancellation_{trip_id}"))

    bot.edit_message_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä—ã –¥–ª—è –æ—Ç–º–µ–Ω—ã:",
        call.message.chat.id,
        call.message.message_id,
        reply_markup=markup
    )

    state.set(TripStates.canceling_items)
    state.add_data(cancelled_items=[])


@bot.callback_query_handler(func=lambda call: call.data.startswith('deliver_item_'))
def handle_item_delivery(call: CallbackQuery, state: StateContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞"""
    try:
        _, trip_id, item_id = call.data.split('_')
        trip_id, item_id = int(trip_id), int(item_id)

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç–æ–≤–∞—Ä–∞
        success = trip_manager.update_trip_item_status(item_id, 'delivered')
        if not success:
            bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ —Ç–æ–≤–∞—Ä–∞")
            return

        bot.answer_callback_query(call.id, "–¢–æ–≤–∞—Ä –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π")

        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        trip_items = trip_manager.get_trip_items(trip_id)
        markup = types.InlineKeyboardMarkup(row_width=1)

        has_pending_items = False
        for item in trip_items:
            if item['trip_item_status'] == 'pending':
                has_pending_items = True
                btn_text = f"‚úÖ {item['product_name']} - {item['city']}, {item['street']}"
                callback_data = f"deliver_item_{trip_id}_{item['trip_item_id']}"
                markup.add(types.InlineKeyboardButton(btn_text, callback_data=callback_data))

        if has_pending_items:
            markup.add(types.InlineKeyboardButton("üèÅ –ó–∞–≤–µ—Ä—à–∏—Ç—å –ø–æ–µ–∑–¥–∫—É", callback_data=f"finalize_trip_{trip_id}"))
        else:
            # –ï—Å–ª–∏ –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≤–µ—Ä—à–∞–µ–º –ø–æ–µ–∑–¥–∫—É
            finalize_trip(call, trip_id, state)
            return

        bot.edit_message_reply_markup(
            call.message.chat.id,
            call.message.message_id,
            reply_markup=markup
        )

    except Exception as e:
        bot.answer_callback_query(call.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–æ—Å—Ç–∞–≤–∫–∏")
        print(f"Error in handle_item_delivery: {e}")


def finalize_trip(call: CallbackQuery, trip_id: int, state: StateContext):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø–æ–µ–∑–¥–∫–∏"""
    try:
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–µ–∑–¥–∫–∏
        success = trip_manager.update_trip_status(trip_id, 'completed')
        if not success:
            raise Exception("Failed to update trip status")

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–µ–∑–¥–∫–µ
        trip_items = trip_manager.get_trip_items(trip_id)

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        summary_message = "üèÅ –ü–æ–µ–∑–¥–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n\n"

        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ç–æ–≤–∞—Ä—ã –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
        delivered_items = []
        cancelled_items = []

        for item in trip_items:
            item_info = f"‚Ä¢ {item['product_name']} - {item['city']}, {item['street']}"
            if item['trip_item_status'] == 'delivered':
                delivered_items.append(item_info)
            elif item['trip_item_status'] in ['declined', 'refunded']:
                cancelled_items.append(item_info)

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–∞—Ö
        if delivered_items:
            summary_message += "‚úÖ –î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ:\n" + "\n".join(delivered_items) + "\n\n"

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–∞—Ö
        if cancelled_items:
            summary_message += "‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ:\n" + "\n".join(cancelled_items) + "\n"

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        bot.edit_message_text(
            summary_message,
            call.message.chat.id,
            call.message.message_id
        )

        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        state.delete()

    except Exception as e:
        bot.answer_callback_query(call.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø–æ–µ–∑–¥–∫–∏")
        print(f"Error in finalize_trip: {e}")


@bot.callback_query_handler(func=lambda call: call.data.startswith('finalize_trip_'))
def handle_trip_finalization(call: CallbackQuery, state: StateContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ–µ–∑–¥–∫–∏"""
    try:
        trip_id = int(call.data.split('_')[2])
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—Å–µ –ª–∏ —Ç–æ–≤–∞—Ä—ã –∏–º–µ—é—Ç —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å
        trip_items = trip_manager.get_trip_items(trip_id)
        pending_items = [item for item in trip_items if item['trip_item_status'] == 'pending']

        if pending_items:
            markup = types.InlineKeyboardMarkup(row_width=1)
            markup.add(
                types.InlineKeyboardButton(
                    "‚úÖ –î–∞, –∑–∞–≤–µ—Ä—à–∏—Ç—å",
                    callback_data=f"force_finalize_{trip_id}"
                ),
                types.InlineKeyboardButton(
                    "üîÑ –ù–µ—Ç, –≤–µ—Ä–Ω—É—Ç—å—Å—è",
                    callback_data=f"return_to_trip_{trip_id}"
                )
            )

            bot.answer_callback_query(call.id)
            bot.edit_message_text(
                "‚ö†Ô∏è –ï—Å—Ç—å —Ç–æ–≤–∞—Ä—ã –±–µ–∑ —Å—Ç–∞—Ç—É—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏. –£–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å –ø–æ–µ–∑–¥–∫—É?",
                call.message.chat.id,
                call.message.message_id,
                reply_markup=markup
            )
        else:
            finalize_trip(call, trip_id, state)

    except Exception as e:
        bot.answer_callback_query(call.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø–æ–µ–∑–¥–∫–∏")
        print(f"Error in handle_trip_finalization: {e}")


@bot.callback_query_handler(func=lambda call: call.data.startswith('force_finalize_'))
def handle_force_finalization(call: CallbackQuery, state: StateContext):
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø–æ–µ–∑–¥–∫–∏"""
    trip_id = int(call.data.split('_')[2])
    # –ü–æ–º–µ—á–∞–µ–º –≤—Å–µ pending —Ç–æ–≤–∞—Ä—ã –∫–∞–∫ –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ
    trip_items = trip_manager.get_trip_items(trip_id)
    pending_items = [item['trip_item_id'] for item in trip_items if item['trip_item_status'] == 'pending']

    if pending_items:
        trip_manager.cancel_trip_items(trip_id, pending_items)

    finalize_trip(call, trip_id, state)


@bot.callback_query_handler(func=lambda call: call.data.startswith('return_to_trip_'))
def handle_return_to_trip(call: CallbackQuery, state: StateContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –ø–æ–µ–∑–¥–∫–æ–π"""
    trip_id = int(call.data.split('_')[2])
    trip_items = trip_manager.get_trip_items(trip_id)

    markup = types.InlineKeyboardMarkup(row_width=1)
    for item in trip_items:
        if item['trip_item_status'] == 'pending':
            btn_text = f"‚úÖ {item['product_name']} - {item['city']}, {item['street']}"
            callback_data = f"deliver_item_{trip_id}_{item['trip_item_id']}"
            markup.add(types.InlineKeyboardButton(btn_text, callback_data=callback_data))

    markup.add(types.InlineKeyboardButton("üèÅ –ó–∞–≤–µ—Ä—à–∏—Ç—å –ø–æ–µ–∑–¥–∫—É", callback_data=f"finalize_trip_{trip_id}"))

    bot.edit_message_text(
        "–û—Ç–º–µ—Ç—å—Ç–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã:",
        call.message.chat.id,
        call.message.message_id,
        reply_markup=markup
    )


@bot.callback_query_handler(func=lambda call: call.data.startswith('cancel_item_'))
def handle_item_cancellation(call: CallbackQuery, state: StateContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞"""
    try:
        _, trip_id, item_id = call.data.split('_')
        trip_id, item_id = int(trip_id), int(item_id)

        with state.data() as data:
            cancelled_items = data.get('cancelled_items', [])
            if item_id not in cancelled_items:
                cancelled_items.append(item_id)
        state.add_data(cancelled_items=cancelled_items)

        bot.answer_callback_query(call.id, "–¢–æ–≤–∞—Ä –æ—Ç–º–µ—á–µ–Ω –¥–ª—è –æ—Ç–º–µ–Ω—ã")

        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        trip_items = trip_manager.get_trip_items(trip_id)
        markup = types.InlineKeyboardMarkup(row_width=1)

        for item in trip_items:
            if item['trip_item_status'] == 'pending':
                is_cancelled = item['trip_item_id'] in cancelled_items
                btn_text = f"{'‚ùå' if is_cancelled else 'üîÑ'} {item['product_name']} - {item['city']}, {item['street']}"
                callback_data = f"cancel_item_{trip_id}_{item['trip_item_id']}"
                markup.add(types.InlineKeyboardButton(btn_text, callback_data=callback_data))

        markup.add(types.InlineKeyboardButton(
            "üîÑ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ—Ç–º–µ–Ω—É",
            callback_data=f"confirm_cancellation_{trip_id}"
        ))

        bot.edit_message_reply_markup(
            call.message.chat.id,
            call.message.message_id,
            reply_markup=markup
        )

    except Exception as e:
        bot.answer_callback_query(call.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ —Ç–æ–≤–∞—Ä–∞")
        print(f"Error in handle_item_cancellation: {e}")


@bot.callback_query_handler(func=lambda call: call.data.startswith('confirm_cancellation_'))
def handle_cancellation_confirmation(call: CallbackQuery, state: StateContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–º–µ–Ω—ã —Ç–æ–≤–∞—Ä–æ–≤"""
    try:
        trip_id = int(call.data.split('_')[2])

        with state.data() as data:
            cancelled_items = data.get('cancelled_items', [])

        if not cancelled_items:
            bot.answer_callback_query(call.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä—ã –¥–ª—è –æ—Ç–º–µ–Ω—ã")
            return

        # –û—Ç–º–µ–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã
        success = trip_manager.cancel_trip_items(trip_id, cancelled_items)
        if not success:
            raise Exception("Failed to cancel items")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Å—Ç–∞–ª–∏—Å—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã
        trip_items = trip_manager.get_trip_items(trip_id)
        pending_items = [item for item in trip_items if item['trip_item_status'] == 'pending']

        if pending_items:
            # –ï—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –ø–æ–µ–∑–¥–∫–æ–π
            markup = types.InlineKeyboardMarkup(row_width=1)
            for item in pending_items:
                btn_text = f"‚úÖ {item['product_name']} - {item['city']}, {item['street']}"
                callback_data = f"deliver_item_{trip_id}_{item['trip_item_id']}"
                markup.add(types.InlineKeyboardButton(btn_text, callback_data=callback_data))

            markup.add(types.InlineKeyboardButton("üèÅ –ó–∞–≤–µ—Ä—à–∏—Ç—å –ø–æ–µ–∑–¥–∫—É", callback_data=f"finalize_trip_{trip_id}"))

            bot.edit_message_text(
                "–¢–æ–≤–∞—Ä—ã –æ—Ç–º–µ–Ω–µ–Ω—ã. –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ –¥–æ—Å—Ç–∞–≤–∫—É –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è —Ç–æ–≤–∞—Ä–æ–≤:",
                call.message.chat.id,
                call.message.message_id,
                reply_markup=markup
            )
        else:
            # –ï—Å–ª–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å, –∑–∞–≤–µ—Ä—à–∞–µ–º –ø–æ–µ–∑–¥–∫—É
            finalize_trip(call, trip_id, state)

    except Exception as e:
        bot.answer_callback_query(call.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –æ—Ç–º–µ–Ω—ã")
        print(f"Error in handle_cancellation_confirmation: {e}")
def parse_item_key(item_key):
    """–†–∞–∑–±–∏—Ä–∞–µ—Ç –∫–ª—é—á —Ç–æ–≤–∞—Ä–∞ –Ω–∞ product_id –∏ –∏–Ω–¥–µ–∫—Å"""
    order_item_id, product_id,param_id = item_key.split('|')
    return int(order_item_id), int(product_id), int(param_id)


@bot.callback_query_handler(func=lambda call: call.data.startswith('toggle_delivered_'))
def toggle_delivered_item(call: CallbackQuery, state: StateContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞/–æ—Ç–º–µ–Ω—ã –≤—ã–±–æ—Ä–∞ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞"""
    try:
        # –†–∞–∑–±–∏—Ä–∞–µ–º callback_data
        _, order_id, item_id = call.data.split('_')[1:]
        order_id = str(order_id)
        item_id = int(item_id)

        # –ü–æ–ª—É—á–∞–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
        with state.data() as data:
            delivered_items = data.get('delivered_items', {})
            if order_id not in delivered_items:
                delivered_items[order_id] = []

            # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Å—Ç–∞—Ç—É—Å —Ç–æ–≤–∞—Ä–∞
            if item_id in delivered_items[order_id]:
                delivered_items[order_id].remove(item_id)
                action = "—É–¥–∞–ª–µ–Ω –∏–∑"
            else:
                delivered_items[order_id].append(item_id)
                action = "–¥–æ–±–∞–≤–ª–µ–Ω –≤"

            # data['delivered_items'] = delivered_items
        state.add_data(delivered_items=delivered_items)
        # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
        order = get_order_by_id(int(order_id),item_statuses=[OrderType.IN_DELIVERY.value])
        trip_items = trip_manager.get_trip_items_for_order(order_id, order_item_status=[OrderType.IN_DELIVERY.value],
                                                           trip_status=['pending'], courier_trip_status=['created'])

        message_text = (
            f"üì¶ –ó–∞–∫–∞–∑ #{order_id.zfill(4)}„Ö§\n"
            f"üìç –ê–¥—Ä–µ—Å: {order.get('delivery_address', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
            f"üì± –ö–æ–Ω—Ç–∞–∫—Ç: {order.get('contact_name', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
            f"‚òéÔ∏è –¢–µ–ª–µ—Ñ–æ–Ω: {order.get('contact_phone', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
            f"üïí –í—Ä–µ–º—è: {order.get('delivery_time', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            f"üìÖ –î–∞—Ç–∞: {order.get('delivery_date', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n\n"
            "–ï—Å–ª–∏ –≤–∞–º –ø—Ä–∏—à–ª–∞ –æ—Ç–º–µ–Ω–∞ –ø–æ –∫–∞–∫–æ–º—É-—Ç–æ —Ç–æ–≤–∞—Ä—É, –ø—Ä–æ—Å—Ç–æ –Ω–µ –≤—ã–±–∏—Ä–∞–π—Ç–µ –µ–≥–æ.\n–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ, –¥–∞–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä –Ω–µ–ª—å–∑—è –±—É–¥–µ—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ –¥–æ—Å—Ç–∞–≤–∏—Ç—å, –æ–Ω –æ—Ç–º–µ—è–µ—Ç—Å—è –∏ –µ–¥–µ—Ç –Ω–∞ —Å–∫–ª–∞–¥\n\n"
            
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã:\n"
        )

        markup = types.InlineKeyboardMarkup(row_width=1)
        for item in trip_items:
            prefix = "‚úÖ" if item['id'] in delivered_items[order_id] else "‚¨úÔ∏è"
            markup.add(
                types.InlineKeyboardButton(
                    f"{prefix} {item['product_name']} - {item.get('param_title', '')}",
                    callback_data=f"toggle_delivered_{order_id}_{item['id']}"
                )
            )

        markup.add(
            # types.InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—Å–µ", callback_data=f"deliver_all_{order_id}"),
            types.InlineKeyboardButton("‚û°Ô∏è –î–∞–ª–µ–µ", callback_data=f"proceed_delivery_{order_id}"),
            types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –ø–æ–µ–∑–¥–∫–µ", callback_data="show_current_trip")
        )

        bot.edit_message_text(
            message_text,
            call.message.chat.id,
            call.message.message_id,
            reply_markup=markup
        )

        bot.answer_callback_query(call.id, f"–¢–æ–≤–∞—Ä {action} —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö")

    except Exception as e:
        print(f"Error in toggle_delivered_item: {e}")
        bot.answer_callback_query(call.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ç–æ–≤–∞—Ä–∞")


@bot.callback_query_handler(func=lambda call: call.data.startswith('deliver_all_'))
def deliver_all_items(call: CallbackQuery, state: StateContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤ –∫–∞–∫ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö"""
    try:
        order_id = str(call.data.split('_')[2])

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –∑–∞–∫–∞–∑–∞
        trip_items = trip_manager.get_trip_items_for_order(int(order_id))

        # –û—Ç–º–µ—á–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –∫–∞–∫ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ
        with state.data() as data:
            delivered_items = data.get('delivered_items', {})
            delivered_items[order_id] = [item['id'] for item in trip_items]
        # data['delivered_items'] = delivered_items
        state.add_data(delivered_items=delivered_items)
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É —Å—É–º–º—ã –¥–æ—Å—Ç–∞–≤–∫–∏
        proceed_with_delivery(call.message, order_id, state)

    except Exception as e:
        print(f"Error in deliver_all_items: {e}")
        bot.answer_callback_query(call.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤")


@bot.callback_query_handler(func=lambda call: call.data.startswith('proceed_delivery_'))
def proceed_with_delivery(call: CallbackQuery, state: StateContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –≤–≤–æ–¥—É —Å—É–º–º—ã –¥–æ—Å—Ç–∞–≤–∫–∏"""
    try:
        order_id = str(call.data.split('_')[2])

        with state.data() as data:
            delivered_items = data.get('delivered_items', {}).get(order_id, [])

            data['current_order_id'] = order_id

        bot.edit_message_text(
            "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–æ—Å—Ç–∞–≤–∫–∏(—Å–∫–æ–ª—å–∫–æ –ø–µ—Ä–µ–≤–µ–ª–∏):",
            call.message.chat.id,
            call.message.message_id
        )

        state.set(CourierStates.entering_delivery_sum)

    except Exception as e:
        print(f"Error in proceed_with_delivery: {e}")
        bot.answer_callback_query(call.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –∫ –≤–≤–æ–¥—É —Å—É–º–º—ã")


@bot.message_handler(state=CourierStates.entering_delivery_sum)
def handle_delivery_sum(message: Message, state: StateContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Å—É–º–º—ã –¥–æ—Å—Ç–∞–≤–∫–∏"""
    if not is_valid_command(message.text, state): return
    try:
        delivery_sum = float(message.text)

        # with state.data() as data:
        #     order_id = data.get('current_order_id')
        # data['delivery_sum'] = delivery_sum
        state.add_data(delivery_sum=delivery_sum)

        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip"))

        bot.send_message(
            message.chat.id,
            "–í–≤–µ–¥–∏—Ç–µ –∑–∞–º–µ—Ç–∫—É –∫ –¥–æ—Å—Ç–∞–≤–∫–µ(–Ω-—Ä, –∫—É–¥–∞ –ø–µ—Ä–µ–≤–µ–ª–∏):",
            reply_markup=markup
        )

        state.set(CourierStates.entering_delivery_note)

    except ValueError:
        bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É —á–∏—Å–ª–æ–º")
    except Exception as e:
        print(f"Error in handle_delivery_sum: {e}")
        bot.reply_to(message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å—É–º–º—ã")

@bot.callback_query_handler(state=CourierStates.entering_delivery_note, func=lambda call: call.data == 'skip')
def skip_delivery_note(call: CallbackQuery, state: StateContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–ø—É—Å–∫–∞ –∑–∞–º–µ—Ç–∫–∏"""
    if not is_valid_command(call.message.text, state): return

    process_delivery_completion(call.message.json['chat']['username'],call.message.chat.id, None, state)
    bot.delete_message(call.message.chat.id, call.message.message_id)

@bot.message_handler(state=CourierStates.entering_delivery_note)
def handle_delivery_note(message: Message, state: StateContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∑–∞–º–µ—Ç–∫–∏"""
    if not is_valid_command(message.text, state): return
    delivery_note = message.text.strip()
    process_delivery_completion(message.from_user.username,message.chat.id, delivery_note, state)


def process_delivery_completion(username: str, chat_id: int, delivery_note: str | None, state: StateContext):
    """–û–±—â–∞—è –ª–æ–≥–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–æ—Å—Ç–∞–≤–∫–∏"""
    try:
        with state.data() as data:
            order_id = data.get('current_order_id')
            delivery_sum = data.get('delivery_sum')
            delivered_items = data.get('delivered_items', {}).get(order_id, [])

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å—ã –∑–∞–∫–∞–∑–∞ –∏ —Ç–æ–≤–∞—Ä—ã
        order = get_order_by_id(int(order_id))

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É–º–º—É –¥–æ—Å—Ç–∞–≤–∫–∏
        current_delivery_sum = order.get('delivery_sum', 0)
        update_order_delivery_sum(int(order_id), current_delivery_sum + delivery_sum)

        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–º–µ—Ç–∫—É –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
        if delivery_note:
            update_order_delivery_note(int(order_id), delivery_note)

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å—ã —Ç–æ–≤–∞—Ä–æ–≤ –∏ trip_items
        all_items = trip_manager.get_trip_items_for_order(int(order_id), trip_status=['pending'], courier_trip_status=['created'])
        delivered_products = []
        returned_products = []
        deliver_or_returned_ids = []


        for item in all_items:
            if item['id'] in delivered_items:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç–æ–≤–∞—Ä–∞ –≤ order_items
                update_order_item_status(item['order_item_id'], OrderType.CLOSED.value)
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏ –≤ trip_items
                # with get_connection() as conn:
                #     with conn.cursor() as cursor:
                #         cursor.execute("""
                #             UPDATE trip_items
                #             SET status = 'delivered', delivered_at = %s
                #             WHERE order_item_id = %s
                #         """, (current_time, item['order_item_id']))
                update_trip_item('delivered',item['order_item_id'])
                delivered_products.append(f"‚Ä¢ {item['product_name']} - {item.get('param_title', '')}")
            else:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç–æ–≤–∞—Ä–∞ –≤ order_items
                update_order_item_status(item['order_item_id'], OrderType.REFUND.value)
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ trip_items –Ω–∞ refunded
                update_trip_item('refunded', item['order_item_id'])
                # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—Ç–æ–∫ –¥–ª—è –≤–æ–∑–≤—Ä–∞—â–µ–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
                increment_stock(item['product_param_id'])
                returned_products.append(f"‚Ä¢ {item['product_name']} - {item.get('param_title', '')}")
            deliver_or_returned_ids.append(item['order_item_id'])


        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Å—Ç–∞–ª–∏—Å—å –ª–∏ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã
        remaining_items_for_order = trip_manager.get_items_for_order_in_ride(int(order_id), status=OrderType.READY_TO_DELIVERY.value)
        if not remaining_items_for_order:
            update_order_status(int(order_id), OrderType.CLOSED.value, with_order_items=False)
        else:
            update_order_status(int(order_id), OrderType.PARTLY_DELIVERED.value, with_order_items=False)

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –¥–æ—Å—Ç–∞–≤–∫–µ
        courier_info = get_user_by_username(username, state)
        delivery_message = (
            f"üì¶ –ó–∞–∫–∞–∑ #{str(order_id).zfill(4)}„Ö§\n"
            f"üìç –ê–¥—Ä–µ—Å: {order.get('delivery_address', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n\n"
            f" –°—É–º–º–∞ –¥–æ—Å—Ç–∞–≤–∫–∏: {delivery_sum}\n"
            f" –ó–∞–º–µ—Ç–∫–∞ –æ—Ç –∫—É—Ä—å–µ—Ä–∞: {delivery_note}\n\n"
        )

        if delivered_products:
            delivery_message += "‚úÖ –î–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã:\n" + "\n".join(delivered_products) + "\n\n"

        if returned_products:
            delivery_message += "‚Ü©Ô∏è –í–æ–∑–≤—Ä–∞—Ç:\n" + "\n".join(returned_products) + "\n\n"

        delivery_message += f"üöö –ö—É—Ä—å–µ—Ä: {courier_info['name']} ({courier_info['username']})"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å—Ç–∞–ª–∏—Å—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã –≤ –ø–æ–µ–∑–¥–∫–µ
        active_trip = trip_manager.get_courier_active_trips(courier_info['id'])[0]

        # –§–∏–ª—å—Ç—Ä—É–µ–º items –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
        remaining_trip_items = trip_manager.get_trip_items(active_trip['id'])

        markup = types.InlineKeyboardMarkup()

        if not remaining_trip_items:
            # –ï—Å–ª–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –±–æ–ª—å—à–µ –Ω–µ—Ç, –∑–∞–≤–µ—Ä—à–∞–µ–º –ø–æ–µ–∑–¥–∫—É
            trip_manager.update_trip_status(active_trip['id'], 'completed')
            delivery_message += "\n\n‚úÖ –ü–æ–µ–∑–¥–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
            markup.add(types.InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data='back_to_courier_menu'))
        else:
            markup.add(types.InlineKeyboardButton("–¢–µ–∫—É—â–∞—è –ø–æ–µ–∑–¥–∫–∞", callback_data=f"show_current_trip"))
            markup.add(types.InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data='back_to_courier_menu'))

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        bot.send_message(chat_id, delivery_message,reply_markup=markup)
        bot.send_message(
            CHANNEL_CHAT_ID,
            delivery_message,
            reply_to_message_id=order.get('message_id'),
        )

        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è
        delete_multiple_states(state, ['delivered_items', 'current_order_id', 'delivery_sum'])

    except Exception as e:
        print(f"Error in process_delivery_completion: {e}")
        bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–æ—Å—Ç–∞–≤–∫–∏")


@bot.callback_query_handler(func=lambda call: call.data == "close_trip")
def close_trip(call: CallbackQuery, state: StateContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–µ–∑–¥–∫–∏"""
    try:
        courier_info = get_user_info(call.from_user.username)
        trip = trip_manager.get_courier_active_trips(courier_info['id'])[0]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—Å–µ –ª–∏ –∑–∞–∫–∞–∑—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã
        trip_items = trip_manager.get_trip_items(trip['id'])
        all_completed = all(
            item['status'] in [OrderType.CLOSED.value, OrderType.PARTIALLY_CLOSED.value, OrderType.REFUND.value]
            for item in trip_items)

        if not all_completed:
            bot.answer_callback_query(call.id, "–ù–µ–ª—å–∑—è –∑–∞–∫—Ä—ã—Ç—å –ø–æ–µ–∑–¥–∫—É, –ø–æ–∫–∞ –µ—Å—Ç—å –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã")
            return

        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ–µ–∑–¥–∫—É
        trip_manager.update_trip_status(trip['id'], 'completed')

        bot.edit_message_text(
            "‚úÖ –ü–æ–µ–∑–¥–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞",
            call.message.chat.id,
            call.message.message_id,
            reply_markup=types.InlineKeyboardMarkup().add(
                types.InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_courier_menu")
            )
        )

    except Exception as e:
        print(f"Error in close_trip: {e}")
        bot.answer_callback_query(call.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø–æ–µ–∑–¥–∫–∏")


@bot.callback_query_handler(func=lambda call: call.data == "cancel_trip")
def cancel_trip(call: CallbackQuery, state: StateContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –ø–æ–µ–∑–¥–∫–∏"""
    try:
        courier_info = get_user_info(call.from_user.username)
        trip = trip_manager.get_courier_active_trips(courier_info['id'])[0]

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ –ø–æ–µ–∑–¥–∫–∏
        all_trip_items = trip_manager.get_trip_items(trip['id'])

        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ pending —Ç–æ–≤–∞—Ä—ã
        pending_items = [item for item in all_trip_items if item['trip_item_status'] == 'pending']

        # –°–æ–±–∏—Ä–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ order_id –∏–∑ pending —Ç–æ–≤–∞—Ä–æ–≤
        order_ids = set(item['order_id'] for item in pending_items)

        # –û—Ç–º–µ–Ω—è–µ–º –ø–æ–µ–∑–¥–∫—É
        trip_manager.update_trip_status(trip['id'], 'cancelled')

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –∑–∞–∫–∞–∑
        for order_id in order_ids:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –¥–∞–Ω–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞ –∏–∑ –ø–æ–µ–∑–¥–∫–∏
            order_items = [item for item in all_trip_items if item['order_id'] == order_id]

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –≤ –∑–∞–∫–∞–∑–µ
            has_delivered = any(item['trip_item_status'] != 'pending' for item in order_items)

            # –ï—Å–ª–∏ –µ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã, –º–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –Ω–∞ partly_delivered
            if has_delivered:
                update_order_status(order_id, OrderType.PARTLY_DELIVERED.value,with_order_items=False)
            else:
                update_order_status(order_id, OrderType.READY_TO_DELIVERY.value, with_order_items=False)

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ pending —Ç–æ–≤–∞—Ä—ã –≤ —Å—Ç–∞—Ç—É—Å ready_to_delivery
        for item in pending_items:
            update_order_item_status(item['order_item_id'], OrderType.READY_TO_DELIVERY.value)

        bot.edit_message_text(
            "‚ùå –ü–æ–µ–∑–¥–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞, —Ç–æ–≤–∞—Ä—ã –≤–Ω–æ–≤—å –≥–æ—Ç–æ–≤—ã –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ",
            call.message.chat.id,
            call.message.message_id,
            reply_markup=types.InlineKeyboardMarkup().add(
                types.InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_courier_menu")
            )
        )
        delete_multiple_states(state, ['delivered_items', 'current_order_id', 'delivery_sum'])


    except Exception as e:
        print(f"Error in cancel_trip: {e}")
        bot.answer_callback_query(call.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –ø–æ–µ–∑–¥–∫–∏")
