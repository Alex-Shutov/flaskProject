from telebot import types
from telebot.types import CallbackQuery, ReplyParameters, Message
from telebot.states.sync.context import StateContext
from bot import bot
from config import CHANNEL_CHAT_ID
from database import (
    get_couriers,
    update_order_status,
    get_user_info,
    update_order_courier,
    update_order_invoice_photo,
    get_orders,
    get_order_by_id,
    decrement_stock
)
from app_types import OrderType, UserRole
from utils import format_order_message, create_media_group, extract_order_number
from middlewares.delivery_zones import (
    DeliveryZoneManager,
    DeliveryCostCalculator,
    CourierTripManager
)
from states import AppStates, CourierStates

from database import get_avito_photos

from database import get_delivery_zone_for_order

from database import get_courier_trips
from utils import validate_date_range

from app_types import TripStatusRu, OrderTypeRu


def notify_couriers(order_message, state: StateContext,avito_photos=None, reply_message_id=None,):
    """–£–≤–µ–¥–æ–º–ª—è–µ—Ç –≤—Å–µ—Ö –∫—É—Ä—å–µ—Ä–æ–≤ –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫—É—Ä—å–µ—Ä–æ–≤
        couriers = get_couriers()

        for courier in couriers:
            markup = types.InlineKeyboardMarkup()
            markup.add(
                types.InlineKeyboardButton(
                    "üì¶ –ü—Ä–∏–Ω—è—Ç—å –∑–∞–∫–∞–∑",
                    callback_data=f"accept_order_{extract_order_number(order_message)}_{reply_message_id}"
                )
            )

            # –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–æ—Ç–æ (–¥–ª—è –ê–≤–∏—Ç–æ), –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ö
            if avito_photos:
                media_group = create_media_group(avito_photos, order_message)
                bot.send_media_group(courier['telegram_id'], media=media_group)
                bot.send_message(
                    courier['telegram_id'],
                    "–ï—Å–ª–∏ –≤—ã –≥–æ—Ç–æ–≤—ã –ø—Ä–∏–Ω—è—Ç—å –∑–∞–∫–∞–∑, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
                    reply_markup=markup
                )
            else:
                # –ï—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ—Ç, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π
                bot.send_message(
                    courier['telegram_id'],
                    f"{order_message}\n\n–ï—Å–ª–∏ –≤—ã –≥–æ—Ç–æ–≤—ã –ø—Ä–∏–Ω—è—Ç—å –∑–∞–∫–∞–∑, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
                    reply_markup=markup
                )

    except Exception as e:
        print(f"Error in notify_couriers: {e}")

@bot.callback_query_handler(func=lambda call: call.data == 'orders_delivery', state=AppStates.picked_action)
def handle_orders_delivery(call: CallbackQuery, state: StateContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ '–î–æ—Å—Ç–∞–≤–∫–∞ —Ç–æ–≤–∞—Ä–∞'"""
    markup = types.InlineKeyboardMarkup()
    markup.add(
        types.InlineKeyboardButton("üìã –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã", callback_data='orders_show_active'),
        types.InlineKeyboardButton("üöö –ú–æ–∏ –∑–∞–∫–∞–∑—ã –≤ –¥–æ—Å—Ç–∞–≤–∫–µ", callback_data='orders_show_in_delivery')
    )
    bot.edit_message_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–∫–∞–∑–æ–≤:",
        call.message.chat.id,
        call.message.message_id,
        reply_markup=markup
    )
    state.set(CourierStates.orders)


@bot.message_handler(func=lambda message: message.text == '#–î–æ—Å—Ç–∞–≤–∫–∞')
def show_courier_menu(message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∫—É—Ä—å–µ—Ä–∞"""
    try:
        user_info = get_user_info(message.from_user.username)
        if not user_info or UserRole.COURIER.value not in user_info['roles']:
            bot.reply_to(message, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º –∫—É—Ä—å–µ—Ä–∞.")
            return

        markup = types.InlineKeyboardMarkup(row_width=1)
        markup.add(
            types.InlineKeyboardButton("üöó –°–æ–∑–¥–∞—Ç—å –ø–æ–µ–∑–¥–∫—É", callback_data="create_trip"),
            types.InlineKeyboardButton("üìã –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã", callback_data="show_active_orders"),
            types.InlineKeyboardButton("üöö –¢–µ–∫—É—â–∞—è –ø–æ–µ–∑–¥–∫–∞", callback_data="show_current_trip"),
            types.InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ—Å—Ç–∞–≤–æ–∫", callback_data="delivery_stats")
        )

        bot.reply_to(
            message,
            "üöö –ú–µ–Ω—é –∫—É—Ä—å–µ—Ä–∞\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=markup
        )

    except Exception as e:
        bot.reply_to(message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ–Ω—é –∫—É—Ä—å–µ—Ä–∞.")
        print(f"Error in show_courier_menu: {e}")


@bot.callback_query_handler(func=lambda call: call.data == "show_active_orders")
def show_active_orders(call: CallbackQuery, state: StateContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã, –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏"""
    try:
        orders = get_orders(
            order_type=['avito', 'delivery'],
            status=[OrderType.READY_TO_DELIVERY.value],
            is_courier_null=True
        )

        if not orders:
            bot.answer_callback_query(call.id, "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤")
            bot.edit_message_text(
                "–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏.",
                call.message.chat.id,
                call.message.message_id
            )
            return

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        bot.edit_message_text(
            "üì¶ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–∫–∞–∑—ã:",
            call.message.chat.id,
            call.message.message_id
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π –∑–∞–∫–∞–∑ –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
        for order in orders:
            try:
                # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∑–∞–∫–∞–∑–∞
                markup = types.InlineKeyboardMarkup(row_width=1)
                button_text = (
                    f"üì¶ –ü—Ä–∏–Ω—è—Ç—å –∑–∞–∫–∞–∑ #{order['id']}"
                    if order['order_type'] == 'delivery'
                    else f"üì¶ –ü—Ä–∏–Ω—è—Ç—å –∑–∞–∫–∞–∑ #{order['id']} (–ê–≤–∏—Ç–æ)"
                )
                markup.add(
                    types.InlineKeyboardButton(
                        button_text,
                        callback_data=f"accept_order_{order['id']}_{order['message_id']}"
                    )
                )

                # –ü–æ–ª—É—á–∞–µ–º –∑–æ–Ω—É –¥–æ—Å—Ç–∞–≤–∫–∏ –¥–ª—è –∑–∞–∫–∞–∑–∞ —Å –¥–æ—Å—Ç–∞–≤–∫–æ–π
                delivery_zone = None
                if order['order_type'] == 'delivery':
                    # –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏—é –ø–æ–ª—É—á–µ–Ω–∏—è –∑–æ–Ω—ã –¥–æ—Å—Ç–∞–≤–∫–∏
                    delivery_zone = get_delivery_zone_for_order(order['id'])

                # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤
                products_for_message = []
                if order['order_type'] == 'avito':
                    # –î–ª—è –ê–≤–∏—Ç–æ –æ—Å—Ç–∞–≤–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
                    products_for_message = order['products']
                else:
                    # –î–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É no_track
                    no_track_products = order['products'].get('no_track', {}).get('products', [])
                    for product in no_track_products:
                        products_for_message.append({
                            'product_name': product['name'],
                            'param_title': product['param'],
                            'is_main_product': product.get('is_main_product', False)
                        })
                print(delivery_zone,'123')
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–∫–∞–∑–µ
                order_info = format_order_message(
                    order_id=order['id'],
                    product_list=products_for_message,
                    gift=order['gift'],
                    note=order['note'],
                    sale_type=order['order_type'],
                    manager_name=order.get('manager_name', '–ù–µ —É–∫–∞–∑–∞–Ω'),
                    manager_username=order.get('manager_username', '–ù–µ —É–∫–∞–∑–∞–Ω'),
                    delivery_date=order.get('delivery_date'),
                    delivery_time=order.get('delivery_time'),
                    delivery_address=order.get('delivery_address'),
                    contact_phone=order.get('contact_phone'),
                    contact_name=order.get('contact_name'),
                    zone_name=delivery_zone.get('name') if delivery_zone else None,
                    total_price=order.get('total_price'),
                    avito_boxes=order.get('avito_boxes'),
                    hide_track_prices=True,
                    show_item_status=True
                )

                if order['order_type'] == 'avito':
                    # –ü–æ–ª—É—á–∞–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –¥–ª—è –∑–∞–∫–∞–∑–æ–≤ –ê–≤–∏—Ç–æ
                    photos = get_avito_photos(order['id'])
                    if photos:
                        try:
                            media = create_media_group(photos, order_info)
                            bot.send_media_group(call.message.chat.id, media)
                            bot.send_message(
                                call.message.chat.id,
                                "–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–Ω—è—Ç—å —ç—Ç–æ—Ç –∑–∞–∫–∞–∑, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
                                reply_markup=markup
                            )
                        except Exception as photo_error:
                            print(f"Error sending photos for order {order['id']}: {str(photo_error)}")
                            bot.send_message(
                                call.message.chat.id,
                                order_info,
                                reply_markup=markup
                            )
                else:
                    bot.send_message(
                        call.message.chat.id,
                        order_info,
                        reply_markup=markup
                    )

            except Exception as order_error:
                print(f"Error processing order {order['id']}: {str(order_error)}")
                continue

        markup = types.InlineKeyboardMarkup()
        markup.add(
            types.InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_courier_menu")
        )
        bot.send_message(
            call.message.chat.id,
            "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–∫–∞–∑ –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é:",
            reply_markup=markup
        )

    except Exception as e:
        error_message = f"Error in show_active_orders: {str(e)}"
        print(error_message)
        try:
            bot.answer_callback_query(call.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–∫–∞–∑–æ–≤")
            bot.send_message(
                call.message.chat.id,
                "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
        except:
            print("Failed to send error message to user")

@bot.callback_query_handler(func=lambda call: call.data == "show_my_trips")
def show_courier_trips(call: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–µ–∑–¥–∫–∏ –∫—É—Ä—å–µ—Ä–∞"""
    try:
        user_info = get_user_info(call.from_user.username)
        if not user_info:
            bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ")
            return

        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑—ã –∫—É—Ä—å–µ—Ä–∞ –≤ –¥–æ—Å—Ç–∞–≤–∫–µ
        orders = get_orders(
            username=call.from_user.username,
            status=['in_delivery'],
            role='courier'
        )

        if not orders:
            bot.answer_callback_query(call.id)
            bot.edit_message_text(
                "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–µ–∑–¥–æ–∫.",
                call.message.chat.id,
                call.message.message_id,
                reply_markup=types.InlineKeyboardMarkup().add(
                    types.InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_courier_menu")
                )
            )
            return

        message_text = "üöö –í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–µ–∑–¥–∫–∏:\n\n"
        markup = types.InlineKeyboardMarkup(row_width=1)

        for order in orders:
            order_text = format_order_message(
                order_id=order['id'],
                product_list=order['products'].get('general', []),
                gift=order['gift'],
                note=order['note'],
                sale_type=order['order_type'],
                delivery_date=order.get('delivery_date'),
                delivery_time=order.get('delivery_time'),
                delivery_address=order.get('delivery_address'),
                contact_phone=order.get('contact_phone'),
                contact_name=order.get('contact_name'),
                hide_track_prices=True
            )
            message_text += f"{order_text}\n{'‚Äî' * 30}\n"

            markup.add(
                types.InlineKeyboardButton(
                    f"‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–æ—Å—Ç–∞–≤–∫—É #{order['id']}",
                    callback_data=f"complete_delivery_{order['id']}_{order['message_id']}"
                )
            )

        markup.add(
            types.InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_courier_menu")
        )

        bot.edit_message_text(
            message_text,
            call.message.chat.id,
            call.message.message_id,
            reply_markup=markup
        )

    except Exception as e:
        bot.answer_callback_query(call.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ–µ–∑–¥–æ–∫")
        print(f"Error in show_courier_trips: {e}")


@bot.callback_query_handler(func=lambda call: call.data.startswith('accept_order_'))
def accept_order(call: CallbackQuery, state: StateContext):
    """–ü—Ä–∏–Ω—è—Ç–∏–µ –∑–∞–∫–∞–∑–∞ –∫—É—Ä—å–µ—Ä–æ–º"""
    try:
        order_id = call.data.split('_')[2]
        reply_message_id = call.data.split('_')[3]

        user_info = get_user_info(call.from_user.username)
        if not user_info:
            bot.answer_callback_query(call.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫—É—Ä—å–µ—Ä–µ.")
            return

        # –°–Ω–∏–∂–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ —Å–∫–ª–∞–¥–µ
        # decrement_stock(order_id=order_id)

        # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∑–∞–∫–∞–∑ –∫ –∫—É—Ä—å–µ—Ä—É –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        update_order_courier(order_id, user_info['id'])
        update_order_status(order_id, OrderType.READY_TO_DELIVERY.value)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫—É—Ä—å–µ—Ä—É
        bot.edit_message_text(
            f"‚úÖ –í—ã –ø—Ä–∏–Ω—è–ª–∏ –∑–∞–∫–∞–∑ #{order_id}\n\n"
            f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ–≥–æ –≤ –ø–æ–µ–∑–¥–∫—É",
            call.message.chat.id,
            call.message.message_id,
            reply_markup=types.InlineKeyboardMarkup().add(
                types.InlineKeyboardButton("üöö –°–æ–∑–¥–∞—Ç—å –ø–æ–µ–∑–¥–∫—É", callback_data="create_trip")
            )
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–∞–Ω–∞–ª
        reply_params = ReplyParameters(message_id=int(reply_message_id))
        bot.send_message(
            CHANNEL_CHAT_ID,
            f"üöö –ó–∞–∫–∞–∑ #{order_id} –ø—Ä–∏–Ω—è—Ç –≤ –¥–æ—Å—Ç–∞–≤–∫—É\n"
            f"–ö—É—Ä—å–µ—Ä: {user_info['name']} (@{user_info['username']})",
            reply_parameters=reply_params
        )

    except Exception as e:
        bot.answer_callback_query(call.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏ –∑–∞–∫–∞–∑–∞")
        print(f"Error in accept_order: {e}")


@bot.callback_query_handler(func=lambda call: call.data == "delivery_stats")
def show_delivery_stats(call: CallbackQuery):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–µ—Ä–∏–æ–¥ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–æ—Å—Ç–∞–≤–æ–∫"""
    bot.edit_message_text(
        "–í–≤–µ–¥–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–æ—Å—Ç–∞–≤–æ–∫ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "–¥–µ–Ω—å.–º–µ—Å—è—Ü.–≥–æ–¥-–¥–µ–Ω—å.–º–µ—Å—è—Ü.–≥–æ–¥\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: 01.01.2024-31.01.2024",
        chat_id=call.message.chat.id,
        message_id=call.message.message_id
    )
    bot.register_next_step_handler(call.message, process_delivery_stats_dates)


def process_delivery_stats_dates(message: types.Message):
    dates = validate_date_range(message.text)
    if not dates:
        bot.reply_to(message, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    start_date, end_date = dates
    trips = get_courier_trips(
        courier_username=message.from_user.username,
        start_date=start_date.strftime("%Y-%m-%d"),
        end_date=end_date.strftime("%Y-%m-%d")
    )

    if not trips:
        bot.reply_to(message, "–ó–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –ø–æ–µ–∑–¥–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é –ø–æ–µ–∑–¥–∫—É –æ—Ç–¥–µ–ª—å–Ω–æ
    for trip in trips:
        if trip['status'] != 'completed':
            continue

        trip_message = [
            f"üöö –ü–æ–µ–∑–¥–∫–∞ #{str(trip['id']).zfill(4)}",
            f"üìÖ –î–∞—Ç–∞: {trip['created_at'].strftime('%d.%m.%Y')}",
            f"üìä –°—Ç–∞—Ç—É—Å: {TripStatusRu[trip['status'].upper()].value}\n"
        ]

        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ç–æ–≤–∞—Ä—ã –ø–æ –∑–∞–∫–∞–∑–∞–º
        orders = {}
        for item in trip['items']:
            order_id = item['order_id']
            if order_id not in orders:
                orders[order_id] = {
                    'type': item['order_type'],
                    'address': item['delivery_address'],
                    'delivered_items': [],
                    'returned_items': [],
                    'pending_items': [],
                    'tracking_numbers': set()
                }

            # –î–ª—è –ê–≤–∏—Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä
            if item['order_type'] == 'avito' and item['product'].get('tracking_number'):
                orders[order_id]['tracking_numbers'].add(item['product']['tracking_number'])

            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Å–ø–∏—Å–æ–∫ —Å —É—á–µ—Ç–æ–º —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–∑–∏—Ü–∏–∏
            try:
                status_text = OrderTypeRu[item['item_status'].upper()].value
            except KeyError:
                status_text = item['item_status']

            product_info = f"- {item['product']['name']} {item['product']['param_title']} ({status_text})"

            if item['item_status'] == 'closed':
                orders[order_id]['delivered_items'].append(product_info)
            elif item['item_status'] == 'refund':
                orders[order_id]['returned_items'].append(product_info)
            else:
                orders[order_id]['pending_items'].append(product_info)

        # –í—ã–≤–æ–¥–∏–º –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã
        delivered_orders = [order for order in orders.items() if order[1]['delivered_items']]
        if delivered_orders:
            trip_message.append("‚úÖ –î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ:")
            for order_id, order_info in delivered_orders:
                trip_message.append(f"\nüì¶ –ó–∞–∫–∞–∑ #{str(order_id).zfill(4)}")
                if order_info['type'] == 'avito':
                    trip_message.append("üìç –ê–≤–∏—Ç–æ")
                    for track in sorted(order_info['tracking_numbers']):
                        trip_message.append(f"üìù –¢—Ä–µ–∫-–Ω–æ–º–µ—Ä: {track}")
                else:
                    trip_message.append(f"üìç {order_info['address'] or '–ê–¥—Ä–µ—Å –Ω–µ —É–∫–∞–∑–∞–Ω'}")
                trip_message.extend(order_info['delivered_items'])

        # –í—ã–≤–æ–¥–∏–º –≤–æ–∑–≤—Ä–∞—â–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã
        returned_orders = [order for order in orders.items() if order[1]['returned_items']]
        if returned_orders:
            trip_message.append("\n‚ùå –í–æ–∑–≤—Ä–∞—â–µ–Ω–æ:")
            for order_id, order_info in returned_orders:
                trip_message.append(f"\nüì¶ –ó–∞–∫–∞–∑ #{str(order_id).zfill(4)}")
                if order_info['type'] == 'avito':
                    trip_message.append("üìç –ê–≤–∏—Ç–æ")
                    for track in sorted(order_info['tracking_numbers']):
                        trip_message.append(f"üìù –¢—Ä–µ–∫-–Ω–æ–º–µ—Ä: {track}")
                else:
                    trip_message.append(f"üìç {order_info['address'] or '–ê–¥—Ä–µ—Å –Ω–µ —É–∫–∞–∑–∞–Ω'}")
                trip_message.extend(order_info['returned_items'])

        # –í—ã–≤–æ–¥–∏–º –æ–∂–∏–¥–∞—é—â–∏–µ —Ç–æ–≤–∞—Ä—ã
        pending_orders = [order for order in orders.items() if order[1]['pending_items']]
        if pending_orders:
            trip_message.append("\n‚è≥ –í –æ–∂–∏–¥–∞–Ω–∏–∏:")
            for order_id, order_info in pending_orders:
                trip_message.append(f"\nüì¶ –ó–∞–∫–∞–∑ #{str(order_id).zfill(4)}")
                if order_info['type'] == 'avito':
                    trip_message.append("üìç –ê–≤–∏—Ç–æ")
                    for track in sorted(order_info['tracking_numbers']):
                        trip_message.append(f"üìù –¢—Ä–µ–∫-–Ω–æ–º–µ—Ä: {track}")
                else:
                    trip_message.append(f"üìç {order_info['address'] or '–ê–¥—Ä–µ—Å –Ω–µ —É–∫–∞–∑–∞–Ω'}")
                trip_message.extend(order_info['pending_items'])

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–µ–∑–¥–∫–∏
        bot.send_message(message.chat.id, '\n'.join(trip_message))

@bot.callback_query_handler(func=lambda call: call.data == "back_to_courier_menu")
def back_to_menu(call: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∫—É—Ä—å–µ—Ä–∞"""
    try:
        markup = types.InlineKeyboardMarkup(row_width=1)
        markup.add(
            types.InlineKeyboardButton("üöó –°–æ–∑–¥–∞—Ç—å –ø–æ–µ–∑–¥–∫—É", callback_data="create_trip"),
            types.InlineKeyboardButton("üìã –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã", callback_data="show_active_orders"),
            types.InlineKeyboardButton("üöö –¢–µ–∫—É—â–∞—è –ø–æ–µ–∑–¥–∫–∞", callback_data="show_current_trip"),
            types.InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ—Å—Ç–∞–≤–æ–∫", callback_data="delivery_stats")
        )

        bot.edit_message_text(
            "üöö –ú–µ–Ω—é –∫—É—Ä—å–µ—Ä–∞\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            call.message.chat.id,
            call.message.message_id,
            reply_markup=markup
        )

    except Exception as e:
        bot.answer_callback_query(call.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –º–µ–Ω—é")
        print(f"Error in back_to_menu: {e}")