from telebot import types
from telebot.types import CallbackQuery, ReplyParameters, Message
from telebot.states.sync.context import StateContext
from bot import bot
from config import CHANNEL_CHAT_ID
from database import (
    get_couriers,
    update_order_status,
    get_user_info,
    update_order_courier,
    update_order_invoice_photo,
    get_orders,
    get_order_by_id,
    decrement_stock
)
from app_types import OrderType, UserRole
from utils import format_order_message, create_media_group, extract_order_number
from middlewares.delivery_zones import (
    DeliveryZoneManager,
    DeliveryCostCalculator,
    CourierTripManager
)
from states import AppStates, CourierStates


def notify_couriers(order_message, avito_photos=None, reply_message_id=None, state: StateContext = None):
    """–£–≤–µ–¥–æ–º–ª—è–µ—Ç –≤—Å–µ—Ö –∫—É—Ä—å–µ—Ä–æ–≤ –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫—É—Ä—å–µ—Ä–æ–≤
        couriers = get_couriers()

        for courier in couriers:
            markup = types.InlineKeyboardMarkup()
            markup.add(
                types.InlineKeyboardButton(
                    "üì¶ –ü—Ä–∏–Ω—è—Ç—å –∑–∞–∫–∞–∑",
                    callback_data=f"accept_order_{extract_order_number(order_message)}_{reply_message_id}"
                )
            )

            # –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–æ—Ç–æ (–¥–ª—è –ê–≤–∏—Ç–æ), –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ö
            if avito_photos:
                media_group = create_media_group(avito_photos, order_message)
                bot.send_media_group(courier['telegram_id'], media=media_group)
                bot.send_message(
                    courier['telegram_id'],
                    "–ï—Å–ª–∏ –≤—ã –≥–æ—Ç–æ–≤—ã –ø—Ä–∏–Ω—è—Ç—å –∑–∞–∫–∞–∑, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
                    reply_markup=markup
                )
            else:
                # –ï—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ—Ç, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π
                bot.send_message(
                    courier['telegram_id'],
                    f"{order_message}\n\n–ï—Å–ª–∏ –≤—ã –≥–æ—Ç–æ–≤—ã –ø—Ä–∏–Ω—è—Ç—å –∑–∞–∫–∞–∑, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
                    reply_markup=markup
                )

    except Exception as e:
        print(f"Error in notify_couriers: {e}")

@bot.callback_query_handler(func=lambda call: call.data == 'orders_delivery', state=AppStates.picked_action)
def handle_orders_delivery(call: CallbackQuery, state: StateContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ '–î–æ—Å—Ç–∞–≤–∫–∞ —Ç–æ–≤–∞—Ä–∞'"""
    markup = types.InlineKeyboardMarkup()
    markup.add(
        types.InlineKeyboardButton("üìã –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã", callback_data='orders_show_active'),
        types.InlineKeyboardButton("üöö –ú–æ–∏ –∑–∞–∫–∞–∑—ã –≤ –¥–æ—Å—Ç–∞–≤–∫–µ", callback_data='orders_show_in_delivery')
    )
    bot.edit_message_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–∫–∞–∑–æ–≤:",
        call.message.chat.id,
        call.message.message_id,
        reply_markup=markup
    )
    state.set(CourierStates.orders)


@bot.message_handler(func=lambda message: message.text == '#–î–æ—Å—Ç–∞–≤–∫–∞')
def show_courier_menu(message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∫—É—Ä—å–µ—Ä–∞"""
    try:
        user_info = get_user_info(message.from_user.username)
        if not user_info or UserRole.COURIER.value not in user_info['roles']:
            bot.reply_to(message, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º –∫—É—Ä—å–µ—Ä–∞.")
            return

        markup = types.InlineKeyboardMarkup(row_width=1)
        markup.add(
            types.InlineKeyboardButton("üöó –°–æ–∑–¥–∞—Ç—å –ø–æ–µ–∑–¥–∫—É", callback_data="create_trip"),
            types.InlineKeyboardButton("üìã –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã", callback_data="show_active_orders"),
            types.InlineKeyboardButton("üöö –ú–æ–∏ –ø–æ–µ–∑–¥–∫–∏", callback_data="show_my_trips"),
            types.InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ—Å—Ç–∞–≤–æ–∫", callback_data="delivery_stats")
        )

        bot.reply_to(
            message,
            "üöö –ú–µ–Ω—é –∫—É—Ä—å–µ—Ä–∞\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=markup
        )

    except Exception as e:
        bot.reply_to(message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ–Ω—é –∫—É—Ä—å–µ—Ä–∞.")
        print(f"Error in show_courier_menu: {e}")


@bot.callback_query_handler(func=lambda call: call.data == "show_active_orders")
def show_active_orders(call: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã, –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏"""
    try:
        orders = get_orders(
            order_type=['avito', 'delivery'],
            status=[OrderType.READY_TO_DELIVERY.value],
            is_courier_null=True
        )

        if not orders:
            bot.answer_callback_query(call.id, "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤")
            bot.edit_message_text(
                "–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏.",
                call.message.chat.id,
                call.message.message_id
            )
            return

        # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –∑–∞–∫–∞–∑–æ–≤
        message_text = "üì¶ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–∫–∞–∑—ã:\n\n"
        markup = types.InlineKeyboardMarkup(row_width=1)

        for order in orders:
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ
            order_info = format_order_message(
                order_id=order['id'],
                product_list=order['products'].get('general', []),
                gift=order['gift'],
                note=order['note'],
                sale_type=order['order_type'],
                delivery_date=order.get('delivery_date'),
                delivery_time=order.get('delivery_time'),
                delivery_address=order.get('delivery_address'),
                contact_phone=order.get('contact_phone'),
                contact_name=order.get('contact_name'),
                hide_track_prices=True
            )
            message_text += f"{order_info}\n{'‚Äî' * 30}\n"

            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–∫–∞–∑–∞
            markup.add(
                types.InlineKeyboardButton(
                    f"üì¶ –ü—Ä–∏–Ω—è—Ç—å –∑–∞–∫–∞–∑ #{order['id']}",
                    callback_data=f"accept_order_{order['id']}_{order['message_id']}"
                )
            )

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é
        markup.add(
            types.InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_courier_menu")
        )

        bot.edit_message_text(
            message_text,
            call.message.chat.id,
            call.message.message_id,
            reply_markup=markup
        )

    except Exception as e:
        bot.answer_callback_query(call.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–∫–∞–∑–æ–≤")
        print(f"Error in show_active_orders: {e}")


@bot.callback_query_handler(func=lambda call: call.data == "show_my_trips")
def show_courier_trips(call: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–µ–∑–¥–∫–∏ –∫—É—Ä—å–µ—Ä–∞"""
    try:
        user_info = get_user_info(call.from_user.username)
        if not user_info:
            bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ")
            return

        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑—ã –∫—É—Ä—å–µ—Ä–∞ –≤ –¥–æ—Å—Ç–∞–≤–∫–µ
        orders = get_orders(
            username=call.from_user.username,
            status=['in_delivery'],
            role='courier'
        )

        if not orders:
            bot.answer_callback_query(call.id)
            bot.edit_message_text(
                "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–µ–∑–¥–æ–∫.",
                call.message.chat.id,
                call.message.message_id,
                reply_markup=types.InlineKeyboardMarkup().add(
                    types.InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_courier_menu")
                )
            )
            return

        message_text = "üöö –í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–µ–∑–¥–∫–∏:\n\n"
        markup = types.InlineKeyboardMarkup(row_width=1)

        for order in orders:
            order_text = format_order_message(
                order_id=order['id'],
                product_list=order['products'].get('general', []),
                gift=order['gift'],
                note=order['note'],
                sale_type=order['order_type'],
                delivery_date=order.get('delivery_date'),
                delivery_time=order.get('delivery_time'),
                delivery_address=order.get('delivery_address'),
                contact_phone=order.get('contact_phone'),
                contact_name=order.get('contact_name'),
                hide_track_prices=True
            )
            message_text += f"{order_text}\n{'‚Äî' * 30}\n"

            markup.add(
                types.InlineKeyboardButton(
                    f"‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–æ—Å—Ç–∞–≤–∫—É #{order['id']}",
                    callback_data=f"complete_delivery_{order['id']}_{order['message_id']}"
                )
            )

        markup.add(
            types.InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_courier_menu")
        )

        bot.edit_message_text(
            message_text,
            call.message.chat.id,
            call.message.message_id,
            reply_markup=markup
        )

    except Exception as e:
        bot.answer_callback_query(call.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ–µ–∑–¥–æ–∫")
        print(f"Error in show_courier_trips: {e}")


@bot.callback_query_handler(func=lambda call: call.data.startswith('accept_order_'))
def accept_order(call: CallbackQuery, state: StateContext):
    """–ü—Ä–∏–Ω—è—Ç–∏–µ –∑–∞–∫–∞–∑–∞ –∫—É—Ä—å–µ—Ä–æ–º"""
    try:
        order_id = call.data.split('_')[2]
        reply_message_id = call.data.split('_')[3]

        user_info = get_user_info(call.from_user.username)
        if not user_info:
            bot.answer_callback_query(call.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫—É—Ä—å–µ—Ä–µ.")
            return

        # –°–Ω–∏–∂–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ —Å–∫–ª–∞–¥–µ
        decrement_stock(order_id=order_id)

        # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∑–∞–∫–∞–∑ –∫ –∫—É—Ä—å–µ—Ä—É –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        update_order_courier(order_id, user_info['id'])
        update_order_status(order_id, OrderType.IN_DELIVERY.value)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫—É—Ä—å–µ—Ä—É
        bot.edit_message_text(
            f"‚úÖ –í—ã –ø—Ä–∏–Ω—è–ª–∏ –∑–∞–∫–∞–∑ #{order_id}\n\n"
            f"–¢–µ–ø–µ—Ä—å —ç—Ç–æ—Ç –∑–∞–∫–∞–∑ –¥–æ—Å—Ç—É–ø–µ–Ω –≤ —Ä–∞–∑–¥–µ–ª–µ '–ú–æ–∏ –ø–æ–µ–∑–¥–∫–∏'",
            call.message.chat.id,
            call.message.message_id,
            reply_markup=types.InlineKeyboardMarkup().add(
                types.InlineKeyboardButton("üöö –ú–æ–∏ –ø–æ–µ–∑–¥–∫–∏", callback_data="show_my_trips")
            )
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–∞–Ω–∞–ª
        reply_params = ReplyParameters(message_id=int(reply_message_id))
        bot.send_message(
            CHANNEL_CHAT_ID,
            f"üöö –ó–∞–∫–∞–∑ #{order_id} –ø—Ä–∏–Ω—è—Ç –≤ –¥–æ—Å—Ç–∞–≤–∫—É\n"
            f"–ö—É—Ä—å–µ—Ä: {user_info['name']} (@{user_info['username']})",
            reply_parameters=reply_params
        )

    except Exception as e:
        bot.answer_callback_query(call.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏ –∑–∞–∫–∞–∑–∞")
        print(f"Error in accept_order: {e}")


@bot.callback_query_handler(func=lambda call: call.data == "delivery_stats")
def show_delivery_stats(call: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–æ—Å—Ç–∞–≤–æ–∫ –∫—É—Ä—å–µ—Ä–∞"""
    try:
        user_info = get_user_info(call.from_user.username)
        if not user_info:
            bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ")
            return

        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã –∫—É—Ä—å–µ—Ä–∞
        completed_orders = get_orders(
            username=call.from_user.username,
            status=['closed'],
            role='courier'
        )

        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        total_deliveries = len(completed_orders)
        total_items = sum(
            len(order['products'].get('general', []))
            for order in completed_orders
        )

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        stats_message = (
            "üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ—Å—Ç–∞–≤–æ–∫:\n\n"
            f"üì¶ –í—Å–µ–≥–æ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –∑–∞–∫–∞–∑–æ–≤: {total_deliveries}\n"
            f"üéÅ –í—Å–µ–≥–æ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {total_items}\n"
        )

        markup = types.InlineKeyboardMarkup().add(
            types.InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_courier_menu")
        )

        bot.edit_message_text(
            stats_message,
            call.message.chat.id,
            call.message.message_id,
            reply_markup=markup
        )

    except Exception as e:
        bot.answer_callback_query(call.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
        print(f"Error in show_delivery_stats: {e}")


@bot.callback_query_handler(func=lambda call: call.data == "back_to_courier_menu")
def back_to_menu(call: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∫—É—Ä—å–µ—Ä–∞"""
    try:
        markup = types.InlineKeyboardMarkup(row_width=1)
        markup.add(
            types.InlineKeyboardButton("üöó –°–æ–∑–¥–∞—Ç—å –ø–æ–µ–∑–¥–∫—É", callback_data="create_trip"),
            types.InlineKeyboardButton("üìã –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã", callback_data="show_active_orders"),
            types.InlineKeyboardButton("üöö –ú–æ–∏ –ø–æ–µ–∑–¥–∫–∏", callback_data="show_my_trips"),
            types.InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ—Å—Ç–∞–≤–æ–∫", callback_data="delivery_stats")
        )

        bot.edit_message_text(
            "üöö –ú–µ–Ω—é –∫—É—Ä—å–µ—Ä–∞\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            call.message.chat.id,
            call.message.message_id,
            reply_markup=markup
        )

    except Exception as e:
        bot.answer_callback_query(call.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –º–µ–Ω—é")
        print(f"Error in back_to_menu: {e}")