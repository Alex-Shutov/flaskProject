from telebot import types
from telebot.states.sync.context import StateContext
from telebot.types import ReplyParameters, CallbackQuery
from bot import bot

from app_types import UserRole
from config import CHANNEL_CHAT_ID
from database import get_orders, get_users_by_role, get_order_by_id, get_user_info_by_id, get_user_info, \
    transfer_order_to_user, get_avito_photos
from handlers.handlers import get_user_by_username
from utils import format_order_message, create_media_group




@bot.message_handler(commands=['transfer'])
def start_transfer(message: types.Message, state: StateContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –ø–µ—Ä–µ–¥–∞—á–∏ –∑–∞–∫–∞–∑–∞"""
    user_info = get_user_by_username(message.from_user.username, state)
    if not user_info:
        return

    markup = types.InlineKeyboardMarkup()
    if UserRole.COURIER.value in user_info['roles']:
        markup.add(types.InlineKeyboardButton("–ü–µ—Ä–µ–¥–∞—Ç—å –¥–æ—Å—Ç–∞–≤–∫—É", callback_data="transfer_delivery"))
    markup.add(types.InlineKeyboardButton("–ü–µ—Ä–µ–¥–∞—Ç—å —É–ø–∞–∫–æ–≤–∫—É", callback_data="transfer_packing"))

    bot.reply_to(message, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–µ—Ä–µ–¥–∞—á–∏:", reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data == "transfer_delivery")
def handle_transfer_delivery(call: CallbackQuery, state: StateContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–¥–∞—á–∏ –¥–æ—Å—Ç–∞–≤–∫–∏"""
    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã –∫—É—Ä—å–µ—Ä–∞
    orders = get_orders(
        username=call.from_user.username,
        status=['ready_to_delivery'],
        role='courier'
    )

    if not orders:
        bot.answer_callback_query(call.id, "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏")
        return

    markup = types.InlineKeyboardMarkup()
    for order in orders:
        markup.add(types.InlineKeyboardButton(
            f"–ó–∞–∫–∞–∑ #{order['id']}",
            callback_data=f"transfer_delivery_order_{order['id']}"
        ))

    bot.edit_message_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–∫–∞–∑ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏:",
        call.message.chat.id,
        call.message.message_id,
        reply_markup=markup
    )


@bot.callback_query_handler(func=lambda call: call.data.startswith("transfer_delivery_order_"))
def select_courier_for_transfer(call: CallbackQuery, state: StateContext):
    """–í—ã–±–æ—Ä –∫—É—Ä—å–µ—Ä–∞ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏"""
    order_id = call.data.split('_')[-1]
    state.add_data(transfer_order_id=order_id)
    state.add_data(transfer_type='courier')

    couriers = get_users_by_role(UserRole.COURIER.value)
    markup = types.InlineKeyboardMarkup(row_width=2)

    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∫—É—Ä—å–µ—Ä–æ–≤ –ø–æ 2 –≤ —Ä—è–¥
    buttons = []
    for courier in couriers:
        if courier['username'] != call.from_user.username:  # –ò—Å–∫–ª—é—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –∫—É—Ä—å–µ—Ä–∞
            buttons.append(types.InlineKeyboardButton(
                courier['name'],
                callback_data=f"transfer_to_user_{courier['id']}"
            ))

    markup.add(*buttons)

    bot.edit_message_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—å–µ—Ä–∞ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –∑–∞–∫–∞–∑–∞:",
        call.message.chat.id,
        call.message.message_id,
        reply_markup=markup
    )


@bot.callback_query_handler(func=lambda call: call.data == "transfer_packing")
def handle_transfer_packing(call: CallbackQuery, state: StateContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–¥–∞—á–∏ —É–ø–∞–∫–æ–≤–∫–∏"""
    orders = get_orders(
        username=call.from_user.username,
        status=['in_packing'],
        role='packer'
    )

    if not orders:
        bot.answer_callback_query(call.id, "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏")
        return

    markup = types.InlineKeyboardMarkup()
    for order in orders:
        markup.add(types.InlineKeyboardButton(
            f"–ó–∞–∫–∞–∑ #{order['id']}",
            callback_data=f"transfer_packing_order_{order['id']}"
        ))

    bot.edit_message_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–∫–∞–∑ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏:",
        call.message.chat.id,
        call.message.message_id,
        reply_markup=markup
    )


@bot.callback_query_handler(func=lambda call: call.data.startswith("transfer_packing_order_"))
def select_packer_for_transfer(call: CallbackQuery, state: StateContext):
    """–í—ã–±–æ—Ä —É–ø–∞–∫–æ–≤—â–∏–∫–∞ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏"""
    order_id = call.data.split('_')[-1]
    state.add_data(transfer_order_id=order_id)
    state.add_data(transfer_type='packer')

    users = get_users_by_role([UserRole.MANAGER.value,UserRole.ADMIN.value,UserRole.COURIER.value])  # –í—Å–µ –º–æ–≥—É—Ç —É–ø–∞–∫–æ–≤—ã–≤–∞—Ç—å
    markup = types.InlineKeyboardMarkup(row_width=2)

    buttons = []
    for user in users:

        buttons.append(types.InlineKeyboardButton(
            user['name'],
            callback_data=f"transfer_to_user_{user['id']}"
        ))

    markup.add(*buttons)

    bot.edit_message_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –∑–∞–∫–∞–∑–∞:",
        call.message.chat.id,
        call.message.message_id,
        reply_markup=markup
    )


@bot.callback_query_handler(func=lambda call: call.data.startswith("transfer_to_user_"))
def complete_transfer(call: CallbackQuery, state: StateContext):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø–µ—Ä–µ–¥–∞—á–∏ –∑–∞–∫–∞–∑–∞"""
    try:
        new_user_id = int(call.data.split('_')[-1])

        with state.data() as data:
            order_id = data['transfer_order_id']
            transfer_type = data['transfer_type']

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ –∏ –Ω–æ–≤–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        order = get_order_by_id(order_id)
        new_user = get_user_info_by_id(new_user_id)
        old_user = get_user_info(call.from_user.username)

        if not all([order, new_user, old_user]):
            raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é")

        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–µ–¥–∞—á—É
        if transfer_order_to_user(order_id, new_user_id, transfer_type):
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            order_message = format_order_message(
                order_id=order['id'],
                product_list=order['products'],
                gift=order['gift'],
                note=order['note'],
                sale_type=order['order_type'],
                manager_name=order['manager_name'],
                manager_username=order['manager_username'],
                delivery_date=order.get('delivery_date'),
                delivery_time=order.get('delivery_time'),
                delivery_address=order.get('delivery_address'),
                contact_phone=order.get('contact_phone'),
                contact_name=order.get('contact_name'),
                total_price=order.get('total_price'),
                avito_boxes=order.get('avito_boxes'),
                hide_track_prices=True
            )
            transfer_type_ru = "–ö—É—Ä—å–µ—Ä—Å–∫–∏–π –∑–∞–∫–∞–∑" if transfer_type == 'courier' else "–ó–∞–∫–∞–∑ –≤ —É–ø–∞–∫–æ–≤–∫—É"
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            if transfer_type == 'courier':
                # –î–ª—è –ê–≤–∏—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
                markup = types.InlineKeyboardMarkup()
                markup.add(types.InlineKeyboardButton(
                    "üöó –°–æ–∑–¥–∞—Ç—å –ø–æ–µ–∑–¥–∫—É",
                    callback_data=f"create_trip"
                ))
                photos = get_avito_photos(order_id)
                if photos:
                    media = create_media_group(photos, f"–í–∞–º –±—ã–ª –ø–µ—Ä–µ–¥–∞–Ω –∑–∞–∫–∞–∑ –æ—Ç {old_user['name']} ({old_user['username']})\n{transfer_type_ru}\n\n{order_message}")
                    bot.send_media_group(new_user['telegram_id'], media)

                else:
                    bot.send_message(new_user['telegram_id'], f"–í–∞–º –±—ã–ª –ø–µ—Ä–µ–¥–∞–Ω –∑–∞–∫–∞–∑ –æ—Ç {old_user['name']} ({old_user['username']})\n{transfer_type_ru}\n\n{order_message}", reply_markup=markup)
                bot.send_message(new_user['telegram_id'], "–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–ø–∞–∫–æ–≤–∞—Ç—å —ç—Ç–æ—Ç –∑–∞–∫–∞–∑, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
                                 reply_markup=markup)
            else:
                markup = types.InlineKeyboardMarkup()
                markup.add(types.InlineKeyboardButton(
                    "üì¶ –£–ø–∞–∫–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä !!!",
                    callback_data=f"pack_goods_{order['id']}_{order['message_id']}"
                ))
                bot.send_message(new_user['telegram_id'],
                                 f"–í–∞–º –ø–µ—Ä–µ–¥–∞–Ω –∑–∞–∫–∞–∑ –æ—Ç {old_user['name']} ({old_user['username']})\n{transfer_type_ru}\n\n{order_message}")
                bot.send_message(new_user['telegram_id'], "–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–ø–∞–∫–æ–≤–∞—Ç—å —ç—Ç–æ—Ç –∑–∞–∫–∞–∑, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
                                 reply_markup=markup)
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ–±—â–∏–π —á–∞—Ç
            bot.send_message(
                CHANNEL_CHAT_ID,
                f"{'–ö—É—Ä—å–µ—Ä' if transfer_type == 'courier' else '–£–ø–∞–∫–æ–≤—â–∏–∫'} –¥–ª—è –∑–∞–∫–∞–∑–∞ #{order['id']} –∏–∑–º–µ–Ω–µ–Ω\n"
                f"–ë—ã–ª: {old_user['name']} ({old_user['username']})\n"
                f"–°—Ç–∞–ª: {new_user['name']} ({new_user['username']})",
                reply_parameters=ReplyParameters(message_id=order['message_id'])
            )

            # –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –ø–µ—Ä–µ–¥–∞—á–µ
            bot.edit_message_text(
                "–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–¥–∞–Ω",
                call.message.chat.id,
                call.message.message_id
            )
        else:
            bot.answer_callback_query(call.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–¥–∞—Ç—å –∑–∞–∫–∞–∑")

    except Exception as e:
        bot.answer_callback_query(call.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–¥–∞—á–µ –∑–∞–∫–∞–∑–∞")
        print(f"Error in complete_transfer: {e}")
    finally:
        state.delete()