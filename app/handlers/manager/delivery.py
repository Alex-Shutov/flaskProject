from telebot.handler_backends import State, StatesGroup
from telebot import types
from telebot.types import Message, CallbackQuery
from telebot.states.sync.context import StateContext
from datetime import datetime, timedelta
import re

from bot import bot
from database import get_user_info, update_order_status, get_product_info_with_params
from config import CHANNEL_CHAT_ID, DATABASE_CONFIG, YANDEX_API_KEY
from app_types import OrderType, SaleTypeRu
from utils import is_valid_command, format_order_message
from handlers.courier.courier import notify_couriers
from handlers.manager.address import DeliveryAddressStates

from middlewares.delivery_zones import (
    DeliveryZoneManager,
    DeliveryCostCalculator,
    AddressComponents
)

import psycopg2
from psycopg2.extras import RealDictCursor

from database import update_order_message_id, create_order
from handlers.handlers import process_product_stock

from states import DeliveryStates

from utils import normalize_time_input

from handlers.handlers import review_order_data

from handlers.handlers import get_user_by_username

from app_types import SaleType

from states import DirectStates

from database import get_connection as connection

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
zone_manager = DeliveryZoneManager(connection, YANDEX_API_KEY)
cost_calculator = DeliveryCostCalculator(connection)




def is_valid_date(date_string: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞—Ç—ã"""
    try:
        datetime.strptime(date_string, '%d.%m.%Y')
        return True
    except ValueError:
        return False


def is_valid_time_format(time_string: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ñ–æ—Ä–º–∞—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏"""
    pattern = r'^\d{1,2}:\d{2}\s*-\s*\d{1,2}:\d{2}$'
    return bool(re.match(pattern, time_string))


def validate_phone(phone: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ñ–æ—Ä–º–∞—Ç–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    pattern = r'^\+?[78][-\(]?\d{3}\)?-?\d{3}-?\d{2}-?\d{2}$'
    return bool(re.match(pattern, phone))


# @bot.callback_query_handler(func=lambda call: call.data == 'sale_delivery')
def handle_sale_delivery(call: CallbackQuery, state: StateContext):
    """–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞ –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É"""
    if not is_valid_command(call.message.text, state):
        return

    state.add_data(sale_type="delivery")

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—ã–±–æ—Ä–æ–º –¥–∞—Ç—ã
    markup = types.InlineKeyboardMarkup(row_width=2)

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —Å –±–ª–∏–∂–∞–π—à–∏–º–∏ –¥–∞—Ç–∞–º–∏
    today = datetime.now()
    for i in range(7):  # –ù–∞ –Ω–µ–¥–µ–ª—é –≤–ø–µ—Ä–µ–¥
        date = today + timedelta(days=i)
        date_str = date.strftime('%d.%m.%Y')
        date_display = date.strftime('%d.%m.%Y')  # –î–æ–±–∞–≤–ª—è–µ–º –≥–æ–¥ –≤ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        markup.add(types.InlineKeyboardButton(
            f"üìÖ {date_display}",
            callback_data=f"delivery_date_{date_str}"
        ))

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –¥–∞—Ç—ã
    markup.add(types.InlineKeyboardButton(
        "‚úçÔ∏è –í–≤–µ—Å—Ç–∏ –¥–∞—Ç—É –≤—Ä—É—á–Ω—É—é",
        callback_data="delivery_date_manual"
    ))

    bot.edit_message_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–æ—Å—Ç–∞–≤–∫–∏:",
        call.message.chat.id,
        call.message.message_id,
        reply_markup=markup
    )
    state.set(DeliveryStates.delivery_date)

@bot.callback_query_handler(func=lambda call: call.data == "delivery_date_manual", state=DeliveryStates.delivery_date)
def handle_manual_date_input(call: CallbackQuery, state: StateContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Ä—É—á–Ω–æ–π –≤–≤–æ–¥ –¥–∞—Ç—ã"""
    bot.edit_message_text(
        "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –¥–æ—Å—Ç–∞–≤–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: 31.12.2024",
        call.message.chat.id,
        call.message.message_id
    )
    state.set(DeliveryStates.manual_date_input)

@bot.message_handler(state=DeliveryStates.manual_date_input)
def process_manual_date(message: Message, state: StateContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–π –≤—Ä—É—á–Ω—É—é –¥–∞—Ç—ã"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã
        input_date = datetime.strptime(message.text.strip(), '%d.%m.%Y')
        today = datetime.now()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞—Ç–∞ –Ω–µ –≤ –ø—Ä–æ—à–ª–æ–º
        if input_date.date() < today.date():
            bot.reply_to(
                message,
                "‚ùå –ù–µ–ª—å–∑—è –≤—ã–±—Ä–∞—Ç—å –¥–∞—Ç—É –≤ –ø—Ä–æ—à–ª–æ–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É:"
            )
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞—Ç–∞ –Ω–µ —Å–ª–∏—à–∫–æ–º –¥–∞–ª–µ–∫–æ –≤ –±—É–¥—É—â–µ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≥–æ–¥ –≤–ø–µ—Ä–µ–¥)
        max_future_date = today + timedelta(days=365)
        if input_date.date() > max_future_date.date():
            bot.reply_to(
                message,
                "‚ùå –î–∞—Ç–∞ —Å–ª–∏—à–∫–æ–º –¥–∞–ª–µ–∫–æ –≤ –±—É–¥—É—â–µ–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –±–æ–ª–µ–µ –±–ª–∏–∑–∫—É—é –¥–∞—Ç—É:"
            )
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞—Ç—É –≤ –Ω—É–∂–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
        delivery_date = input_date.strftime('%d.%m.%Y')
        state.add_data(delivery_date=delivery_date)

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞–º–∏
        bot.reply_to(
            message,
            "–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏ –≤ –ª—é–±–æ–º —É–¥–æ–±–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "–ü—Ä–∏–º–µ—Ä—ã:\n"
            "‚Ä¢ 14:30\n"
            "‚Ä¢ —Å 14:30\n"
            "‚Ä¢ –¥–æ 19:00\n"
            "‚Ä¢ —Å 14:30 –¥–æ 19:00\n"
            "‚Ä¢ 14:30 - 19:00",
        )
        state.set(DeliveryStates.delivery_time)

    except ValueError:
        bot.reply_to(
            message,
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 31.12.2024"
        )


@bot.callback_query_handler(
    func=lambda call: call.data.startswith('delivery_date_') and call.data != 'delivery_date_manual')
def handle_delivery_date_selection(call: CallbackQuery, state: StateContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã –¥–æ—Å—Ç–∞–≤–∫–∏"""
    try:
        selected_date = call.data.split('_')[2]
        state.add_data(delivery_date=selected_date)

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        display_date = datetime.strptime(selected_date, '%d.%m.%Y').strftime('%d.%m.%Y')

        bot.edit_message_text(
            f"–í—ã–±—Ä–∞–Ω–∞ –¥–∞—Ç–∞: {display_date}\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏ –≤ –ª—é–±–æ–º —É–¥–æ–±–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "–ü—Ä–∏–º–µ—Ä—ã:\n"
            "‚Ä¢ 14:30\n"
            "‚Ä¢ —Å 14:30\n"
            "‚Ä¢ –¥–æ 19:00\n"
            "‚Ä¢ —Å 14:30 –¥–æ 19:00\n"
            "‚Ä¢ 14:30 - 19:00",
            call.message.chat.id,
            call.message.message_id
        )
        state.set(DeliveryStates.delivery_time)

    except Exception as e:
        bot.answer_callback_query(call.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –¥–∞—Ç—ã")
        print(f"Error in handle_delivery_date_selection: {e}")


@bot.message_handler(state=DeliveryStates.delivery_time)
def handle_delivery_time(message: Message, state: StateContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏ –¥–æ—Å—Ç–∞–≤–∫–∏"""
    if not is_valid_command(message.text, state):
        return

    time_input = message.text.strip()

    try:
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –≤–≤–æ–¥ –≤—Ä–µ–º–µ–Ω–∏
        normalized_time = normalize_time_input(time_input)

        if not normalized_time or normalized_time == time_input:
            # –ï—Å–ª–∏ –≤—Ä–µ–º—è –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞—Ç—å, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
            # –≠—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø—Ä–∏–Ω–∏–º–∞—Ç—å –ª—é–±—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã, –¥–∞–∂–µ –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç —à–∞–±–ª–æ–Ω–∞–º
            state.add_data(delivery_time=time_input)
        else:
            state.add_data(delivery_time=normalized_time)

        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É –∞–¥—Ä–µ—Å–∞


        # –ü–µ—Ä–µ–¥–∞–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤ –º–æ–¥—É–ª—å address.py
        state.set(DeliveryAddressStates.waiting_for_city)
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton(
                "–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥",
                callback_data=f"–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥"
            ))
        bot.send_message(
            message.chat.id,
            "–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ –¥–æ—Å—Ç–∞–≤–∫–∏:",
            reply_markup=markup
        )

    except Exception as e:
        bot.reply_to(
            message,
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—Ä–µ–º–µ–Ω–∏. "
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –≤—Ä–µ–º—è —Å–Ω–æ–≤–∞."
        )
        print(f"Error in handle_delivery_time: {e}")

@bot.message_handler(state=DeliveryStates.contact_phone)
def handle_contact_phone(message: Message, state: StateContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–≥–æ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    if not is_valid_command(message.text, state):
        return

    phone = message.text.strip()
    if not validate_phone(phone):
        bot.reply_to(
            message,
            "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ: +7XXXXXXXXXX"
        )
        return

    state.add_data(contact_phone=phone)
    bot.reply_to(message, "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–≥–æ –ª–∏—Ü–∞:")
    state.set(DeliveryStates.contact_name)


@bot.message_handler(state=DeliveryStates.contact_name)
def handle_contact_name(message: Message, state: StateContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–≥–æ –∏–º–µ–Ω–∏"""
    if not is_valid_command(message.text, state):
        return
    #
    contact_name = message.text.strip()
    if not contact_name:
        bot.reply_to(message, "–ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏–º—è:")
        return
    #
    state.add_data(contact_name=contact_name)
    #
    # # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    # state_data = state.get_data()
    # product_dict = state_data.get('product_dict', {})
    # zone_id = state_data.get('temp_address_data', {}).get('selected_zone_id')
    #
    # # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤
    # total_items = sum(len(param_ids) for param_ids in product_dict.values())
    #
    # # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
    # order_items = []
    # for product_id, param_ids in product_dict.items():
    #     for param_id in param_ids:
    #         order_items.append({
    #             'product_id': product_id,
    #             'param_id': param_id
    #         })
    #
    # # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏
    # delivery_cost = cost_calculator.calculate_for_trip(order_items, zone_id)
    #
    # if delivery_cost:
    #     message_text = (
    #         f"üí∞ –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–æ—Å—Ç–∞–≤–∫–∏:\n"
    #         f"üéØ –ó–æ–Ω–∞ –¥–æ—Å—Ç–∞–≤–∫–∏: {delivery_cost.zone_name}\n"
    #         f"üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤: {total_items}\n"
    #         f"üí≥ –ë–∞–∑–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {delivery_cost.base_price} —Ä—É–±.\n"
    #     )
    #
    #     if delivery_cost.additional_items_price > 0:
    #         message_text += f"üì¶ –î–æ–ø–ª–∞—Ç–∞ –∑–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã: {delivery_cost.additional_items_price} —Ä—É–±.\n"
    # message_text = ""
    # message_text += (
    #     f"–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∑–∞–∫–∞–∑–∞"
    # )
    #
    # bot.send_message(message.chat.id, message_text)
    state.set(DirectStates.gift)
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip"))
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø–æ–¥–∞—Ä–∫–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':",
                     reply_markup=markup)


# @bot.message_handler(state=DeliveryStates.total_amount)
# def handle_total_amount(message: Message, state: StateContext):
#     """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –æ–±—â–µ–π —Å—É–º–º—ã –∑–∞–∫–∞–∑–∞"""
#     if not is_valid_command(message.text, state):
#         return
#
#     try:
#         total_amount = float(message.text.strip())
#         if total_amount <= 0:
#             raise ValueError("Amount must be positive")
#
#         state.add_data(total_amount=total_amount)
#         review_order_data(message.chat.id,state)
#     except ValueError:
#         bot.reply_to(
#             message,
#             "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ –Ω—É–ª—è:"
#         )


def finalize_delivery_order(chat_id,message_id,username, state: StateContext):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞ –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É"""
    try:
        with state.data() as order_data:
            manager_info = get_user_by_username(username,state)
            if not manager_info:
                raise ValueError("Manager info not found")

            product_dict = order_data.get("product_dict")
            if not product_dict:
                raise ValueError("No products selected")
            print(manager_info,'info')
            # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
            print(order_data)
            print(message_id)
            order_result = create_order(
                product_dict=product_dict,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º product_dict –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
                gift=order_data.get('gift'),  # –ë–∞–∑–æ–≤—ã–π –ø–æ–¥–∞—Ä–æ–∫ –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω
                note=order_data.get('note'),
                sale_type='delivery',
                manager_id=manager_info['id'],
                message_id=message_id,
                # avito_photos_tracks=None,
                # packer_id=None,
                status_order=OrderType.READY_TO_DELIVERY.value,
                delivery_date=order_data.get('delivery_date'),
                delivery_time=order_data.get('delivery_time'),
                delivery_address=order_data.get('delivery_address')['full_address'],
                contact_phone=order_data.get('contact_phone'),
                contact_name=order_data.get('contact_name'),
                total_price=order_data.get('total_price')
            )
            print(order_result,'result')
            if not order_result:
                raise ValueError("Failed to create order")

            order_id = order_result['id']
            products_info = order_result['values']

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–∫–∞–∑–µ
            order_message = format_order_message(
                order_id=order_id,
                product_list=products_info.get('general', []),  # –°–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                gift=order_data.get('gift', "–ì–∏—Ä–ª—è–Ω–¥–∞ 2–º"),
                note=order_data.get('note'),
                sale_type=SaleType.DELIVERY.value,
                manager_name=manager_info['name'],
                manager_username=manager_info['username'],
                delivery_date=order_data.get('delivery_date'),
                delivery_time=order_data.get('delivery_time'),
                delivery_address=order_data.get('full_address', order_data.get('delivery_address')['full_address']),
                contact_phone=order_data.get('contact_phone'),
                contact_name=order_data.get('contact_name'),
                total_price=order_data.get('total_amount'),
                zone_name=order_data.get('zone_name'),
            )
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É
            bot.send_message(chat_id, order_message)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª
            channel_message = bot.send_message(CHANNEL_CHAT_ID, order_message)

            # –û–±–Ω–æ–≤–ª—è–µ–º message_id –≤ –∑–∞–∫–∞–∑–µ
            update_order_message_id(order_id, channel_message.message_id)

            zone_manager.save_delivery_address(order_id,
                                            order_data.get('temp_address_data')['components'],
                                            order_data.get('temp_address_data')['coordinates'])
            # –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ —Å–∫–ª–∞–¥–µ
            process_product_stock(product_dict)

            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∫—É—Ä—å–µ—Ä–æ–≤
            notify_couriers(
                order_message,
                state,
                avito_photos=[],
                reply_message_id=channel_message.message_id
            )

            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            state.delete()

    except Exception as e:
        bot.reply_to(
            message_id,
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        )
        print(f"Error in finalize_delivery_order: {e}")