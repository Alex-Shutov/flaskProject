from telebot import types
from telebot.states.sync.context import StateContext
from database import get_user_info

from bot import bot

from database import get_product_info_with_params, get_product_params

from database import decrement_stock

from app_types import OrderType, SaleType

from app_types import SaleTypeRu

from database import get_user_info_by_id


def get_user_by_username(username, state, user_id=None):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ state. –ï—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–µ—Ç, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –µ—ë –∏–∑ –ë–î –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ state.

    :param username: –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :param state: –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
    :return: –°–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ (id, –∏–º—è, username, —Ä–æ–ª–∏) –∏–ª–∏ None, –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ state
    with state.data() as user_data:
        user_info = user_data.get('user_info')

    if not user_info:
        # –ï—Å–ª–∏ –Ω–µ—Ç –≤ state, –ø–æ–ª—É—á–∞–µ–º –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        user_info = get_user_info(username) # –≠—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö

        if user_info:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ state
             state.add_data(user_info=user_info)
        else:
            return None  # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î

    return user_info




def review_order_data(chat_id, state: StateContext,prev_message=None):
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–≤–æ–¥–∫—É –∑–∞–∫–∞–∑–∞ –ø–µ—Ä–µ–¥ —Ñ–∏–Ω–∞–ª—å–Ω—ã–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
    """
    with state.data() as data:
        # –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞
        original_manager_id = data.get('original_manager_id',None)
        original_manager_name = data.get('original_manager_name',None)
        original_manager_username = data.get('original_manager_username',None)
        sale_type = data.get('sale_type')
        product_dict = data.get('product_dict', {})
        gift = data.get('gift', '–ë–µ–∑ –ø–æ–¥–∞—Ä–∫–∞')
        note = data.get('note', '–ë–µ–∑ –∑–∞–º–µ—Ç–æ–∫')
        packer_id = data.get('pack_id')
        user_info = data.get('user_info')
        total_price = data.get('total_price', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')
        delivery_sum = data.get('delivery_sum', None)
        print(data,'data')
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã –ø–æ —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä–∞–º –¥–ª—è –ê–≤–∏—Ç–æ

        products_by_tracking = {}
        if sale_type == "avito":
            avito_products = data.get("avito_products", {})
            print(avito_products)
            for track_number, track_info in avito_products.items():
                products_by_tracking[track_number] = {
                    'products': [],
                    'price': track_info['price']
                }
                products = track_info['products']
                for product_id, param_ids in products.items():
                    for param_id in param_ids:
                        product_info = get_product_info_with_params(product_id, param_id)
                        if product_info:
                            products_by_tracking[track_number]['products'].append({
                                'name': product_info['name'],
                                'param': product_info['param_title']
                            })
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç –∑–∞–∫–∞–∑–∞
        order_summary = ["üì¶ –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–∫–∞–∑–∞:"]
        order_summary.append(f"\n–¢–∏–ø –ø—Ä–æ–¥–∞–∂–∏: {SaleTypeRu[sale_type.upper()].value}{'(–ü–æ–∫–∞–∑)' if sale_type == 'direct' and original_manager_id else ''}")
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–¥—É–∫—Ç–∞—Ö

        if sale_type in ['sdek', 'pek', 'luch']:
            courier_photos = data.get('courier_photos', {})
            if courier_photos:
                order_summary.append(f"\nüì∏ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ: {len(courier_photos)}")

        if sale_type == "avito":
            total = 0
            print(products_by_tracking)
            for track_number, track_info in products_by_tracking.items():
                total += track_info['price']
                order_summary.append(f"\nüîπ –¢—Ä–µ–∫-–Ω–æ–º–µ—Ä: {track_number}\n")
                for product in track_info['products']:
                    order_summary.append(f"  ‚Ä¢ {product['name']} - {product['param']}")
                    # order_summary.append(f"{track_info['price']} —Ä—É–±.")
            order_summary.append(f"\nüí∞ –û–±—â–∞—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞: {total} —Ä—É–±.")
        else:
            order_summary.append("\nüõí –ü—Ä–æ–¥—É–∫—Ç—ã:")
            for product_id, param_ids in product_dict.items():
                # –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞
                for param_id in param_ids:
                    product_info = get_product_info_with_params(product_id, param_id)
                    if product_info:
                        emoji = "üì¶" if product_info.get('is_main_product') else "‚ûï"
                        order_summary.append(f"  {emoji} {product_info['name']} - {product_info['param_title']}")
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        packer_info = ''
        if packer_id is not None and sale_type in [SaleType.DELIVERY.value, SaleType.AVITO.value]:
            packer_info = f"üõçÔ∏è {get_packer_info(int(packer_id),state=state,username=user_info['username'])}"

        order_summary.extend([
            f"\nüéÅ –ü–æ–¥–∞—Ä–æ–∫: {gift}",
            f"üìù –ó–∞–º–µ—Ç–∫–∞: {note}",
            packer_info
        ])
        if sale_type == "direct" and original_manager_id is not None:
            order_summary.append(f"\nüë§ –ú–µ–Ω–µ–¥–∂–µ—Ä: {original_manager_name} {original_manager_username}\n")
        if sale_type != 'avito':
            order_summary.append(f'\nüí∞ –°—É–º–º–∞ –∑–∞–∫–∞–∑–∞: {total_price} —Ä—É–±.')
            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ –¥–ª—è –°–î–≠–ö, –ü–≠–ö, –õ–£–ß
            if sale_type in ['sdek', 'pek', 'luch'] and delivery_sum is not None:
                order_summary.append(f'üöö –°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏: {delivery_sum} —Ä—É–±.')
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ —Ç–∏–ø—É –∑–∞–∫–∞–∑–∞
        if sale_type == "avito":
            avito_photos_tracks = data.get('avito_photos_tracks', {})
            order_summary.append(f"\nüì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—à–∫–æ–≤: {len(avito_photos_tracks)}")
        elif sale_type == "delivery":
            full_address = data.get('delivery_address', '')['full_address']
            zone_name = data.get('zone_name')
            delivery_info = [
                f"\nüìç –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ—Å—Ç–∞–≤–∫–µ:",
                f"üè† –ê–¥—Ä–µ—Å: {full_address}",
                f"üéØ –ó–æ–Ω–∞ –¥–æ—Å—Ç–∞–≤–∫–∏: {zone_name}",
                f"üìÖ –î–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏: {data.get('delivery_date')}",
                f"‚è∞ –í—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏: {data.get('delivery_time')}",
                f"üë§ –ü–æ–ª—É—á–∞—Ç–µ–ª—å: {data.get('contact_name')}",
                f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {data.get('contact_phone')}"
            ]
            order_summary.extend(delivery_info)


        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        markup = types.InlineKeyboardMarkup()
        markup.add(
            types.InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_final_order"),
            types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_order")
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        bot.send_message(
            chat_id,
            '\n'.join(filter(None, order_summary)),  # –§–∏–ª—å—Ç—Ä—É–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
            reply_markup=markup,
            parse_mode='HTML'
        )




def get_packer_info(packer_id,state=None,username=None):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É–ø–∞–∫–æ–≤—â–∏–∫–µ"""
    if not packer_id:
        return "–£–ø–∞–∫–æ–≤—â–∏–∫: –ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω"
    packer = get_user_info(packer_id) if not state and not username else get_user_by_username(username,state)
    return f"–£–ø–∞–∫–æ–≤—â–∏–∫: {packer['name']} ({packer['username']})"


def get_delivery_info(data):
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å—Ç–∞–≤–∫–µ"""
    return [
        f"\nüìÖ –î–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏: {data.get('delivery_date', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}",
        f"üïí –í—Ä–µ–º—è: {data.get('delivery_time', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}",
        f"üìç –ê–¥—Ä–µ—Å: {data.get('delivery_address', '–ù–µ —É–∫–∞–∑–∞–Ω')}",
        f"üë§ –ü–æ–ª—É—á–∞—Ç–µ–ª—å: {data.get('contact_name', '–ù–µ —É–∫–∞–∑–∞–Ω')}",
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {data.get('contact_phone', '–ù–µ —É–∫–∞–∑–∞–Ω')}"
    ]
def process_product_stock(product_dict):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞ —Å–∫–ª–∞–¥–µ –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –≤ –∑–∞–∫–∞–∑–µ.

    Args:
        product_dict (dict): –°–ª–æ–≤–∞—Ä—å, –≥–¥–µ –∫–ª—é—á ‚Äî —ç—Ç–æ product_id, –∞ –∑–Ω–∞—á–µ–Ω–∏–µ ‚Äî —Å–ø–∏—Å–æ–∫ param_ids.
    """
    for product_id, param_ids in product_dict.items():
        for param_id in set(param_ids):
            quantity = param_ids.count(param_id)
            decrement_stock(product_id=product_id, product_param_id=param_id, quantity=quantity)

def delete_multiple_states(state: StateContext,states_to_delete_array:[]):
    with state.data() as data:
        # –°–ø–∏—Å–æ–∫ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        states_to_delete = states_to_delete_array
        for state_name in states_to_delete:
            data.pop(state_name, None)